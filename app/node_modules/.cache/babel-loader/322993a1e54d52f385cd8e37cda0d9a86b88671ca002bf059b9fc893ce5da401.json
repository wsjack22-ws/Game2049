{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KeyDerivation = exports.DerivationAlgorithm = exports.Curve = void 0;\nconst RegistryType_1 = require(\"../RegistryType\");\nconst RegistryItem_1 = require(\"../RegistryItem\");\nconst lib_1 = require(\"../lib\");\nconst CryptoKeypath_1 = require(\"../CryptoKeypath\");\nvar Keys;\n(function (Keys) {\n  Keys[Keys[\"keyPaths\"] = 1] = \"keyPaths\";\n  Keys[Keys[\"curve\"] = 2] = \"curve\";\n  Keys[Keys[\"algo\"] = 3] = \"algo\";\n  Keys[Keys[\"origin\"] = 4] = \"origin\";\n})(Keys || (Keys = {}));\nvar Curve;\n(function (Curve) {\n  Curve[\"secp256k1\"] = \"secp256k1\";\n  Curve[\"ed25519\"] = \"ed25519\";\n})(Curve = exports.Curve || (exports.Curve = {}));\nvar DerivationAlgorithm;\n(function (DerivationAlgorithm) {\n  DerivationAlgorithm[\"slip10\"] = \"slip10\";\n  DerivationAlgorithm[\"bip32ed25519\"] = \"bip32ed25519\";\n})(DerivationAlgorithm = exports.DerivationAlgorithm || (exports.DerivationAlgorithm = {}));\nclass KeyDerivation extends RegistryItem_1.RegistryItem {\n  constructor(keypaths, curve = Curve.secp256k1, algo = DerivationAlgorithm.slip10, origin) {\n    super();\n    this.keypaths = keypaths;\n    this.curve = curve;\n    this.algo = algo;\n    this.origin = origin;\n    this.getRegistryType = () => RegistryType_1.RegistryTypes.KEY_DERIVATION_CALL;\n    this.getKeypaths = () => this.keypaths;\n    this.getCurve = () => this.curve;\n    this.getAlgo = () => this.algo;\n    this.getOrigin = () => this.origin;\n    this.toDataItem = () => {\n      const map = {};\n      map[Keys.keyPaths] = this.keypaths.map(keyPath => {\n        const dataItem = keyPath.toDataItem();\n        dataItem.setTag(keyPath.getRegistryType().getTag());\n        return dataItem;\n      });\n      map[Keys.curve] = this.curve;\n      map[Keys.algo] = this.algo;\n      if (this.origin) {\n        map[Keys.origin] = this.origin;\n      }\n      return new lib_1.DataItem(map);\n    };\n  }\n}\nexports.KeyDerivation = KeyDerivation;\nKeyDerivation.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const keypaths = map[Keys.keyPaths].map(keypath => CryptoKeypath_1.CryptoKeypath.fromDataItem(keypath));\n  const curve = map[Keys.curve];\n  const algo = map[Keys.algo];\n  const origin = map[Keys.origin];\n  return new KeyDerivation(keypaths, curve, algo, origin);\n};\nKeyDerivation.fromCBOR = _cborPayload => {\n  const dataItem = lib_1.decodeToDataItem(_cborPayload);\n  return KeyDerivation.fromDataItem(dataItem);\n};","map":{"version":3,"names":["RegistryType_1","require","RegistryItem_1","lib_1","CryptoKeypath_1","Keys","Curve","exports","DerivationAlgorithm","KeyDerivation","RegistryItem","constructor","keypaths","curve","secp256k1","algo","slip10","origin","getRegistryType","RegistryTypes","KEY_DERIVATION_CALL","getKeypaths","getCurve","getAlgo","getOrigin","toDataItem","map","keyPaths","keyPath","dataItem","setTag","getTag","DataItem","fromDataItem","getData","keypath","CryptoKeypath","fromCBOR","_cborPayload","decodeToDataItem"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@keystonehq/bc-ur-registry/src/extended/KeyDerivation.ts"],"sourcesContent":["import { RegistryTypes } from \"../RegistryType\";\nimport { RegistryItem } from \"../RegistryItem\";\nimport { DataItem, decodeToDataItem } from '../lib';\nimport { DataItemMap } from '../types';\nimport { CryptoKeypath } from \"../CryptoKeypath\";\n\nenum Keys {\n  keyPaths = 1,\n  curve,\n  algo,\n  origin,\n}\n\nexport enum Curve {\n  secp256k1 = \"secp256k1\",\n  ed25519 = \"ed25519\"\n}\n\nexport enum DerivationAlgorithm {\n  slip10 = \"slip10\",\n  bip32ed25519 = \"bip32ed25519\"\n}\n\nexport class KeyDerivation extends RegistryItem {\n  getRegistryType = () => RegistryTypes.KEY_DERIVATION_CALL;\n\n  constructor(\n    private keypaths: CryptoKeypath[],\n    private curve: Curve = Curve.secp256k1,\n    private algo: DerivationAlgorithm = DerivationAlgorithm.slip10,\n    private origin?: string\n  ) {\n    super();\n  }\n\n  public getKeypaths = (): CryptoKeypath[] => this.keypaths;\n  public getCurve = (): Curve => this.curve;\n  public getAlgo = (): DerivationAlgorithm => this.algo;\n  public getOrigin = (): string | undefined => this.origin;\n\n  public toDataItem = (): DataItem => {\n    const map: DataItemMap = {};\n    map[Keys.keyPaths] = this.keypaths.map(keyPath => {\n      const dataItem = keyPath.toDataItem()\n      dataItem.setTag(keyPath.getRegistryType().getTag());\n      return dataItem;\n    });\n\n    map[Keys.curve] = this.curve;\n    map[Keys.algo] = this.algo;\n    if (this.origin) {\n      map[Keys.origin] = this.origin;\n    }\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem): KeyDerivation => {\n    const map = dataItem.getData();\n    const keypaths = map[Keys.keyPaths].map(keypath =>\n      CryptoKeypath.fromDataItem(keypath)\n    )\n    const curve = map[Keys.curve];\n    const algo = map[Keys.algo];\n    const origin = map[Keys.origin];\n    return new KeyDerivation(keypaths, curve, algo, origin);\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer): KeyDerivation => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return KeyDerivation.fromDataItem(dataItem);\n  };\n}\n"],"mappings":";;;;;;AAAA,MAAAA,cAAA,GAAAC,OAAA;AACA,MAAAC,cAAA,GAAAD,OAAA;AACA,MAAAE,KAAA,GAAAF,OAAA;AAEA,MAAAG,eAAA,GAAAH,OAAA;AAEA,IAAKI,IAKJ;AALD,WAAKA,IAAI;EACPA,IAAA,CAAAA,IAAA,8BAAY;EACZA,IAAA,CAAAA,IAAA,wBAAK;EACLA,IAAA,CAAAA,IAAA,sBAAI;EACJA,IAAA,CAAAA,IAAA,0BAAM;AACR,CAAC,EALIA,IAAI,KAAJA,IAAI;AAOT,IAAYC,KAGX;AAHD,WAAYA,KAAK;EACfA,KAAA,2BAAuB;EACvBA,KAAA,uBAAmB;AACrB,CAAC,EAHWA,KAAK,GAALC,OAAA,CAAAD,KAAK,KAALC,OAAA,CAAAD,KAAK;AAKjB,IAAYE,mBAGX;AAHD,WAAYA,mBAAmB;EAC7BA,mBAAA,qBAAiB;EACjBA,mBAAA,iCAA6B;AAC/B,CAAC,EAHWA,mBAAmB,GAAnBD,OAAA,CAAAC,mBAAmB,KAAnBD,OAAA,CAAAC,mBAAmB;AAK/B,MAAaC,aAAc,SAAQP,cAAA,CAAAQ,YAAY;EAG7CC,YACUC,QAAyB,EACzBC,KAAA,GAAeP,KAAK,CAACQ,SAAS,EAC9BC,IAAA,GAA4BP,mBAAmB,CAACQ,MAAM,EACtDC,MAAe;IAEvB,KAAK,EAAE;IALC,KAAAL,QAAQ,GAARA,QAAQ;IACR,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAE,IAAI,GAAJA,IAAI;IACJ,KAAAE,MAAM,GAANA,MAAM;IANhB,KAAAC,eAAe,GAAG,MAAMlB,cAAA,CAAAmB,aAAa,CAACC,mBAAmB;IAWlD,KAAAC,WAAW,GAAG,MAAuB,IAAI,CAACT,QAAQ;IAClD,KAAAU,QAAQ,GAAG,MAAa,IAAI,CAACT,KAAK;IAClC,KAAAU,OAAO,GAAG,MAA2B,IAAI,CAACR,IAAI;IAC9C,KAAAS,SAAS,GAAG,MAA0B,IAAI,CAACP,MAAM;IAEjD,KAAAQ,UAAU,GAAG,MAAe;MACjC,MAAMC,GAAG,GAAgB,EAAE;MAC3BA,GAAG,CAACrB,IAAI,CAACsB,QAAQ,CAAC,GAAG,IAAI,CAACf,QAAQ,CAACc,GAAG,CAACE,OAAO,IAAG;QAC/C,MAAMC,QAAQ,GAAGD,OAAO,CAACH,UAAU,EAAE;QACrCI,QAAQ,CAACC,MAAM,CAACF,OAAO,CAACV,eAAe,EAAE,CAACa,MAAM,EAAE,CAAC;QACnD,OAAOF,QAAQ;MACjB,CAAC,CAAC;MAEFH,GAAG,CAACrB,IAAI,CAACQ,KAAK,CAAC,GAAG,IAAI,CAACA,KAAK;MAC5Ba,GAAG,CAACrB,IAAI,CAACU,IAAI,CAAC,GAAG,IAAI,CAACA,IAAI;MAC1B,IAAI,IAAI,CAACE,MAAM,EAAE;QACfS,GAAG,CAACrB,IAAI,CAACY,MAAM,CAAC,GAAG,IAAI,CAACA,MAAM;;MAEhC,OAAO,IAAId,KAAA,CAAA6B,QAAQ,CAACN,GAAG,CAAC;IAC1B,CAAC;EArBD;;AAVFnB,OAAA,CAAAE,aAAA,GAAAA,aAAA;AAiCgBA,aAAA,CAAAwB,YAAY,GAAIJ,QAAkB,IAAmB;EACjE,MAAMH,GAAG,GAAGG,QAAQ,CAACK,OAAO,EAAE;EAC9B,MAAMtB,QAAQ,GAAGc,GAAG,CAACrB,IAAI,CAACsB,QAAQ,CAAC,CAACD,GAAG,CAACS,OAAO,IAC7C/B,eAAA,CAAAgC,aAAa,CAACH,YAAY,CAACE,OAAO,CAAC,CACpC;EACD,MAAMtB,KAAK,GAAGa,GAAG,CAACrB,IAAI,CAACQ,KAAK,CAAC;EAC7B,MAAME,IAAI,GAAGW,GAAG,CAACrB,IAAI,CAACU,IAAI,CAAC;EAC3B,MAAME,MAAM,GAAGS,GAAG,CAACrB,IAAI,CAACY,MAAM,CAAC;EAC/B,OAAO,IAAIR,aAAa,CAACG,QAAQ,EAAEC,KAAK,EAAEE,IAAI,EAAEE,MAAM,CAAC;AACzD,CAAC;AAEaR,aAAA,CAAA4B,QAAQ,GAAIC,YAAoB,IAAmB;EAC/D,MAAMT,QAAQ,GAAG1B,KAAA,CAAAoC,gBAAgB,CAACD,YAAY,CAAC;EAC/C,OAAO7B,aAAa,CAACwB,YAAY,CAACJ,QAAQ,CAAC;AAC7C,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}