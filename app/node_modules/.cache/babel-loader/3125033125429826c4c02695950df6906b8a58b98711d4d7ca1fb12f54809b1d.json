{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { IdlCoder } from \"./idl\";\nimport { sha256 } from \"js-sha256\";\nimport camelcase from \"camelcase\";\n/**\n * Number of bytes of the account discriminator.\n */\nexport var ACCOUNT_DISCRIMINATOR_SIZE = 8;\n/**\n * Encodes and decodes account objects.\n */\nexport var AccountsCoder = /*#__PURE__*/function () {\n  function AccountsCoder(idl) {\n    _classCallCheck(this, AccountsCoder);\n    if (idl.accounts === undefined) {\n      this.accountLayouts = new Map();\n      return;\n    }\n    var layouts = idl.accounts.map(function (acc) {\n      return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];\n    });\n    this.accountLayouts = new Map(layouts);\n  }\n  _createClass(AccountsCoder, [{\n    key: \"encode\",\n    value: function () {\n      var _encode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(accountName, account) {\n        var buffer, layout, len, accountData, discriminator;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n              layout = this.accountLayouts.get(accountName);\n              if (layout) {\n                _context.next = 4;\n                break;\n              }\n              throw new Error(\"Unknown account: \".concat(accountName));\n            case 4:\n              len = layout.encode(account, buffer);\n              accountData = buffer.slice(0, len);\n              discriminator = AccountsCoder.accountDiscriminator(accountName);\n              return _context.abrupt(\"return\", Buffer.concat([discriminator, accountData]));\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function encode(_x, _x2) {\n        return _encode.apply(this, arguments);\n      }\n      return encode;\n    }()\n  }, {\n    key: \"decode\",\n    value: function decode(accountName, ix) {\n      // Chop off the discriminator before decoding.\n      var data = ix.slice(ACCOUNT_DISCRIMINATOR_SIZE);\n      var layout = this.accountLayouts.get(accountName);\n      if (!layout) {\n        throw new Error(\"Unknown account: \".concat(accountName));\n      }\n      return layout.decode(data);\n    }\n    /**\n     * Calculates and returns a unique 8 byte discriminator prepended to all anchor accounts.\n     *\n     * @param name The name of the account to calculate the discriminator.\n     */\n  }], [{\n    key: \"accountDiscriminator\",\n    value: function accountDiscriminator(name) {\n      return Buffer.from(sha256.digest(\"account:\".concat(camelcase(name, {\n        pascalCase: true\n      })))).slice(0, ACCOUNT_DISCRIMINATOR_SIZE);\n    }\n  }]);\n  return AccountsCoder;\n}();","map":{"version":3,"names":["IdlCoder","sha256","camelcase","ACCOUNT_DISCRIMINATOR_SIZE","AccountsCoder","idl","_classCallCheck","accounts","undefined","accountLayouts","Map","layouts","map","acc","name","typeDefLayout","types","_createClass","key","value","_encode","_asyncToGenerator","_regeneratorRuntime","mark","_callee","accountName","account","buffer","layout","len","accountData","discriminator","wrap","_callee$","_context","prev","next","Buffer","alloc","get","Error","concat","encode","slice","accountDiscriminator","abrupt","stop","_x","_x2","apply","arguments","decode","ix","data","from","digest","pascalCase"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/coder/accounts.ts"],"sourcesContent":["import { Layout } from \"buffer-layout\";\nimport { Idl } from \"../idl\";\nimport { IdlCoder } from \"./idl\";\nimport { sha256 } from \"js-sha256\";\nimport camelcase from \"camelcase\";\n\n/**\n * Number of bytes of the account discriminator.\n */\nexport const ACCOUNT_DISCRIMINATOR_SIZE = 8;\n\n/**\n * Encodes and decodes account objects.\n */\nexport class AccountsCoder<A extends string = string> {\n  /**\n   * Maps account type identifier to a layout.\n   */\n  private accountLayouts: Map<A, Layout>;\n\n  public constructor(idl: Idl) {\n    if (idl.accounts === undefined) {\n      this.accountLayouts = new Map();\n      return;\n    }\n    const layouts: [A, Layout][] = idl.accounts.map((acc) => {\n      return [acc.name as A, IdlCoder.typeDefLayout(acc, idl.types)];\n    });\n\n    this.accountLayouts = new Map(layouts);\n  }\n\n  public async encode<T = any>(accountName: A, account: T): Promise<Buffer> {\n    const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n    const layout = this.accountLayouts.get(accountName);\n    if (!layout) {\n      throw new Error(`Unknown account: ${accountName}`);\n    }\n    const len = layout.encode(account, buffer);\n    let accountData = buffer.slice(0, len);\n    let discriminator = AccountsCoder.accountDiscriminator(accountName);\n    return Buffer.concat([discriminator, accountData]);\n  }\n\n  public decode<T = any>(accountName: A, ix: Buffer): T {\n    // Chop off the discriminator before decoding.\n    const data = ix.slice(ACCOUNT_DISCRIMINATOR_SIZE);\n    const layout = this.accountLayouts.get(accountName);\n    if (!layout) {\n      throw new Error(`Unknown account: ${accountName}`);\n    }\n    return layout.decode(data);\n  }\n\n  /**\n   * Calculates and returns a unique 8 byte discriminator prepended to all anchor accounts.\n   *\n   * @param name The name of the account to calculate the discriminator.\n   */\n  public static accountDiscriminator(name: string): Buffer {\n    return Buffer.from(\n      sha256.digest(`account:${camelcase(name, { pascalCase: true })}`)\n    ).slice(0, ACCOUNT_DISCRIMINATOR_SIZE);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}