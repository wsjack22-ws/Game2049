{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Connection, Keypair, sendAndConfirmRawTransaction } from \"@solana/web3.js\";\nimport { isBrowser } from \"./utils/common\";\n/**\n * The network and wallet context used to send transactions paid for and signed\n * by the provider.\n */\nvar Provider = /*#__PURE__*/function () {\n  /**\n   * @param connection The cluster connection where the program is deployed.\n   * @param wallet     The wallet used to pay for and sign all transactions.\n   * @param opts       Transaction confirmation options to use by default.\n   */\n  function Provider(connection, wallet, opts) {\n    _classCallCheck(this, Provider);\n    this.connection = connection;\n    this.wallet = wallet;\n    this.opts = opts;\n  }\n  _createClass(Provider, [{\n    key: \"send\",\n    value:\n    /**\n     * Sends the given transaction, paid for and signed by the provider's wallet.\n     *\n     * @param tx      The transaction to send.\n     * @param signers The set of signers in addition to the provider wallet that\n     *                will sign the transaction.\n     * @param opts    Transaction confirmation options.\n     */\n    function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(tx, signers, opts) {\n        var rawTx, txId;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (signers === undefined) {\n                signers = [];\n              }\n              if (opts === undefined) {\n                opts = this.opts;\n              }\n              tx.feePayer = this.wallet.publicKey;\n              _context.next = 5;\n              return this.connection.getRecentBlockhash(opts.preflightCommitment);\n            case 5:\n              tx.recentBlockhash = _context.sent.blockhash;\n              _context.next = 8;\n              return this.wallet.signTransaction(tx);\n            case 8:\n              signers.filter(function (s) {\n                return s !== undefined;\n              }).forEach(function (kp) {\n                tx.partialSign(kp);\n              });\n              rawTx = tx.serialize();\n              _context.next = 12;\n              return sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n            case 12:\n              txId = _context.sent;\n              return _context.abrupt(\"return\", txId);\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function send(_x, _x2, _x3) {\n        return _send.apply(this, arguments);\n      }\n      return send;\n    }()\n    /**\n     * Similar to `send`, but for an array of transactions and signers.\n     */\n  }, {\n    key: \"sendAll\",\n    value: function () {\n      var _sendAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(reqs, opts) {\n        var _this = this;\n        var blockhash, txs, signedTxs, sigs, k, tx, rawTx;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (opts === undefined) {\n                opts = this.opts;\n              }\n              _context2.next = 3;\n              return this.connection.getRecentBlockhash(opts.preflightCommitment);\n            case 3:\n              blockhash = _context2.sent;\n              txs = reqs.map(function (r) {\n                var tx = r.tx;\n                var signers = r.signers;\n                if (signers === undefined) {\n                  signers = [];\n                }\n                tx.feePayer = _this.wallet.publicKey;\n                tx.recentBlockhash = blockhash.blockhash;\n                signers.filter(function (s) {\n                  return s !== undefined;\n                }).forEach(function (kp) {\n                  tx.partialSign(kp);\n                });\n                return tx;\n              });\n              _context2.next = 7;\n              return this.wallet.signAllTransactions(txs);\n            case 7:\n              signedTxs = _context2.sent;\n              sigs = [];\n              k = 0;\n            case 10:\n              if (!(k < txs.length)) {\n                _context2.next = 21;\n                break;\n              }\n              tx = signedTxs[k];\n              rawTx = tx.serialize();\n              _context2.t0 = sigs;\n              _context2.next = 16;\n              return sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n            case 16:\n              _context2.t1 = _context2.sent;\n              _context2.t0.push.call(_context2.t0, _context2.t1);\n            case 18:\n              k += 1;\n              _context2.next = 10;\n              break;\n            case 21:\n              return _context2.abrupt(\"return\", sigs);\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function sendAll(_x4, _x5) {\n        return _sendAll.apply(this, arguments);\n      }\n      return sendAll;\n    }()\n    /**\n     * Simulates the given transaction, returning emitted logs from execution.\n     *\n     * @param tx      The transaction to send.\n     * @param signers The set of signers in addition to the provdier wallet that\n     *                will sign the transaction.\n     * @param opts    Transaction confirmation options.\n     */\n  }, {\n    key: \"simulate\",\n    value: function () {\n      var _simulate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(tx, signers) {\n        var opts,\n          _a,\n          _b,\n          _c,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              opts = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : this.opts;\n              if (signers === undefined) {\n                signers = [];\n              }\n              tx.feePayer = this.wallet.publicKey;\n              _context3.next = 5;\n              return this.connection.getRecentBlockhash((_a = opts.preflightCommitment) !== null && _a !== void 0 ? _a : this.opts.preflightCommitment);\n            case 5:\n              tx.recentBlockhash = _context3.sent.blockhash;\n              _context3.next = 8;\n              return this.wallet.signTransaction(tx);\n            case 8:\n              signers.filter(function (s) {\n                return s !== undefined;\n              }).forEach(function (kp) {\n                tx.partialSign(kp);\n              });\n              _context3.next = 11;\n              return simulateTransaction(this.connection, tx, (_c = (_b = opts.commitment) !== null && _b !== void 0 ? _b : this.opts.commitment) !== null && _c !== void 0 ? _c : \"recent\");\n            case 11:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function simulate(_x6, _x7) {\n        return _simulate.apply(this, arguments);\n      }\n      return simulate;\n    }()\n  }], [{\n    key: \"defaultOptions\",\n    value: function defaultOptions() {\n      return {\n        preflightCommitment: \"recent\",\n        commitment: \"recent\"\n      };\n    }\n    /**\n     * Returns a `Provider` with a wallet read from the local filesystem.\n     *\n     * @param url  The network cluster url.\n     * @param opts The default transaction confirmation options.\n     *\n     * (This api is for Node only.)\n     */\n  }, {\n    key: \"local\",\n    value: function local(url, opts) {\n      opts = opts !== null && opts !== void 0 ? opts : Provider.defaultOptions();\n      var connection = new Connection(url !== null && url !== void 0 ? url : \"http://localhost:8899\", opts.preflightCommitment);\n      var wallet = NodeWallet.local();\n      return new Provider(connection, wallet, opts);\n    }\n    /**\n     * Returns a `Provider` read from the `ANCHOR_PROVIDER_URL` environment\n     * variable\n     *\n     * (This api is for Node only.)\n     */\n  }, {\n    key: \"env\",\n    value: function env() {\n      if (isBrowser) {\n        throw new Error(\"Provider env is not available on browser.\");\n      }\n      var process = require(\"process\");\n      var url = process.env.ANCHOR_PROVIDER_URL;\n      if (url === undefined) {\n        throw new Error(\"ANCHOR_PROVIDER_URL is not defined\");\n      }\n      var options = Provider.defaultOptions();\n      var connection = new Connection(url, options.commitment);\n      var wallet = NodeWallet.local();\n      return new Provider(connection, wallet, options);\n    }\n  }]);\n  return Provider;\n}();\n/**\n * Node only wallet.\n */\nexport { Provider as default };\nexport var NodeWallet = /*#__PURE__*/function () {\n  function NodeWallet(payer) {\n    _classCallCheck(this, NodeWallet);\n    this.payer = payer;\n  }\n  _createClass(NodeWallet, [{\n    key: \"signTransaction\",\n    value: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(tx) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              tx.partialSign(this.payer);\n              return _context4.abrupt(\"return\", tx);\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function signTransaction(_x8) {\n        return _signTransaction.apply(this, arguments);\n      }\n      return signTransaction;\n    }()\n  }, {\n    key: \"signAllTransactions\",\n    value: function () {\n      var _signAllTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(txs) {\n        var _this2 = this;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", txs.map(function (t) {\n                t.partialSign(_this2.payer);\n                return t;\n              }));\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }));\n      function signAllTransactions(_x9) {\n        return _signAllTransactions.apply(this, arguments);\n      }\n      return signAllTransactions;\n    }()\n  }, {\n    key: \"publicKey\",\n    get: function get() {\n      return this.payer.publicKey;\n    }\n  }], [{\n    key: \"local\",\n    value: function local() {\n      var process = require(\"process\");\n      var payer = Keypair.fromSecretKey(Buffer.from(JSON.parse(require(\"fs\").readFileSync(process.env.ANCHOR_WALLET, {\n        encoding: \"utf-8\"\n      }))));\n      return new NodeWallet(payer);\n    }\n  }]);\n  return NodeWallet;\n}();\n// Copy of Connection.simulateTransaction that takes a commitment parameter.\nfunction simulateTransaction(_x10, _x11, _x12) {\n  return _simulateTransaction.apply(this, arguments);\n}\n/**\n * Sets the default provider on the client.\n */\nfunction _simulateTransaction() {\n  _simulateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(connection, transaction, commitment) {\n    var signData, wireTransaction, encodedTransaction, config, args, res;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return connection._recentBlockhash(\n          // @ts-ignore\n          connection._disableBlockhashCaching);\n        case 2:\n          transaction.recentBlockhash = _context6.sent;\n          signData = transaction.serializeMessage(); // @ts-ignore\n          wireTransaction = transaction._serialize(signData);\n          encodedTransaction = wireTransaction.toString(\"base64\");\n          config = {\n            encoding: \"base64\",\n            commitment: commitment\n          };\n          args = [encodedTransaction, config]; // @ts-ignore\n          _context6.next = 10;\n          return connection._rpcRequest(\"simulateTransaction\", args);\n        case 10:\n          res = _context6.sent;\n          if (!res.error) {\n            _context6.next = 13;\n            break;\n          }\n          throw new Error(\"failed to simulate transaction: \" + res.error.message);\n        case 13:\n          return _context6.abrupt(\"return\", res.result);\n        case 14:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6);\n  }));\n  return _simulateTransaction.apply(this, arguments);\n}\nexport function setProvider(provider) {\n  _provider = provider;\n}\n/**\n * Returns the default provider being used by the client.\n */\nexport function getProvider() {\n  if (_provider === null) {\n    return Provider.local();\n  }\n  return _provider;\n}\n// Global provider used as the default when a provider is not given.\nvar _provider = null;","map":{"version":3,"names":["Connection","Keypair","sendAndConfirmRawTransaction","isBrowser","Provider","connection","wallet","opts","_classCallCheck","_createClass","key","value","_send","_asyncToGenerator","_regeneratorRuntime","mark","_callee","tx","signers","rawTx","txId","wrap","_callee$","_context","prev","next","undefined","feePayer","publicKey","getRecentBlockhash","preflightCommitment","recentBlockhash","sent","blockhash","signTransaction","filter","s","forEach","kp","partialSign","serialize","abrupt","stop","send","_x","_x2","_x3","apply","arguments","_sendAll","_callee2","reqs","_this","txs","signedTxs","sigs","k","_callee2$","_context2","map","r","signAllTransactions","length","t0","t1","push","call","sendAll","_x4","_x5","_simulate","_callee3","_a","_b","_c","_args3","_callee3$","_context3","simulateTransaction","commitment","simulate","_x6","_x7","defaultOptions","local","url","NodeWallet","env","Error","process","require","ANCHOR_PROVIDER_URL","options","default","payer","_signTransaction","_callee4","_callee4$","_context4","_x8","_signAllTransactions","_callee5","_this2","_callee5$","_context5","t","_x9","get","fromSecretKey","Buffer","from","JSON","parse","readFileSync","ANCHOR_WALLET","encoding","_x10","_x11","_x12","_simulateTransaction","_callee6","transaction","signData","wireTransaction","encodedTransaction","config","args","res","_callee6$","_context6","_recentBlockhash","_disableBlockhashCaching","serializeMessage","_serialize","toString","_rpcRequest","error","message","result","setProvider","provider","_provider","getProvider"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/provider.ts"],"sourcesContent":["import {\n  Connection,\n  Keypair,\n  Signer,\n  PublicKey,\n  Transaction,\n  TransactionSignature,\n  ConfirmOptions,\n  sendAndConfirmRawTransaction,\n  RpcResponseAndContext,\n  SimulatedTransactionResponse,\n  Commitment,\n} from \"@solana/web3.js\";\nimport { isBrowser } from \"./utils/common\";\n\n/**\n * The network and wallet context used to send transactions paid for and signed\n * by the provider.\n */\nexport default class Provider {\n  /**\n   * @param connection The cluster connection where the program is deployed.\n   * @param wallet     The wallet used to pay for and sign all transactions.\n   * @param opts       Transaction confirmation options to use by default.\n   */\n  constructor(\n    readonly connection: Connection,\n    readonly wallet: Wallet,\n    readonly opts: ConfirmOptions\n  ) {}\n\n  static defaultOptions(): ConfirmOptions {\n    return {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\",\n    };\n  }\n\n  /**\n   * Returns a `Provider` with a wallet read from the local filesystem.\n   *\n   * @param url  The network cluster url.\n   * @param opts The default transaction confirmation options.\n   *\n   * (This api is for Node only.)\n   */\n  static local(url?: string, opts?: ConfirmOptions): Provider {\n    opts = opts ?? Provider.defaultOptions();\n    const connection = new Connection(\n      url ?? \"http://localhost:8899\",\n      opts.preflightCommitment\n    );\n    const wallet = NodeWallet.local();\n    return new Provider(connection, wallet, opts);\n  }\n\n  /**\n   * Returns a `Provider` read from the `ANCHOR_PROVIDER_URL` environment\n   * variable\n   *\n   * (This api is for Node only.)\n   */\n  static env(): Provider {\n    if (isBrowser) {\n      throw new Error(`Provider env is not available on browser.`);\n    }\n\n    const process = require(\"process\");\n    const url = process.env.ANCHOR_PROVIDER_URL;\n    if (url === undefined) {\n      throw new Error(\"ANCHOR_PROVIDER_URL is not defined\");\n    }\n    const options = Provider.defaultOptions();\n    const connection = new Connection(url, options.commitment);\n    const wallet = NodeWallet.local();\n\n    return new Provider(connection, wallet, options);\n  }\n\n  /**\n   * Sends the given transaction, paid for and signed by the provider's wallet.\n   *\n   * @param tx      The transaction to send.\n   * @param signers The set of signers in addition to the provider wallet that\n   *                will sign the transaction.\n   * @param opts    Transaction confirmation options.\n   */\n  async send(\n    tx: Transaction,\n    signers?: Array<Signer | undefined>,\n    opts?: ConfirmOptions\n  ): Promise<TransactionSignature> {\n    if (signers === undefined) {\n      signers = [];\n    }\n    if (opts === undefined) {\n      opts = this.opts;\n    }\n\n    tx.feePayer = this.wallet.publicKey;\n    tx.recentBlockhash = (\n      await this.connection.getRecentBlockhash(opts.preflightCommitment)\n    ).blockhash;\n\n    await this.wallet.signTransaction(tx);\n    signers\n      .filter((s): s is Signer => s !== undefined)\n      .forEach((kp) => {\n        tx.partialSign(kp);\n      });\n\n    const rawTx = tx.serialize();\n\n    const txId = await sendAndConfirmRawTransaction(\n      this.connection,\n      rawTx,\n      opts\n    );\n\n    return txId;\n  }\n\n  /**\n   * Similar to `send`, but for an array of transactions and signers.\n   */\n  async sendAll(\n    reqs: Array<SendTxRequest>,\n    opts?: ConfirmOptions\n  ): Promise<Array<TransactionSignature>> {\n    if (opts === undefined) {\n      opts = this.opts;\n    }\n    const blockhash = await this.connection.getRecentBlockhash(\n      opts.preflightCommitment\n    );\n\n    let txs = reqs.map((r) => {\n      let tx = r.tx;\n      let signers = r.signers;\n\n      if (signers === undefined) {\n        signers = [];\n      }\n\n      tx.feePayer = this.wallet.publicKey;\n      tx.recentBlockhash = blockhash.blockhash;\n\n      signers\n        .filter((s): s is Signer => s !== undefined)\n        .forEach((kp) => {\n          tx.partialSign(kp);\n        });\n\n      return tx;\n    });\n\n    const signedTxs = await this.wallet.signAllTransactions(txs);\n\n    const sigs: TransactionSignature[] = [];\n\n    for (let k = 0; k < txs.length; k += 1) {\n      const tx = signedTxs[k];\n      const rawTx = tx.serialize();\n      sigs.push(\n        await sendAndConfirmRawTransaction(this.connection, rawTx, opts)\n      );\n    }\n\n    return sigs;\n  }\n\n  /**\n   * Simulates the given transaction, returning emitted logs from execution.\n   *\n   * @param tx      The transaction to send.\n   * @param signers The set of signers in addition to the provdier wallet that\n   *                will sign the transaction.\n   * @param opts    Transaction confirmation options.\n   */\n  async simulate(\n    tx: Transaction,\n    signers?: Array<Signer | undefined>,\n    opts: ConfirmOptions = this.opts\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if (signers === undefined) {\n      signers = [];\n    }\n\n    tx.feePayer = this.wallet.publicKey;\n    tx.recentBlockhash = (\n      await this.connection.getRecentBlockhash(\n        opts.preflightCommitment ?? this.opts.preflightCommitment\n      )\n    ).blockhash;\n\n    await this.wallet.signTransaction(tx);\n    signers\n      .filter((s): s is Signer => s !== undefined)\n      .forEach((kp) => {\n        tx.partialSign(kp);\n      });\n\n    return await simulateTransaction(\n      this.connection,\n      tx,\n      opts.commitment ?? this.opts.commitment ?? \"recent\"\n    );\n  }\n}\n\nexport type SendTxRequest = {\n  tx: Transaction;\n  signers: Array<Signer | undefined>;\n};\n\n/**\n * Wallet interface for objects that can be used to sign provider transactions.\n */\nexport interface Wallet {\n  signTransaction(tx: Transaction): Promise<Transaction>;\n  signAllTransactions(txs: Transaction[]): Promise<Transaction[]>;\n  publicKey: PublicKey;\n}\n\n/**\n * Node only wallet.\n */\nexport class NodeWallet implements Wallet {\n  constructor(readonly payer: Keypair) {}\n\n  static local(): NodeWallet {\n    const process = require(\"process\");\n    const payer = Keypair.fromSecretKey(\n      Buffer.from(\n        JSON.parse(\n          require(\"fs\").readFileSync(process.env.ANCHOR_WALLET, {\n            encoding: \"utf-8\",\n          })\n        )\n      )\n    );\n    return new NodeWallet(payer);\n  }\n\n  async signTransaction(tx: Transaction): Promise<Transaction> {\n    tx.partialSign(this.payer);\n    return tx;\n  }\n\n  async signAllTransactions(txs: Transaction[]): Promise<Transaction[]> {\n    return txs.map((t) => {\n      t.partialSign(this.payer);\n      return t;\n    });\n  }\n\n  get publicKey(): PublicKey {\n    return this.payer.publicKey;\n  }\n}\n\n// Copy of Connection.simulateTransaction that takes a commitment parameter.\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config: any = { encoding: \"base64\", commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\n  if (res.error) {\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\n  }\n  return res.result;\n}\n\n/**\n * Sets the default provider on the client.\n */\nexport function setProvider(provider: Provider) {\n  _provider = provider;\n}\n\n/**\n * Returns the default provider being used by the client.\n */\nexport function getProvider(): Provider {\n  if (_provider === null) {\n    return Provider.local();\n  }\n  return _provider;\n}\n\n// Global provider used as the default when a provider is not given.\nlet _provider: Provider | null = null;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}