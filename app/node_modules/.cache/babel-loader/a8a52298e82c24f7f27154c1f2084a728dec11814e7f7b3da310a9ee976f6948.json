{"ast":null,"code":"import _classCallCheck from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _objectSpread from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { twistedEdwards } from './abstract/edwards.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport { bytesToHex, bytesToNumberLE, ensureBytes, equalBytes, numberToBytesLE } from './abstract/utils.js';\nimport { createHasher, expand_message_xmd } from './abstract/hash-to-curve.js';\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\nvar ED25519_P = BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949');\n// ‚àö(-1) aka ‚àö(a) aka 2^((p-1)/4)\nvar ED25519_SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\n// prettier-ignore\nvar _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _5n = BigInt(5);\n// prettier-ignore\nvar _10n = BigInt(10),\n  _20n = BigInt(20),\n  _40n = BigInt(40),\n  _80n = BigInt(80);\nfunction ed25519_pow_2_252_3(x) {\n  var P = ED25519_P;\n  var x2 = x * x % P;\n  var b2 = x2 * x % P; // x^3, 11\n  var b4 = pow2(b2, _2n, P) * b2 % P; // x^15, 1111\n  var b5 = pow2(b4, _1n, P) * x % P; // x^31\n  var b10 = pow2(b5, _5n, P) * b5 % P;\n  var b20 = pow2(b10, _10n, P) * b10 % P;\n  var b40 = pow2(b20, _20n, P) * b20 % P;\n  var b80 = pow2(b40, _40n, P) * b40 % P;\n  var b160 = pow2(b80, _80n, P) * b80 % P;\n  var b240 = pow2(b160, _80n, P) * b80 % P;\n  var b250 = pow2(b240, _10n, P) * b10 % P;\n  var pow_p_5_8 = pow2(b250, _2n, P) * x % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return {\n    pow_p_5_8: pow_p_5_8,\n    b2: b2\n  };\n}\nfunction adjustScalarBytes(bytes) {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n// sqrt(u/v)\nfunction uvRatio(u, v) {\n  var P = ED25519_P;\n  var v3 = mod(v * v * v, P); // v¬≥\n  var v7 = mod(v3 * v3 * v, P); // v‚Å∑\n  // (p+3)/8 and (p-5)/8\n  var pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  var x = mod(u * v3 * pow, P); // (uv¬≥)(uv‚Å∑)^(p-5)/8\n  var vx2 = mod(v * x * x, P); // vx¬≤\n  var root1 = x; // First root candidate\n  var root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  var useRoot1 = vx2 === u; // If vx¬≤ = u (mod p), x is a square root\n  var useRoot2 = vx2 === mod(-u, P); // If vx¬≤ = -u, set x <-- x * 2^((p-1)/4)\n  var noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx¬≤ = -u‚àö(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return {\n    isValid: useRoot1 || useRoot2,\n    value: x\n  };\n}\n// Just in case\nexport var ED25519_TORSION_SUBGROUP = ['0100000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a', '0000000000000000000000000000000000000000000000000000000000000080', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05', 'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85', '0000000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa'];\nvar Fp = Field(ED25519_P, undefined, true);\nvar ed25519Defaults = {\n  // Param: a\n  a: BigInt(-1),\n  // d is equal to -121665/121666 over finite field.\n  // Negative number is P - number, and division is invert(number, P)\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  // Finite field ùîΩp over which we'll do calculations; 2n**255n - 19n\n  Fp: Fp,\n  // Subgroup order: how many points curve has\n  // 2n**252n + 27742317777372353535851937790883648493n;\n  n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n  // Cofactor\n  h: BigInt(8),\n  // Base point (x, y) aka generator point\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n  hash: sha512,\n  randomBytes: randomBytes,\n  adjustScalarBytes: adjustScalarBytes,\n  // dom2\n  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n  // Constant-time, u/‚àöv\n  uvRatio: uvRatio\n};\nexport var ed25519 = /* @__PURE__ */twistedEdwards(ed25519Defaults);\nfunction ed25519_domain(data, ctx, phflag) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(utf8ToBytes('SigEd25519 no Ed25519 collisions'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n}\nexport var ed25519ctx = /* @__PURE__ */twistedEdwards(_objectSpread(_objectSpread({}, ed25519Defaults), {}, {\n  domain: ed25519_domain\n}));\nexport var ed25519ph = /* @__PURE__ */twistedEdwards(_objectSpread(_objectSpread({}, ed25519Defaults), {}, {\n  domain: ed25519_domain,\n  prehash: sha512\n}));\nexport var x25519 = /* @__PURE__ */function () {\n  return montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255,\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: function powPminus2(x) {\n      var P = ED25519_P;\n      // x^(p-2) aka x^(2^255-21)\n      var _ed25519_pow_2_252_ = ed25519_pow_2_252_3(x),\n        pow_p_5_8 = _ed25519_pow_2_252_.pow_p_5_8,\n        b2 = _ed25519_pow_2_252_.b2;\n      return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);\n    },\n    adjustScalarBytes: adjustScalarBytes,\n    randomBytes: randomBytes\n  });\n}();\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub) {\n  var _ed25519$ExtendedPoin = ed25519.ExtendedPoint.fromHex(edwardsPub),\n    y = _ed25519$ExtendedPoin.y;\n  var _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport var edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv) {\n  var hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\nvar ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nvar ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nvar ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nvar ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nvar ELL2_J = BigInt(486662);\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u) {\n  var tv1 = Fp.sqr(u); //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1\n  var xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  var x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  var tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2\n  var gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3\n  var gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  var tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  var y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  var y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11); //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd\n  var e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n  var y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  var x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  var y21 = Fp.mul(y11, u); //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2\n  var y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  var gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21); //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd\n  var e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n  var y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1); //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd\n  var e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n  var xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  var y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  var e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return {\n    xMn: xn,\n    xMd: xd,\n    yMn: y,\n    yMd: _1n\n  }; //  39. return (xn, xd, y, 1)\n}\n\nvar ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u) {\n  var _map_to_curve_elligat = map_to_curve_elligator2_curve25519(u),\n    xMn = _map_to_curve_elligat.xMn,\n    xMd = _map_to_curve_elligat.xMd,\n    yMn = _map_to_curve_elligat.yMn,\n    yMd = _map_to_curve_elligat.yMd; //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  var xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  var xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  var yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  var yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  var tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  var e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n  var inv = Fp.invertBatch([xd, yd]); // batch division\n  return {\n    x: Fp.mul(xn, inv[0]),\n    y: Fp.mul(yn, inv[1])\n  }; //  13. return (xn, xd, yn, yd)\n}\n\nvar htf = /* @__PURE__ */function () {\n  return createHasher(ed25519.ExtendedPoint, function (scalars) {\n    return map_to_curve_elligator2_edwards25519(scalars[0]);\n  }, {\n    DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n    encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha512\n  });\n}();\nexport var hashToCurve = /* @__PURE__ */function () {\n  return htf.hashToCurve;\n}();\nexport var encodeToCurve = /* @__PURE__ */function () {\n  return htf.encodeToCurve;\n}();\nfunction assertRstPoint(other) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n// ‚àö(-1) aka ‚àö(a) aka 2^((p-1)/4)\nvar SQRT_M1 = ED25519_SQRT_M1;\n// ‚àö(ad - 1)\nvar SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\n// 1 / ‚àö(a-d)\nvar INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\n// 1-d¬≤\nvar ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\n// (d-1)¬≤\nvar D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n// Calculates 1/‚àö(number)\nvar invertSqrt = function invertSqrt(number) {\n  return uvRatio(_1n, number);\n};\nvar MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nvar bytes255ToNumberLE = function bytes255ToNumberLE(bytes) {\n  return ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n};\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0) {\n  var d = ed25519.CURVE.d;\n  var P = ed25519.CURVE.Fp.ORDER;\n  var mod = ed25519.CURVE.Fp.create;\n  var r = mod(SQRT_M1 * r0 * r0); // 1\n  var Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  var c = BigInt(-1); // 3\n  var D = mod((c - d * r) * mod(r + d)); // 4\n  var _uvRatio = uvRatio(Ns, D),\n    Ns_D_is_sq = _uvRatio.isValid,\n    s = _uvRatio.value; // 5\n  var s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  var Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  var s2 = s * s;\n  var W0 = mod((s + s) * D); // 10\n  var W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  var W2 = mod(_1n - s2); // 12\n  var W3 = mod(_1n + s2); // 13\n  return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nvar RistPoint = /*#__PURE__*/function () {\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  function RistPoint(ep) {\n    _classCallCheck(this, RistPoint);\n    this.ep = ep;\n  }\n  _createClass(RistPoint, [{\n    key: \"toRawBytes\",\n    value:\n    /**\n     * Encodes ristretto point to Uint8Array.\n     * https://ristretto.group/formulas/encoding.html\n     */\n    function toRawBytes() {\n      var _this$ep = this.ep,\n        x = _this$ep.ex,\n        y = _this$ep.ey,\n        z = _this$ep.ez,\n        t = _this$ep.et;\n      var P = ed25519.CURVE.Fp.ORDER;\n      var mod = ed25519.CURVE.Fp.create;\n      var u1 = mod(mod(z + y) * mod(z - y)); // 1\n      var u2 = mod(x * y); // 2\n      // Square root always exists\n      var u2sq = mod(u2 * u2);\n      var _invertSqrt = invertSqrt(mod(u1 * u2sq)),\n        invsqrt = _invertSqrt.value; // 3\n      var D1 = mod(invsqrt * u1); // 4\n      var D2 = mod(invsqrt * u2); // 5\n      var zInv = mod(D1 * D2 * t); // 6\n      var D; // 7\n      if (isNegativeLE(t * zInv, P)) {\n        var _x = mod(y * SQRT_M1);\n        var _y = mod(x * SQRT_M1);\n        x = _x;\n        y = _y;\n        D = mod(D1 * INVSQRT_A_MINUS_D);\n      } else {\n        D = D2; // 8\n      }\n\n      if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n      var s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n      if (isNegativeLE(s, P)) s = mod(-s);\n      return numberToBytesLE(s, 32); // 11\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return bytesToHex(this.toRawBytes());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toHex();\n    }\n    // Compare one point to another.\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      assertRstPoint(other);\n      var _this$ep2 = this.ep,\n        X1 = _this$ep2.ex,\n        Y1 = _this$ep2.ey;\n      var _other$ep = other.ep,\n        X2 = _other$ep.ex,\n        Y2 = _other$ep.ey;\n      var mod = ed25519.CURVE.Fp.create;\n      // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n      var one = mod(X1 * Y2) === mod(Y1 * X2);\n      var two = mod(Y1 * Y2) === mod(X1 * X2);\n      return one || two;\n    }\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      assertRstPoint(other);\n      return new RistPoint(this.ep.add(other.ep));\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(other) {\n      assertRstPoint(other);\n      return new RistPoint(this.ep.subtract(other.ep));\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(scalar) {\n      return new RistPoint(this.ep.multiply(scalar));\n    }\n  }, {\n    key: \"multiplyUnsafe\",\n    value: function multiplyUnsafe(scalar) {\n      return new RistPoint(this.ep.multiplyUnsafe(scalar));\n    }\n  }], [{\n    key: \"fromAffine\",\n    value: function fromAffine(ap) {\n      return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n    }\n    /**\n     * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n     * The hash-to-group operation applies Elligator twice and adds the results.\n     * **Note:** this is one-way map, there is no conversion from point to hash.\n     * https://ristretto.group/formulas/elligator.html\n     * @param hex 64-byte output of a hash function\n     */\n  }, {\n    key: \"hashToCurve\",\n    value: function hashToCurve(hex) {\n      hex = ensureBytes('ristrettoHash', hex, 64);\n      var r1 = bytes255ToNumberLE(hex.slice(0, 32));\n      var R1 = calcElligatorRistrettoMap(r1);\n      var r2 = bytes255ToNumberLE(hex.slice(32, 64));\n      var R2 = calcElligatorRistrettoMap(r2);\n      return new RistPoint(R1.add(R2));\n    }\n    /**\n     * Converts ristretto-encoded string to ristretto point.\n     * https://ristretto.group/formulas/decoding.html\n     * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n     */\n  }, {\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      hex = ensureBytes('ristrettoHex', hex, 32);\n      var _ed25519$CURVE = ed25519.CURVE,\n        a = _ed25519$CURVE.a,\n        d = _ed25519$CURVE.d;\n      var P = ed25519.CURVE.Fp.ORDER;\n      var mod = ed25519.CURVE.Fp.create;\n      var emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n      var s = bytes255ToNumberLE(hex);\n      // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n      // 3. Check that s is non-negative, or else abort\n      if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n      var s2 = mod(s * s);\n      var u1 = mod(_1n + a * s2); // 4 (a is -1)\n      var u2 = mod(_1n - a * s2); // 5\n      var u1_2 = mod(u1 * u1);\n      var u2_2 = mod(u2 * u2);\n      var v = mod(a * d * u1_2 - u2_2); // 6\n      var _invertSqrt2 = invertSqrt(mod(v * u2_2)),\n        isValid = _invertSqrt2.isValid,\n        I = _invertSqrt2.value; // 7\n      var Dx = mod(I * u2); // 8\n      var Dy = mod(I * Dx * v); // 9\n      var x = mod((s + s) * Dx); // 10\n      if (isNegativeLE(x, P)) x = mod(-x); // 10\n      var y = mod(u1 * Dy); // 11\n      var t = mod(x * y); // 12\n      if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n      return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n    }\n  }]);\n  return RistPoint;\n}();\nexport var RistrettoPoint = /* @__PURE__ */function () {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n  return RistPoint;\n}();\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport var hashToRistretto255 = function hashToRistretto255(msg, options) {\n  var d = options.DST;\n  var DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  var uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n  var P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\nexport var hash_to_ristretto255 = hashToRistretto255; // legacy","map":{"version":3,"names":["sha512","concatBytes","randomBytes","utf8ToBytes","twistedEdwards","montgomery","Field","FpSqrtEven","isNegativeLE","mod","pow2","bytesToHex","bytesToNumberLE","ensureBytes","equalBytes","numberToBytesLE","createHasher","expand_message_xmd","ED25519_P","BigInt","ED25519_SQRT_M1","_0n","_1n","_2n","_5n","_10n","_20n","_40n","_80n","ed25519_pow_2_252_3","x","P","x2","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","adjustScalarBytes","bytes","uvRatio","u","v","v3","v7","pow","vx2","root1","root2","useRoot1","useRoot2","noRoot","isValid","value","ED25519_TORSION_SUBGROUP","Fp","undefined","ed25519Defaults","a","d","n","h","Gx","Gy","hash","ed25519","ed25519_domain","data","ctx","phflag","length","Error","Uint8Array","ed25519ctx","_objectSpread","domain","ed25519ph","prehash","x25519","montgomeryBits","nByteLength","Gu","powPminus2","_ed25519_pow_2_252_","edwardsToMontgomeryPub","edwardsPub","_ed25519$ExtendedPoin","ExtendedPoint","fromHex","y","toBytes","create","inv","edwardsToMontgomery","edwardsToMontgomeryPriv","edwardsPriv","hashed","subarray","ELL2_C1","ORDER","ELL2_C2","ELL2_C3","sqrt","neg","ONE","ELL2_C4","ELL2_J","map_to_curve_elligator2_curve25519","tv1","sqr","mul","xd","add","x1n","tv2","gxd","gx1","tv3","y11","y12","e1","eql","y1","cmov","x2n","y21","y22","gx2","e2","y2","e3","xn","e4","isOdd","xMn","xMd","yMn","yMd","ELL2_C1_EDWARDS","map_to_curve_elligator2_edwards25519","_map_to_curve_elligat","yn","sub","yd","e","ZERO","invertBatch","htf","scalars","DST","encodeDST","p","m","k","expand","hashToCurve","encodeToCurve","assertRstPoint","other","RistPoint","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","invertSqrt","number","MAX_255B","bytes255ToNumberLE","CURVE","calcElligatorRistrettoMap","r0","r","Ns","c","D","_uvRatio","Ns_D_is_sq","s","s_","Nt","s2","W0","W1","W2","W3","ep","_classCallCheck","_createClass","key","toRawBytes","_this$ep","ex","ey","z","ez","t","et","u1","u2","u2sq","_invertSqrt","invsqrt","D1","D2","zInv","_x","_y","toHex","toString","equals","_this$ep2","X1","Y1","_other$ep","X2","Y2","one","two","subtract","multiply","scalar","multiplyUnsafe","fromAffine","ap","hex","r1","slice","R1","r2","R2","_ed25519$CURVE","emsg","u1_2","u2_2","_invertSqrt2","I","Dx","Dy","RistrettoPoint","BASE","hashToRistretto255","msg","options","uniform_bytes","hash_to_ristretto255"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@noble/curves/src/ed25519.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { ExtPointType, twistedEdwards } from './abstract/edwards.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport {\n  bytesToHex,\n  bytesToNumberLE,\n  ensureBytes,\n  equalBytes,\n  Hex,\n  numberToBytesLE,\n} from './abstract/utils.js';\nimport { createHasher, htfBasicOpts, expand_message_xmd } from './abstract/hash-to-curve.js';\nimport { AffinePoint } from './abstract/curve.js';\n\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\n\nconst ED25519_P = BigInt(\n  '57896044618658097711785492504343953926634992332820282019728792003956564819949'\n);\n// ‚àö(-1) aka ‚àö(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n\nfunction ed25519_pow_2_252_3(x: bigint) {\n  const P = ED25519_P;\n  const x2 = (x * x) % P;\n  const b2 = (x2 * x) % P; // x^3, 11\n  const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n  const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n  const b10 = (pow2(b5, _5n, P) * b5) % P;\n  const b20 = (pow2(b10, _10n, P) * b10) % P;\n  const b40 = (pow2(b20, _20n, P) * b20) % P;\n  const b80 = (pow2(b40, _40n, P) * b40) % P;\n  const b160 = (pow2(b80, _80n, P) * b80) % P;\n  const b240 = (pow2(b160, _80n, P) * b80) % P;\n  const b250 = (pow2(b240, _10n, P) * b10) % P;\n  const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return { pow_p_5_8, b2 };\n}\n\nfunction adjustScalarBytes(bytes: Uint8Array): Uint8Array {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n\n// sqrt(u/v)\nfunction uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {\n  const P = ED25519_P;\n  const v3 = mod(v * v * v, P); // v¬≥\n  const v7 = mod(v3 * v3 * v, P); // v‚Å∑\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv¬≥)(uv‚Å∑)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx¬≤\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx¬≤ = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx¬≤ = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx¬≤ = -u‚àö(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return { isValid: useRoot1 || useRoot2, value: x };\n}\n\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n  '0100000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n  '0000000000000000000000000000000000000000000000000000000000000080',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n  'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\n\nconst Fp = Field(ED25519_P, undefined, true);\n\nconst ed25519Defaults = {\n  // Param: a\n  a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n  // d is equal to -121665/121666 over finite field.\n  // Negative number is P - number, and division is invert(number, P)\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  // Finite field ùîΩp over which we'll do calculations; 2n**255n - 19n\n  Fp,\n  // Subgroup order: how many points curve has\n  // 2n**252n + 27742317777372353535851937790883648493n;\n  n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n  // Cofactor\n  h: BigInt(8),\n  // Base point (x, y) aka generator point\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n  hash: sha512,\n  randomBytes,\n  adjustScalarBytes,\n  // dom2\n  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n  // Constant-time, u/‚àöv\n  uvRatio,\n} as const;\n\nexport const ed25519 = /* @__PURE__ */ twistedEdwards(ed25519Defaults);\n\nfunction ed25519_domain(data: Uint8Array, ctx: Uint8Array, phflag: boolean) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(\n    utf8ToBytes('SigEd25519 no Ed25519 collisions'),\n    new Uint8Array([phflag ? 1 : 0, ctx.length]),\n    ctx,\n    data\n  );\n}\n\nexport const ed25519ctx = /* @__PURE__ */ twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n});\nexport const ed25519ph = /* @__PURE__ */ twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n  prehash: sha512,\n});\n\nexport const x25519 = /* @__PURE__ */ (() =>\n  montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x: bigint): bigint => {\n      const P = ED25519_P;\n      // x^(p-2) aka x^(2^255-21)\n      const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n      return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n  }))();\n\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub: Hex): Uint8Array {\n  const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv: Uint8Array): Uint8Array {\n  const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\n\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\n\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u: bigint) {\n  let tv1 = Fp.sqr(u);       //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n);       //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J);  //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd);      //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd);    //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n);       //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2);       //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n);       //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd);     //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3);         //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd);       //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1);       //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3);       //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3);       //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11);         //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd);       //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1);   //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u);     //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2);   //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1);   //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21);         //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd);       //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1);          //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd);       //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3);  //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y);         //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u: bigint) {\n  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n\n  const inv = Fp.invertBatch([xd, yd]); // batch division\n  return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\n\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    ed25519.ExtendedPoint,\n    (scalars: bigint[]) => map_to_curve_elligator2_edwards25519(scalars[0]),\n    {\n      DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n      encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha512,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n\nfunction assertRstPoint(other: unknown) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n\n// ‚àö(-1) aka ‚àö(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// ‚àö(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt(\n  '25063068953384623474111414158702152701244531502492656460079210482610430750235'\n);\n// 1 / ‚àö(a-d)\nconst INVSQRT_A_MINUS_D = BigInt(\n  '54469307008909316920995813868745141605393597292927456921205312896311721017578'\n);\n// 1-d¬≤\nconst ONE_MINUS_D_SQ = BigInt(\n  '1159843021668779879193775521855586647937357759715417654439879720876111806838'\n);\n// (d-1)¬≤\nconst D_MINUS_ONE_SQ = BigInt(\n  '40440834346308536858101042469323190826248399146238708352240133220865137265952'\n);\n// Calculates 1/‚àö(number)\nconst invertSqrt = (number: bigint) => uvRatio(_1n, number);\n\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes: Uint8Array) =>\n  ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n\ntype ExtendedPoint = ExtPointType;\n\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0: bigint): ExtendedPoint {\n  const { d } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n  static BASE: RistPoint;\n  static ZERO: RistPoint;\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(private readonly ep: ExtendedPoint) {}\n\n  static fromAffine(ap: AffinePoint<bigint>) {\n    return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n  }\n\n  /**\n   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * https://ristretto.group/formulas/elligator.html\n   * @param hex 64-byte output of a hash function\n   */\n  static hashToCurve(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistPoint(R1.add(R2));\n  }\n\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * https://ristretto.group/formulas/decoding.html\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const { a, d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n  }\n\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * https://ristretto.group/formulas/encoding.html\n   */\n  toRawBytes(): Uint8Array {\n    let { ex: x, ey: y, ez: z, et: t } = this.ep;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D: bigint; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  // Compare one point to another.\n  equals(other: RistPoint): boolean {\n    assertRstPoint(other);\n    const { ex: X1, ey: Y1 } = this.ep;\n    const { ex: X2, ey: Y2 } = other.ep;\n    const mod = ed25519.CURVE.Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n\n  add(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiplyUnsafe(scalar));\n  }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n  return RistPoint;\n})();\n\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg: Uint8Array, options: htfBasicOpts) => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}