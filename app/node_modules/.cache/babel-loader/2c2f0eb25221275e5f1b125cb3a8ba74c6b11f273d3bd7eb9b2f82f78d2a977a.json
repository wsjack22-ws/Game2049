{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.translateAddress = exports.validateAccounts = exports.toInstruction = exports.parseIdlErrors = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nfunction parseIdlErrors(idl) {\n  const errors = new Map();\n  if (idl.errors) {\n    idl.errors.forEach(e => {\n      var _a;\n      let msg = (_a = e.msg) !== null && _a !== void 0 ? _a : e.name;\n      errors.set(e.code, msg);\n    });\n  }\n  return errors;\n}\nexports.parseIdlErrors = parseIdlErrors;\n// Allow either IdLInstruction or IdlStateMethod since the types share fields.\nfunction toInstruction(idlIx, ...args) {\n  if (idlIx.args.length != args.length) {\n    throw new Error(\"Invalid argument length\");\n  }\n  const ix = {};\n  let idx = 0;\n  idlIx.args.forEach(ixArg => {\n    ix[ixArg.name] = args[idx];\n    idx += 1;\n  });\n  return ix;\n}\nexports.toInstruction = toInstruction;\n// Throws error if any account required for the `ix` is not given.\nfunction validateAccounts(ixAccounts, accounts = {}) {\n  ixAccounts.forEach(acc => {\n    if (\"accounts\" in acc) {\n      validateAccounts(acc.accounts, accounts[acc.name]);\n    } else {\n      if (accounts[acc.name] === undefined) {\n        throw new Error(`Invalid arguments: ${acc.name} not provided.`);\n      }\n    }\n  });\n}\nexports.validateAccounts = validateAccounts;\n// Translates an address to a Pubkey.\nfunction translateAddress(address) {\n  if (typeof address === \"string\") {\n    const pk = new web3_js_1.PublicKey(address);\n    return pk;\n  } else {\n    return address;\n  }\n}\nexports.translateAddress = translateAddress;","map":{"version":3,"names":["web3_js_1","require","parseIdlErrors","idl","errors","Map","forEach","e","msg","_a","name","set","code","exports","toInstruction","idlIx","args","length","Error","ix","idx","ixArg","validateAccounts","ixAccounts","accounts","acc","undefined","translateAddress","address","pk","PublicKey"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/program/common.ts"],"sourcesContent":["import EventEmitter from \"eventemitter3\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Idl, IdlInstruction, IdlAccountItem, IdlStateMethod } from \"../idl\";\nimport { Accounts } from \"./context\";\n\nexport type Subscription = {\n  listener: number;\n  ee: EventEmitter;\n};\n\nexport function parseIdlErrors(idl: Idl): Map<number, string> {\n  const errors = new Map();\n  if (idl.errors) {\n    idl.errors.forEach((e) => {\n      let msg = e.msg ?? e.name;\n      errors.set(e.code, msg);\n    });\n  }\n  return errors;\n}\n\n// Allow either IdLInstruction or IdlStateMethod since the types share fields.\nexport function toInstruction(\n  idlIx: IdlInstruction | IdlStateMethod,\n  ...args: any[]\n) {\n  if (idlIx.args.length != args.length) {\n    throw new Error(\"Invalid argument length\");\n  }\n  const ix: { [key: string]: any } = {};\n  let idx = 0;\n  idlIx.args.forEach((ixArg) => {\n    ix[ixArg.name] = args[idx];\n    idx += 1;\n  });\n\n  return ix;\n}\n\n// Throws error if any account required for the `ix` is not given.\nexport function validateAccounts(\n  ixAccounts: IdlAccountItem[],\n  accounts: Accounts = {}\n) {\n  ixAccounts.forEach((acc) => {\n    if (\"accounts\" in acc) {\n      validateAccounts(acc.accounts, accounts[acc.name] as Accounts);\n    } else {\n      if (accounts[acc.name] === undefined) {\n        throw new Error(`Invalid arguments: ${acc.name} not provided.`);\n      }\n    }\n  });\n}\n\n// Translates an address to a Pubkey.\nexport function translateAddress(address: Address): PublicKey {\n  if (typeof address === \"string\") {\n    const pk = new PublicKey(address);\n    return pk;\n  } else {\n    return address;\n  }\n}\n\n/**\n * An address to identify an account on chain. Can be a [[PublicKey]],\n * or Base 58 encoded string.\n */\nexport type Address = PublicKey | string;\n"],"mappings":";;;;;;AACA,MAAAA,SAAA,GAAAC,OAAA;AASA,SAAgBC,cAAcA,CAACC,GAAQ;EACrC,MAAMC,MAAM,GAAG,IAAIC,GAAG,EAAE;EACxB,IAAIF,GAAG,CAACC,MAAM,EAAE;IACdD,GAAG,CAACC,MAAM,CAACE,OAAO,CAAEC,CAAC,IAAI;;MACvB,IAAIC,GAAG,GAAG,CAAAC,EAAA,GAAAF,CAAC,CAACC,GAAG,cAAAC,EAAA,cAAAA,EAAA,GAAIF,CAAC,CAACG,IAAI;MACzBN,MAAM,CAACO,GAAG,CAACJ,CAAC,CAACK,IAAI,EAAEJ,GAAG,CAAC;IACzB,CAAC,CAAC;;EAEJ,OAAOJ,MAAM;AACf;AATAS,OAAA,CAAAX,cAAA,GAAAA,cAAA;AAWA;AACA,SAAgBY,aAAaA,CAC3BC,KAAsC,EACtC,GAAGC,IAAW;EAEd,IAAID,KAAK,CAACC,IAAI,CAACC,MAAM,IAAID,IAAI,CAACC,MAAM,EAAE;IACpC,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;;EAE5C,MAAMC,EAAE,GAA2B,EAAE;EACrC,IAAIC,GAAG,GAAG,CAAC;EACXL,KAAK,CAACC,IAAI,CAACV,OAAO,CAAEe,KAAK,IAAI;IAC3BF,EAAE,CAACE,KAAK,CAACX,IAAI,CAAC,GAAGM,IAAI,CAACI,GAAG,CAAC;IAC1BA,GAAG,IAAI,CAAC;EACV,CAAC,CAAC;EAEF,OAAOD,EAAE;AACX;AAfAN,OAAA,CAAAC,aAAA,GAAAA,aAAA;AAiBA;AACA,SAAgBQ,gBAAgBA,CAC9BC,UAA4B,EAC5BC,QAAA,GAAqB,EAAE;EAEvBD,UAAU,CAACjB,OAAO,CAAEmB,GAAG,IAAI;IACzB,IAAI,UAAU,IAAIA,GAAG,EAAE;MACrBH,gBAAgB,CAACG,GAAG,CAACD,QAAQ,EAAEA,QAAQ,CAACC,GAAG,CAACf,IAAI,CAAa,CAAC;KAC/D,MAAM;MACL,IAAIc,QAAQ,CAACC,GAAG,CAACf,IAAI,CAAC,KAAKgB,SAAS,EAAE;QACpC,MAAM,IAAIR,KAAK,CAAC,sBAAsBO,GAAG,CAACf,IAAI,gBAAgB,CAAC;;;EAGrE,CAAC,CAAC;AACJ;AAbAG,OAAA,CAAAS,gBAAA,GAAAA,gBAAA;AAeA;AACA,SAAgBK,gBAAgBA,CAACC,OAAgB;EAC/C,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC/B,MAAMC,EAAE,GAAG,IAAI7B,SAAA,CAAA8B,SAAS,CAACF,OAAO,CAAC;IACjC,OAAOC,EAAE;GACV,MAAM;IACL,OAAOD,OAAO;;AAElB;AAPAf,OAAA,CAAAc,gBAAA,GAAAA,gBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}