{"ast":null,"code":"import { TransactionInstruction } from \"@solana/web3.js\";\nimport { IdlError } from \"../../error\";\nimport { toInstruction, validateAccounts, translateAddress } from \"../common\";\nimport { splitArgsAndCtx } from \"../context\";\nexport default class InstructionNamespaceFactory {\n  static build(idlIx, encodeFn, programId) {\n    if (idlIx.name === \"_inner\") {\n      throw new IdlError(\"the _inner name is reserved\");\n    }\n    const ix = (...args) => {\n      const [ixArgs, ctx] = splitArgsAndCtx(idlIx, [...args]);\n      validateAccounts(idlIx.accounts, ctx.accounts);\n      validateInstruction(idlIx, ...args);\n      const keys = ix.accounts(ctx.accounts);\n      if (ctx.remainingAccounts !== undefined) {\n        keys.push(...ctx.remainingAccounts);\n      }\n      if (ctx.__private && ctx.__private.logAccounts) {\n        console.log(\"Outgoing account metas:\", keys);\n      }\n      return new TransactionInstruction({\n        keys,\n        programId,\n        data: encodeFn(idlIx.name, toInstruction(idlIx, ...ixArgs))\n      });\n    };\n    // Utility fn for ordering the accounts for this instruction.\n    ix[\"accounts\"] = accs => {\n      return InstructionNamespaceFactory.accountsArray(accs, idlIx.accounts);\n    };\n    return ix;\n  }\n  static accountsArray(ctx, accounts) {\n    if (!ctx) {\n      return [];\n    }\n    return accounts.map(acc => {\n      // Nested accounts.\n      const nestedAccounts = \"accounts\" in acc ? acc.accounts : undefined;\n      if (nestedAccounts !== undefined) {\n        const rpcAccs = ctx[acc.name];\n        return InstructionNamespaceFactory.accountsArray(rpcAccs, acc.accounts).flat();\n      } else {\n        const account = acc;\n        return {\n          pubkey: translateAddress(ctx[acc.name]),\n          isWritable: account.isMut,\n          isSigner: account.isSigner\n        };\n      }\n    }).flat();\n  }\n}\n// Throws error if any argument required for the `ix` is not given.\nfunction validateInstruction(ix, ...args) {\n  // todo\n}","map":{"version":3,"names":["TransactionInstruction","IdlError","toInstruction","validateAccounts","translateAddress","splitArgsAndCtx","InstructionNamespaceFactory","build","idlIx","encodeFn","programId","name","ix","args","ixArgs","ctx","accounts","validateInstruction","keys","remainingAccounts","undefined","push","__private","logAccounts","console","log","data","accs","accountsArray","map","acc","nestedAccounts","rpcAccs","flat","account","pubkey","isWritable","isMut","isSigner"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/program/namespace/instruction.ts"],"sourcesContent":["import {\n  AccountMeta,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n  Idl,\n  IdlAccount,\n  IdlAccountItem,\n  IdlAccounts,\n  IdlInstruction,\n} from \"../../idl\";\nimport { IdlError } from \"../../error\";\nimport {\n  toInstruction,\n  validateAccounts,\n  translateAddress,\n  Address,\n} from \"../common\";\nimport { Accounts, splitArgsAndCtx } from \"../context\";\nimport {\n  AllInstructions,\n  AllInstructionsMap,\n  InstructionContextFn,\n  InstructionContextFnArgs,\n  MakeInstructionsNamespace,\n} from \"./types\";\n\nexport default class InstructionNamespaceFactory {\n  public static build<IDL extends Idl, I extends AllInstructions<IDL>>(\n    idlIx: I,\n    encodeFn: InstructionEncodeFn<I>,\n    programId: PublicKey\n  ): InstructionFn<IDL, I> {\n    if (idlIx.name === \"_inner\") {\n      throw new IdlError(\"the _inner name is reserved\");\n    }\n\n    const ix = (\n      ...args: InstructionContextFnArgs<IDL, I>\n    ): TransactionInstruction => {\n      const [ixArgs, ctx] = splitArgsAndCtx(idlIx, [...args]);\n      validateAccounts(idlIx.accounts, ctx.accounts);\n      validateInstruction(idlIx, ...args);\n\n      const keys = ix.accounts(ctx.accounts);\n\n      if (ctx.remainingAccounts !== undefined) {\n        keys.push(...ctx.remainingAccounts);\n      }\n\n      if (ctx.__private && ctx.__private.logAccounts) {\n        console.log(\"Outgoing account metas:\", keys);\n      }\n      return new TransactionInstruction({\n        keys,\n        programId,\n        data: encodeFn(idlIx.name, toInstruction(idlIx, ...ixArgs)),\n      });\n    };\n\n    // Utility fn for ordering the accounts for this instruction.\n    ix[\"accounts\"] = (accs: Accounts<I[\"accounts\"][number]> | undefined) => {\n      return InstructionNamespaceFactory.accountsArray(accs, idlIx.accounts);\n    };\n\n    return ix;\n  }\n\n  public static accountsArray(\n    ctx: Accounts | undefined,\n    accounts: readonly IdlAccountItem[]\n  ): AccountMeta[] {\n    if (!ctx) {\n      return [];\n    }\n\n    return accounts\n      .map((acc: IdlAccountItem) => {\n        // Nested accounts.\n        const nestedAccounts: IdlAccountItem[] | undefined =\n          \"accounts\" in acc ? acc.accounts : undefined;\n        if (nestedAccounts !== undefined) {\n          const rpcAccs = ctx[acc.name] as Accounts;\n          return InstructionNamespaceFactory.accountsArray(\n            rpcAccs,\n            (acc as IdlAccounts).accounts\n          ).flat();\n        } else {\n          const account: IdlAccount = acc as IdlAccount;\n          return {\n            pubkey: translateAddress(ctx[acc.name] as Address),\n            isWritable: account.isMut,\n            isSigner: account.isSigner,\n          };\n        }\n      })\n      .flat();\n  }\n}\n\n/**\n * The namespace provides functions to build [[TransactionInstruction]]\n * objects for each method of a program.\n *\n * ## Usage\n *\n * ```javascript\n * instruction.<method>(...args, ctx);\n * ```\n *\n * ## Parameters\n *\n * 1. `args` - The positional arguments for the program. The type and number\n *    of these arguments depend on the program being used.\n * 2. `ctx`  - [[Context]] non-argument parameters to pass to the method.\n *    Always the last parameter in the method call.\n *\n * ## Example\n *\n * To create an instruction for the `increment` method above,\n *\n * ```javascript\n * const tx = await program.instruction.increment({\n *   accounts: {\n *     counter,\n *   },\n * });\n * ```\n */\nexport type InstructionNamespace<\n  IDL extends Idl = Idl,\n  I extends IdlInstruction = IDL[\"instructions\"][number]\n> = MakeInstructionsNamespace<\n  IDL,\n  I,\n  TransactionInstruction,\n  {\n    [M in keyof AllInstructionsMap<IDL>]: {\n      accounts: (\n        ctx: Accounts<AllInstructionsMap<IDL>[M][\"accounts\"][number]>\n      ) => unknown;\n    };\n  }\n>;\n\n/**\n * Function to create a `TransactionInstruction` generated from an IDL.\n * Additionally it provides an `accounts` utility method, returning a list\n * of ordered accounts for the instruction.\n */\nexport type InstructionFn<\n  IDL extends Idl = Idl,\n  I extends AllInstructions<IDL> = AllInstructions<IDL>\n> = InstructionContextFn<IDL, I, TransactionInstruction> &\n  IxProps<Accounts<I[\"accounts\"][number]>>;\n\ntype IxProps<A extends Accounts> = {\n  /**\n   * Returns an ordered list of accounts associated with the instruction.\n   */\n  accounts: (ctx: A) => AccountMeta[];\n};\n\nexport type InstructionEncodeFn<I extends IdlInstruction = IdlInstruction> = (\n  ixName: I[\"name\"],\n  ix: any\n) => Buffer;\n\n// Throws error if any argument required for the `ix` is not given.\nfunction validateInstruction(ix: IdlInstruction, ...args: any[]) {\n  // todo\n}\n"],"mappings":"AAAA,SAGEA,sBAAsB,QACjB,iBAAiB;AAQxB,SAASC,QAAQ,QAAQ,aAAa;AACtC,SACEC,aAAa,EACbC,gBAAgB,EAChBC,gBAAgB,QAEX,WAAW;AAClB,SAAmBC,eAAe,QAAQ,YAAY;AAStD,eAAc,MAAOC,2BAA2B;EACvC,OAAOC,KAAKA,CACjBC,KAAQ,EACRC,QAAgC,EAChCC,SAAoB;IAEpB,IAAIF,KAAK,CAACG,IAAI,KAAK,QAAQ,EAAE;MAC3B,MAAM,IAAIV,QAAQ,CAAC,6BAA6B,CAAC;;IAGnD,MAAMW,EAAE,GAAGA,CACT,GAAGC,IAAsC,KACf;MAC1B,MAAM,CAACC,MAAM,EAAEC,GAAG,CAAC,GAAGV,eAAe,CAACG,KAAK,EAAE,CAAC,GAAGK,IAAI,CAAC,CAAC;MACvDV,gBAAgB,CAACK,KAAK,CAACQ,QAAQ,EAAED,GAAG,CAACC,QAAQ,CAAC;MAC9CC,mBAAmB,CAACT,KAAK,EAAE,GAAGK,IAAI,CAAC;MAEnC,MAAMK,IAAI,GAAGN,EAAE,CAACI,QAAQ,CAACD,GAAG,CAACC,QAAQ,CAAC;MAEtC,IAAID,GAAG,CAACI,iBAAiB,KAAKC,SAAS,EAAE;QACvCF,IAAI,CAACG,IAAI,CAAC,GAAGN,GAAG,CAACI,iBAAiB,CAAC;;MAGrC,IAAIJ,GAAG,CAACO,SAAS,IAAIP,GAAG,CAACO,SAAS,CAACC,WAAW,EAAE;QAC9CC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEP,IAAI,CAAC;;MAE9C,OAAO,IAAIlB,sBAAsB,CAAC;QAChCkB,IAAI;QACJR,SAAS;QACTgB,IAAI,EAAEjB,QAAQ,CAACD,KAAK,CAACG,IAAI,EAAET,aAAa,CAACM,KAAK,EAAE,GAAGM,MAAM,CAAC;OAC3D,CAAC;IACJ,CAAC;IAED;IACAF,EAAE,CAAC,UAAU,CAAC,GAAIe,IAAiD,IAAI;MACrE,OAAOrB,2BAA2B,CAACsB,aAAa,CAACD,IAAI,EAAEnB,KAAK,CAACQ,QAAQ,CAAC;IACxE,CAAC;IAED,OAAOJ,EAAE;EACX;EAEO,OAAOgB,aAAaA,CACzBb,GAAyB,EACzBC,QAAmC;IAEnC,IAAI,CAACD,GAAG,EAAE;MACR,OAAO,EAAE;;IAGX,OAAOC,QAAQ,CACZa,GAAG,CAAEC,GAAmB,IAAI;MAC3B;MACA,MAAMC,cAAc,GAClB,UAAU,IAAID,GAAG,GAAGA,GAAG,CAACd,QAAQ,GAAGI,SAAS;MAC9C,IAAIW,cAAc,KAAKX,SAAS,EAAE;QAChC,MAAMY,OAAO,GAAGjB,GAAG,CAACe,GAAG,CAACnB,IAAI,CAAa;QACzC,OAAOL,2BAA2B,CAACsB,aAAa,CAC9CI,OAAO,EACNF,GAAmB,CAACd,QAAQ,CAC9B,CAACiB,IAAI,EAAE;OACT,MAAM;QACL,MAAMC,OAAO,GAAeJ,GAAiB;QAC7C,OAAO;UACLK,MAAM,EAAE/B,gBAAgB,CAACW,GAAG,CAACe,GAAG,CAACnB,IAAI,CAAY,CAAC;UAClDyB,UAAU,EAAEF,OAAO,CAACG,KAAK;UACzBC,QAAQ,EAAEJ,OAAO,CAACI;SACnB;;IAEL,CAAC,CAAC,CACDL,IAAI,EAAE;EACX;;AAuEF;AACA,SAAShB,mBAAmBA,CAACL,EAAkB,EAAE,GAAGC,IAAW;EAC7D;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}