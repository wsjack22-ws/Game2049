{"ast":null,"code":"import camelCase from \"camelcase\";\nimport StateFactory from \"./state\";\nimport InstructionFactory from \"./instruction\";\nimport TransactionFactory from \"./transaction\";\nimport RpcFactory from \"./rpc\";\nimport AccountFactory from \"./account\";\nimport SimulateFactory from \"./simulate\";\nimport { parseIdlErrors } from \"../common\";\n// Re-exports.\nexport { StateClient } from \"./state\";\nexport { AccountClient } from \"./account\";\nexport default class NamespaceFactory {\n  /**\n   * Generates all namespaces for a given program.\n   */\n  static build(idl, coder, programId, provider) {\n    const rpc = {};\n    const instruction = {};\n    const transaction = {};\n    const simulate = {};\n    const idlErrors = parseIdlErrors(idl);\n    const state = StateFactory.build(idl, coder, programId, provider);\n    idl.instructions.forEach(idlIx => {\n      const ixItem = InstructionFactory.build(idlIx, (ixName, ix) => coder.instruction.encode(ixName, ix), programId);\n      const txItem = TransactionFactory.build(idlIx, ixItem);\n      const rpcItem = RpcFactory.build(idlIx, txItem, idlErrors, provider);\n      const simulateItem = SimulateFactory.build(idlIx, txItem, idlErrors, provider, coder, programId, idl);\n      const name = camelCase(idlIx.name);\n      instruction[name] = ixItem;\n      transaction[name] = txItem;\n      rpc[name] = rpcItem;\n      simulate[name] = simulateItem;\n    });\n    const account = idl.accounts ? AccountFactory.build(idl, coder, programId, provider) : {};\n    return [rpc, instruction, transaction, account, simulate, state];\n  }\n}","map":{"version":3,"names":["camelCase","StateFactory","InstructionFactory","TransactionFactory","RpcFactory","AccountFactory","SimulateFactory","parseIdlErrors","StateClient","AccountClient","NamespaceFactory","build","idl","coder","programId","provider","rpc","instruction","transaction","simulate","idlErrors","state","instructions","forEach","idlIx","ixItem","ixName","ix","encode","txItem","rpcItem","simulateItem","name","account","accounts"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/program/namespace/index.ts"],"sourcesContent":["import camelCase from \"camelcase\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport Coder from \"../../coder\";\nimport Provider from \"../../provider\";\nimport { Idl, IdlInstruction } from \"../../idl\";\nimport StateFactory, { StateClient } from \"./state\";\nimport InstructionFactory, { InstructionNamespace } from \"./instruction\";\nimport TransactionFactory, { TransactionNamespace } from \"./transaction\";\nimport RpcFactory, { RpcNamespace } from \"./rpc\";\nimport AccountFactory, { AccountNamespace } from \"./account\";\nimport SimulateFactory, { SimulateNamespace } from \"./simulate\";\nimport { parseIdlErrors } from \"../common\";\nimport { AllInstructions } from \"./types\";\n\n// Re-exports.\nexport { StateClient } from \"./state\";\nexport { InstructionNamespace, InstructionFn } from \"./instruction\";\nexport { TransactionNamespace, TransactionFn } from \"./transaction\";\nexport { RpcNamespace, RpcFn } from \"./rpc\";\nexport { AccountNamespace, AccountClient, ProgramAccount } from \"./account\";\nexport { SimulateNamespace, SimulateFn } from \"./simulate\";\nexport { IdlAccounts, IdlTypes } from \"./types\";\n\nexport default class NamespaceFactory {\n  /**\n   * Generates all namespaces for a given program.\n   */\n  public static build<IDL extends Idl>(\n    idl: IDL,\n    coder: Coder,\n    programId: PublicKey,\n    provider: Provider\n  ): [\n    RpcNamespace<IDL>,\n    InstructionNamespace<IDL>,\n    TransactionNamespace<IDL>,\n    AccountNamespace<IDL>,\n    SimulateNamespace<IDL>,\n    StateClient<IDL> | undefined\n  ] {\n    const rpc: RpcNamespace = {};\n    const instruction: InstructionNamespace = {};\n    const transaction: TransactionNamespace = {};\n    const simulate: SimulateNamespace = {};\n\n    const idlErrors = parseIdlErrors(idl);\n\n    const state = StateFactory.build(idl, coder, programId, provider);\n\n    idl.instructions.forEach(<I extends AllInstructions<IDL>>(idlIx: I) => {\n      const ixItem = InstructionFactory.build<IDL, I>(\n        idlIx,\n        (ixName, ix) => coder.instruction.encode(ixName, ix),\n        programId\n      );\n      const txItem = TransactionFactory.build(idlIx, ixItem);\n      const rpcItem = RpcFactory.build(idlIx, txItem, idlErrors, provider);\n      const simulateItem = SimulateFactory.build(\n        idlIx,\n        txItem,\n        idlErrors,\n        provider,\n        coder,\n        programId,\n        idl\n      );\n\n      const name = camelCase(idlIx.name);\n\n      instruction[name] = ixItem;\n      transaction[name] = txItem;\n      rpc[name] = rpcItem;\n      simulate[name] = simulateItem;\n    });\n\n    const account: AccountNamespace<IDL> = idl.accounts\n      ? AccountFactory.build(idl, coder, programId, provider)\n      : ({} as AccountNamespace<IDL>);\n\n    return [\n      rpc as RpcNamespace<IDL>,\n      instruction as InstructionNamespace<IDL>,\n      transaction as TransactionNamespace<IDL>,\n      account,\n      simulate as SimulateNamespace<IDL>,\n      state,\n    ];\n  }\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,WAAW;AAKjC,OAAOC,YAA6B,MAAM,SAAS;AACnD,OAAOC,kBAA4C,MAAM,eAAe;AACxE,OAAOC,kBAA4C,MAAM,eAAe;AACxE,OAAOC,UAA4B,MAAM,OAAO;AAChD,OAAOC,cAAoC,MAAM,WAAW;AAC5D,OAAOC,eAAsC,MAAM,YAAY;AAC/D,SAASC,cAAc,QAAQ,WAAW;AAG1C;AACA,SAASC,WAAW,QAAQ,SAAS;AAIrC,SAA2BC,aAAa,QAAwB,WAAW;AAI3E,eAAc,MAAOC,gBAAgB;EACnC;;;EAGO,OAAOC,KAAKA,CACjBC,GAAQ,EACRC,KAAY,EACZC,SAAoB,EACpBC,QAAkB;IASlB,MAAMC,GAAG,GAAiB,EAAE;IAC5B,MAAMC,WAAW,GAAyB,EAAE;IAC5C,MAAMC,WAAW,GAAyB,EAAE;IAC5C,MAAMC,QAAQ,GAAsB,EAAE;IAEtC,MAAMC,SAAS,GAAGb,cAAc,CAACK,GAAG,CAAC;IAErC,MAAMS,KAAK,GAAGpB,YAAY,CAACU,KAAK,CAACC,GAAG,EAAEC,KAAK,EAAEC,SAAS,EAAEC,QAAQ,CAAC;IAEjEH,GAAG,CAACU,YAAY,CAACC,OAAO,CAAkCC,KAAQ,IAAI;MACpE,MAAMC,MAAM,GAAGvB,kBAAkB,CAACS,KAAK,CACrCa,KAAK,EACL,CAACE,MAAM,EAAEC,EAAE,KAAKd,KAAK,CAACI,WAAW,CAACW,MAAM,CAACF,MAAM,EAAEC,EAAE,CAAC,EACpDb,SAAS,CACV;MACD,MAAMe,MAAM,GAAG1B,kBAAkB,CAACQ,KAAK,CAACa,KAAK,EAAEC,MAAM,CAAC;MACtD,MAAMK,OAAO,GAAG1B,UAAU,CAACO,KAAK,CAACa,KAAK,EAAEK,MAAM,EAAET,SAAS,EAAEL,QAAQ,CAAC;MACpE,MAAMgB,YAAY,GAAGzB,eAAe,CAACK,KAAK,CACxCa,KAAK,EACLK,MAAM,EACNT,SAAS,EACTL,QAAQ,EACRF,KAAK,EACLC,SAAS,EACTF,GAAG,CACJ;MAED,MAAMoB,IAAI,GAAGhC,SAAS,CAACwB,KAAK,CAACQ,IAAI,CAAC;MAElCf,WAAW,CAACe,IAAI,CAAC,GAAGP,MAAM;MAC1BP,WAAW,CAACc,IAAI,CAAC,GAAGH,MAAM;MAC1Bb,GAAG,CAACgB,IAAI,CAAC,GAAGF,OAAO;MACnBX,QAAQ,CAACa,IAAI,CAAC,GAAGD,YAAY;IAC/B,CAAC,CAAC;IAEF,MAAME,OAAO,GAA0BrB,GAAG,CAACsB,QAAQ,GAC/C7B,cAAc,CAACM,KAAK,CAACC,GAAG,EAAEC,KAAK,EAAEC,SAAS,EAAEC,QAAQ,CAAC,GACpD,EAA4B;IAEjC,OAAO,CACLC,GAAwB,EACxBC,WAAwC,EACxCC,WAAwC,EACxCe,OAAO,EACPd,QAAkC,EAClCE,KAAK,CACN;EACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}