{"ast":null,"code":"import { SolanaMobileWalletAdapterWalletName } from '@solana-mobile/wallet-adapter-mobile';\nimport { WalletReadyState } from '@solana/wallet-adapter-base';\nexport var Environment;\n(function (Environment) {\n  Environment[Environment[\"DESKTOP_WEB\"] = 0] = \"DESKTOP_WEB\";\n  Environment[Environment[\"MOBILE_WEB\"] = 1] = \"MOBILE_WEB\";\n})(Environment || (Environment = {}));\nfunction isWebView(userAgentString) {\n  return /(WebView|Version\\/.+(Chrome)\\/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)|; wv\\).+(Chrome)\\/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+))/i.test(userAgentString);\n}\nexport default function getEnvironment(_ref) {\n  var adapters = _ref.adapters,\n    userAgentString = _ref.userAgentString;\n  if (adapters.some(function (adapter) {\n    return adapter.name !== SolanaMobileWalletAdapterWalletName && adapter.readyState === WalletReadyState.Installed;\n  })) {\n    /**\n     * There are only two ways a browser extension adapter should be able to reach `Installed` status:\n     *\n     *     1. Its browser extension is installed.\n     *     2. The app is running on a mobile wallet's in-app browser.\n     *\n     * In either case, we consider the environment to be desktop-like.\n     */\n    return Environment.DESKTOP_WEB;\n  }\n  if (userAgentString &&\n  // Step 1: Check whether we're on a platform that supports MWA at all.\n  /android/i.test(userAgentString) &&\n  // Step 2: Determine that we are *not* running in a WebView.\n  !isWebView(userAgentString)) {\n    return Environment.MOBILE_WEB;\n  } else {\n    return Environment.DESKTOP_WEB;\n  }\n}","map":{"version":3,"names":["SolanaMobileWalletAdapterWalletName","WalletReadyState","Environment","isWebView","userAgentString","test","getEnvironment","_ref","adapters","some","adapter","name","readyState","Installed","DESKTOP_WEB","MOBILE_WEB"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@solana/wallet-adapter-react/src/getEnvironment.ts"],"sourcesContent":["import { SolanaMobileWalletAdapterWalletName } from '@solana-mobile/wallet-adapter-mobile';\nimport { type Adapter, WalletReadyState } from '@solana/wallet-adapter-base';\n\nexport enum Environment {\n    DESKTOP_WEB,\n    MOBILE_WEB,\n}\n\ntype Config = Readonly<{\n    adapters: Adapter[];\n    userAgentString: string | null;\n}>;\n\nfunction isWebView(userAgentString: string) {\n    return /(WebView|Version\\/.+(Chrome)\\/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)|; wv\\).+(Chrome)\\/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+))/i.test(\n        userAgentString\n    );\n}\n\nexport default function getEnvironment({ adapters, userAgentString }: Config): Environment {\n    if (\n        adapters.some(\n            (adapter) =>\n                adapter.name !== SolanaMobileWalletAdapterWalletName &&\n                adapter.readyState === WalletReadyState.Installed\n        )\n    ) {\n        /**\n         * There are only two ways a browser extension adapter should be able to reach `Installed` status:\n         *\n         *     1. Its browser extension is installed.\n         *     2. The app is running on a mobile wallet's in-app browser.\n         *\n         * In either case, we consider the environment to be desktop-like.\n         */\n        return Environment.DESKTOP_WEB;\n    }\n    if (\n        userAgentString &&\n        // Step 1: Check whether we're on a platform that supports MWA at all.\n        /android/i.test(userAgentString) &&\n        // Step 2: Determine that we are *not* running in a WebView.\n        !isWebView(userAgentString)\n    ) {\n        return Environment.MOBILE_WEB;\n    } else {\n        return Environment.DESKTOP_WEB;\n    }\n}\n"],"mappings":"AAAA,SAASA,mCAAmC,QAAQ,sCAAsC;AAC1F,SAAuBC,gBAAgB,QAAQ,6BAA6B;AAE5E,WAAYC,WAGX;AAHD,WAAYA,WAAW;EACnBA,WAAA,CAAAA,WAAA,oCAAW;EACXA,WAAA,CAAAA,WAAA,kCAAU;AACd,CAAC,EAHWA,WAAW,KAAXA,WAAW;AAUvB,SAASC,SAASA,CAACC,eAAuB;EACtC,OAAO,yGAAyG,CAACC,IAAI,CACjHD,eAAe,CAClB;AACL;AAEA,eAAc,SAAUE,cAAcA,CAAAC,IAAA,EAAsC;EAAA,IAAnCC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IAAEJ,eAAe,GAAAG,IAAA,CAAfH,eAAe;EAC9D,IACII,QAAQ,CAACC,IAAI,CACT,UAACC,OAAO;IAAA,OACJA,OAAO,CAACC,IAAI,KAAKX,mCAAmC,IACpDU,OAAO,CAACE,UAAU,KAAKX,gBAAgB,CAACY,SAAS;EAAA,EACxD,EACH;IACE;;;;;;;;IAQA,OAAOX,WAAW,CAACY,WAAW;;EAElC,IACIV,eAAe;EACf;EACA,UAAU,CAACC,IAAI,CAACD,eAAe,CAAC;EAChC;EACA,CAACD,SAAS,CAACC,eAAe,CAAC,EAC7B;IACE,OAAOF,WAAW,CAACa,UAAU;GAChC,MAAM;IACH,OAAOb,WAAW,CAACY,WAAW;;AAEtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}