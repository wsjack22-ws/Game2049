{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.simulateTransaction = exports.getMultipleAccounts = exports.invoke = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst common_js_1 = require(\"../utils/common.js\");\nconst common_js_2 = require(\"../program/common.js\");\nconst provider_js_1 = require(\"../provider.js\");\nconst superstruct_1 = require(\"superstruct\");\n/**\n * Sends a transaction to a program with the given accounts and instruction\n * data.\n */\nasync function invoke(programId, accounts, data, provider) {\n  programId = (0, common_js_2.translateAddress)(programId);\n  if (!provider) {\n    provider = (0, provider_js_1.getProvider)();\n  }\n  const tx = new web3_js_1.Transaction();\n  tx.add(new web3_js_1.TransactionInstruction({\n    programId,\n    keys: accounts !== null && accounts !== void 0 ? accounts : [],\n    data\n  }));\n  if (provider.sendAndConfirm === undefined) {\n    throw new Error(\"This function requires 'Provider.sendAndConfirm' to be implemented.\");\n  }\n  return await provider.sendAndConfirm(tx, []);\n}\nexports.invoke = invoke;\nconst GET_MULTIPLE_ACCOUNTS_LIMIT = 99;\nasync function getMultipleAccounts(connection, publicKeys, commitment) {\n  if (publicKeys.length <= GET_MULTIPLE_ACCOUNTS_LIMIT) {\n    return await getMultipleAccountsCore(connection, publicKeys, commitment);\n  } else {\n    const batches = (0, common_js_1.chunks)(publicKeys, GET_MULTIPLE_ACCOUNTS_LIMIT);\n    const results = await Promise.all(batches.map(batch => getMultipleAccountsCore(connection, batch, commitment)));\n    return results.flat();\n  }\n}\nexports.getMultipleAccounts = getMultipleAccounts;\nasync function getMultipleAccountsCore(connection, publicKeys, commitmentOverride) {\n  const commitment = commitmentOverride !== null && commitmentOverride !== void 0 ? commitmentOverride : connection.commitment;\n  const accounts = await connection.getMultipleAccountsInfo(publicKeys, commitment);\n  return accounts.map((account, idx) => {\n    if (account === null) {\n      return null;\n    }\n    return {\n      publicKey: publicKeys[idx],\n      account\n    };\n  });\n}\n// copy from @solana/web3.js that has a commitment param\nasync function simulateTransaction(connection, transaction, signers, commitment, includeAccounts) {\n  if (signers && signers.length > 0) {\n    transaction.sign(...signers);\n  }\n  // @ts-expect-error\n  const message = transaction._compile();\n  const signData = message.serialize();\n  // @ts-expect-error\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config = {\n    encoding: \"base64\",\n    commitment: commitment !== null && commitment !== void 0 ? commitment : connection.commitment\n  };\n  if (includeAccounts) {\n    const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n    config[\"accounts\"] = {\n      encoding: \"base64\",\n      addresses\n    };\n  }\n  if (signers) {\n    config.sigVerify = true;\n  }\n  const args = [encodedTransaction, config];\n  // @ts-expect-error\n  const unsafeRes = await connection._rpcRequest(\"simulateTransaction\", args);\n  const res = (0, superstruct_1.create)(unsafeRes, SimulatedTransactionResponseStruct);\n  if (\"error\" in res) {\n    let logs;\n    if (\"data\" in res.error) {\n      logs = res.error.data.logs;\n      if (logs && Array.isArray(logs)) {\n        const traceIndent = \"\\n    \";\n        const logTrace = traceIndent + logs.join(traceIndent);\n        console.error(res.error.message, logTrace);\n      }\n    }\n    throw new web3_js_1.SendTransactionError(\"failed to simulate transaction: \" + res.error.message, logs);\n  }\n  return res.result;\n}\nexports.simulateTransaction = simulateTransaction;\n// copy from @solana/web3.js\nfunction jsonRpcResult(schema) {\n  return (0, superstruct_1.coerce)(createRpcResult(schema), UnknownRpcResult, value => {\n    if (\"error\" in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: (0, superstruct_1.create)(value.result, schema)\n      };\n    }\n  });\n}\n// copy from @solana/web3.js\nconst UnknownRpcResult = createRpcResult((0, superstruct_1.unknown)());\n// copy from @solana/web3.js\nfunction createRpcResult(result) {\n  return (0, superstruct_1.union)([(0, superstruct_1.type)({\n    jsonrpc: (0, superstruct_1.literal)(\"2.0\"),\n    id: (0, superstruct_1.string)(),\n    result\n  }), (0, superstruct_1.type)({\n    jsonrpc: (0, superstruct_1.literal)(\"2.0\"),\n    id: (0, superstruct_1.string)(),\n    error: (0, superstruct_1.type)({\n      code: (0, superstruct_1.unknown)(),\n      message: (0, superstruct_1.string)(),\n      data: (0, superstruct_1.optional)((0, superstruct_1.any)())\n    })\n  })]);\n}\n// copy from @solana/web3.js\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult((0, superstruct_1.type)({\n    context: (0, superstruct_1.type)({\n      slot: (0, superstruct_1.number)()\n    }),\n    value\n  }));\n}\n// copy from @solana/web3.js\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext((0, superstruct_1.type)({\n  err: (0, superstruct_1.nullable)((0, superstruct_1.union)([(0, superstruct_1.type)({}), (0, superstruct_1.string)()])),\n  logs: (0, superstruct_1.nullable)((0, superstruct_1.array)((0, superstruct_1.string)())),\n  accounts: (0, superstruct_1.optional)((0, superstruct_1.nullable)((0, superstruct_1.array)((0, superstruct_1.nullable)((0, superstruct_1.type)({\n    executable: (0, superstruct_1.boolean)(),\n    owner: (0, superstruct_1.string)(),\n    lamports: (0, superstruct_1.number)(),\n    data: (0, superstruct_1.array)((0, superstruct_1.string)()),\n    rentEpoch: (0, superstruct_1.optional)((0, superstruct_1.number)())\n  }))))),\n  unitsConsumed: (0, superstruct_1.optional)((0, superstruct_1.number)())\n}));","map":{"version":3,"names":["web3_js_1","require","common_js_1","common_js_2","provider_js_1","superstruct_1","invoke","programId","accounts","data","provider","translateAddress","getProvider","tx","Transaction","add","TransactionInstruction","keys","sendAndConfirm","undefined","Error","exports","GET_MULTIPLE_ACCOUNTS_LIMIT","getMultipleAccounts","connection","publicKeys","commitment","length","getMultipleAccountsCore","batches","chunks","results","Promise","all","map","batch","flat","commitmentOverride","getMultipleAccountsInfo","account","idx","publicKey","simulateTransaction","transaction","signers","includeAccounts","sign","message","_compile","signData","serialize","wireTransaction","_serialize","encodedTransaction","toString","config","encoding","addresses","Array","isArray","nonProgramIds","key","toBase58","sigVerify","args","unsafeRes","_rpcRequest","res","create","SimulatedTransactionResponseStruct","logs","error","traceIndent","logTrace","join","console","SendTransactionError","result","jsonRpcResult","schema","coerce","createRpcResult","UnknownRpcResult","value","unknown","union","type","jsonrpc","literal","id","string","code","optional","any","jsonRpcResultAndContext","context","slot","number","err","nullable","array","executable","boolean","owner","lamports","rentEpoch","unitsConsumed"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/utils/rpc.ts"],"sourcesContent":["import { Buffer } from \"buffer\";\nimport assert from \"assert\";\nimport {\n  AccountInfo,\n  AccountMeta,\n  Connection,\n  PublicKey,\n  TransactionSignature,\n  Transaction,\n  TransactionInstruction,\n  Commitment,\n  Signer,\n  RpcResponseAndContext,\n  SimulatedTransactionResponse,\n  SendTransactionError,\n} from \"@solana/web3.js\";\nimport { chunks } from \"../utils/common.js\";\nimport { Address, translateAddress } from \"../program/common.js\";\nimport Provider, { getProvider, Wallet } from \"../provider.js\";\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n  Struct,\n} from \"superstruct\";\n\n/**\n * Sends a transaction to a program with the given accounts and instruction\n * data.\n */\nexport async function invoke(\n  programId: Address,\n  accounts?: Array<AccountMeta>,\n  data?: Buffer,\n  provider?: Provider\n): Promise<TransactionSignature> {\n  programId = translateAddress(programId);\n  if (!provider) {\n    provider = getProvider();\n  }\n\n  const tx = new Transaction();\n  tx.add(\n    new TransactionInstruction({\n      programId,\n      keys: accounts ?? [],\n      data,\n    })\n  );\n\n  if (provider.sendAndConfirm === undefined) {\n    throw new Error(\n      \"This function requires 'Provider.sendAndConfirm' to be implemented.\"\n    );\n  }\n\n  return await provider.sendAndConfirm(tx, []);\n}\n\nconst GET_MULTIPLE_ACCOUNTS_LIMIT: number = 99;\n\nexport async function getMultipleAccounts(\n  connection: Connection,\n  publicKeys: PublicKey[],\n  commitment?: Commitment\n): Promise<\n  Array<null | { publicKey: PublicKey; account: AccountInfo<Buffer> }>\n> {\n  if (publicKeys.length <= GET_MULTIPLE_ACCOUNTS_LIMIT) {\n    return await getMultipleAccountsCore(connection, publicKeys, commitment);\n  } else {\n    const batches = chunks(publicKeys, GET_MULTIPLE_ACCOUNTS_LIMIT);\n    const results = await Promise.all<\n      Array<null | { publicKey: PublicKey; account: AccountInfo<Buffer> }>\n    >(\n      batches.map((batch) =>\n        getMultipleAccountsCore(connection, batch, commitment)\n      )\n    );\n    return results.flat();\n  }\n}\n\nasync function getMultipleAccountsCore(\n  connection: Connection,\n  publicKeys: PublicKey[],\n  commitmentOverride?: Commitment\n): Promise<\n  Array<null | { publicKey: PublicKey; account: AccountInfo<Buffer> }>\n> {\n  const commitment = commitmentOverride ?? connection.commitment;\n  const accounts = await connection.getMultipleAccountsInfo(\n    publicKeys,\n    commitment\n  );\n  return accounts.map((account, idx) => {\n    if (account === null) {\n      return null;\n    }\n    return {\n      publicKey: publicKeys[idx],\n      account,\n    };\n  });\n}\n\n// copy from @solana/web3.js that has a commitment param\nexport async function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers?: Array<Signer>,\n  commitment?: Commitment,\n  includeAccounts?: boolean | Array<PublicKey>\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  if (signers && signers.length > 0) {\n    transaction.sign(...signers);\n  }\n\n  // @ts-expect-error\n  const message = transaction._compile();\n  const signData = message.serialize();\n  // @ts-expect-error\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config: any = {\n    encoding: \"base64\",\n    commitment: commitment ?? connection.commitment,\n  };\n\n  if (includeAccounts) {\n    const addresses = (\n      Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()\n    ).map((key) => key.toBase58());\n\n    config[\"accounts\"] = {\n      encoding: \"base64\",\n      addresses,\n    };\n  }\n\n  if (signers) {\n    config.sigVerify = true;\n  }\n\n  const args = [encodedTransaction, config];\n  // @ts-expect-error\n  const unsafeRes = await connection._rpcRequest(\"simulateTransaction\", args);\n  const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n  if (\"error\" in res) {\n    let logs;\n    if (\"data\" in res.error) {\n      logs = res.error.data.logs;\n      if (logs && Array.isArray(logs)) {\n        const traceIndent = \"\\n    \";\n        const logTrace = traceIndent + logs.join(traceIndent);\n        console.error(res.error.message, logTrace);\n      }\n    }\n    throw new SendTransactionError(\n      \"failed to simulate transaction: \" + res.error.message,\n      logs\n    );\n  }\n  return res.result;\n}\n\n// copy from @solana/web3.js\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, (value) => {\n    if (\"error\" in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n// copy from @solana/web3.js\nconst UnknownRpcResult = createRpcResult(unknown());\n\n// copy from @solana/web3.js\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal(\"2.0\"),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal(\"2.0\"),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\n// copy from @solana/web3.js\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    })\n  );\n}\n\n// copy from @solana/web3.js\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            })\n          )\n        )\n      )\n    ),\n    unitsConsumed: optional(number()),\n  })\n);\n\nexport type SuccessfulTxSimulationResponse = Omit<\n  SimulatedTransactionResponse,\n  \"err\"\n>;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}