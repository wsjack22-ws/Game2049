{"ast":null,"code":"import { assertType } from \"./misc\";\nimport { isPublishMethod, isPublishParams, isSubscribeMethod, isSubscribeParams, isSubscriptionMethod, isSubscriptionParams, isUnsubscribeMethod, isUnsubscribeParams } from \"./validators\";\nexport function parseSubscribeRequest(request) {\n  if (!isSubscribeMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid subscribe method\");\n  }\n  if (!isSubscribeParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid subscribe params\");\n  }\n  const params = request.params;\n  assertType(params, \"topic\");\n  return params;\n}\nexport function parsePublishRequest(request) {\n  if (!isPublishMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid publish method\");\n  }\n  if (!isPublishParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid publish params\");\n  }\n  const params = request.params;\n  assertType(params, \"topic\");\n  assertType(params, \"message\");\n  assertType(params, \"ttl\", \"number\");\n  return params;\n}\nexport function parseUnsubscribeRequest(request) {\n  if (!isUnsubscribeMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid unsubscribe method\");\n  }\n  if (!isUnsubscribeParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid unsubscribe params\");\n  }\n  const params = request.params;\n  assertType(params, \"id\");\n  return params;\n}\nexport function parseSubscriptionRequest(request) {\n  if (!isSubscriptionMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid subscription method\");\n  }\n  if (!isSubscriptionParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid subscription params\");\n  }\n  const params = request.params;\n  assertType(params, \"id\");\n  assertType(params, \"data\");\n  return params;\n}","map":{"version":3,"names":["assertType","isPublishMethod","isPublishParams","isSubscribeMethod","isSubscribeParams","isSubscriptionMethod","isSubscriptionParams","isUnsubscribeMethod","isUnsubscribeParams","parseSubscribeRequest","request","method","Error","params","parsePublishRequest","parseUnsubscribeRequest","parseSubscriptionRequest"],"sources":["../../src/parsers.ts"],"sourcesContent":[null],"mappings":"AAGA,SAASA,UAAU,QAAQ,QAAQ;AACnC,SACEC,eAAe,EACfC,eAAe,EACfC,iBAAiB,EACjBC,iBAAiB,EACjBC,oBAAoB,EACpBC,oBAAoB,EACpBC,mBAAmB,EACnBC,mBAAmB,QACd,cAAc;AAErB,OAAM,SAAUC,qBAAqBA,CACnCC,OAAuB;EAEvB,IAAI,CAACP,iBAAiB,CAACO,OAAO,CAACC,MAAM,CAAC,EAAE;IACtC,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;;EAElE,IAAI,CAACR,iBAAiB,CAACM,OAAO,CAACG,MAAM,CAAC,EAAE;IACtC,MAAM,IAAID,KAAK,CAAC,+CAA+C,CAAC;;EAElE,MAAMC,MAAM,GAAGH,OAAO,CAACG,MAAsC;EAE7Db,UAAU,CAACa,MAAM,EAAE,OAAO,CAAC;EAE3B,OAAOA,MAAM;AACf;AAEA,OAAM,SAAUC,mBAAmBA,CACjCJ,OAAuB;EAEvB,IAAI,CAACT,eAAe,CAACS,OAAO,CAACC,MAAM,CAAC,EAAE;IACpC,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;;EAEhE,IAAI,CAACV,eAAe,CAACQ,OAAO,CAACG,MAAM,CAAC,EAAE;IACpC,MAAM,IAAID,KAAK,CAAC,6CAA6C,CAAC;;EAEhE,MAAMC,MAAM,GAAGH,OAAO,CAACG,MAAoC;EAE3Db,UAAU,CAACa,MAAM,EAAE,OAAO,CAAC;EAC3Bb,UAAU,CAACa,MAAM,EAAE,SAAS,CAAC;EAC7Bb,UAAU,CAACa,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC;EAEnC,OAAOA,MAAM;AACf;AAEA,OAAM,SAAUE,uBAAuBA,CACrCL,OAAuB;EAEvB,IAAI,CAACH,mBAAmB,CAACG,OAAO,CAACC,MAAM,CAAC,EAAE;IACxC,MAAM,IAAIC,KAAK,CAAC,iDAAiD,CAAC;;EAEpE,IAAI,CAACJ,mBAAmB,CAACE,OAAO,CAACG,MAAM,CAAC,EAAE;IACxC,MAAM,IAAID,KAAK,CAAC,iDAAiD,CAAC;;EAEpE,MAAMC,MAAM,GAAGH,OAAO,CAACG,MAAwC;EAE/Db,UAAU,CAACa,MAAM,EAAE,IAAI,CAAC;EAExB,OAAOA,MAAM;AACf;AAEA,OAAM,SAAUG,wBAAwBA,CACtCN,OAAuB;EAEvB,IAAI,CAACL,oBAAoB,CAACK,OAAO,CAACC,MAAM,CAAC,EAAE;IACzC,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;;EAErE,IAAI,CAACN,oBAAoB,CAACI,OAAO,CAACG,MAAM,CAAC,EAAE;IACzC,MAAM,IAAID,KAAK,CAAC,kDAAkD,CAAC;;EAErE,MAAMC,MAAM,GAAGH,OAAO,CAACG,MAAyC;EAEhEb,UAAU,CAACa,MAAM,EAAE,IAAI,CAAC;EACxBb,UAAU,CAACa,MAAM,EAAE,MAAM,CAAC;EAE1B,OAAOA,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}