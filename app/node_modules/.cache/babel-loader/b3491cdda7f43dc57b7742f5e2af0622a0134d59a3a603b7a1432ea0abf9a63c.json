{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst buffer_1 = require(\"buffer\");\nconst web3_js_1 = require(\"@solana/web3.js\");\n/**\n * Node only wallet.\n */\nclass NodeWallet {\n  constructor(payer) {\n    this.payer = payer;\n  }\n  static local() {\n    const process = require(\"process\");\n    const payer = web3_js_1.Keypair.fromSecretKey(buffer_1.Buffer.from(JSON.parse(require(\"fs\").readFileSync(process.env.ANCHOR_WALLET, {\n      encoding: \"utf-8\"\n    }))));\n    return new NodeWallet(payer);\n  }\n  async signTransaction(tx) {\n    tx.partialSign(this.payer);\n    return tx;\n  }\n  async signAllTransactions(txs) {\n    return txs.map(t => {\n      t.partialSign(this.payer);\n      return t;\n    });\n  }\n  get publicKey() {\n    return this.payer.publicKey;\n  }\n}\nexports.default = NodeWallet;","map":{"version":3,"names":["buffer_1","require","web3_js_1","NodeWallet","constructor","payer","local","process","Keypair","fromSecretKey","Buffer","from","JSON","parse","readFileSync","env","ANCHOR_WALLET","encoding","signTransaction","tx","partialSign","signAllTransactions","txs","map","t","publicKey","exports","default"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/nodewallet.ts"],"sourcesContent":["import { Buffer } from \"buffer\";\nimport { Keypair, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { Wallet } from \"./provider\";\n\n/**\n * Node only wallet.\n */\nexport default class NodeWallet implements Wallet {\n  constructor(readonly payer: Keypair) {}\n\n  static local(): NodeWallet {\n    const process = require(\"process\");\n    const payer = Keypair.fromSecretKey(\n      Buffer.from(\n        JSON.parse(\n          require(\"fs\").readFileSync(process.env.ANCHOR_WALLET, {\n            encoding: \"utf-8\",\n          })\n        )\n      )\n    );\n    return new NodeWallet(payer);\n  }\n\n  async signTransaction(tx: Transaction): Promise<Transaction> {\n    tx.partialSign(this.payer);\n    return tx;\n  }\n\n  async signAllTransactions(txs: Transaction[]): Promise<Transaction[]> {\n    return txs.map((t) => {\n      t.partialSign(this.payer);\n      return t;\n    });\n  }\n\n  get publicKey(): PublicKey {\n    return this.payer.publicKey;\n  }\n}\n"],"mappings":";;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,SAAA,GAAAD,OAAA;AAGA;;;AAGA,MAAqBE,UAAU;EAC7BC,YAAqBC,KAAc;IAAd,KAAAA,KAAK,GAALA,KAAK;EAAY;EAEtC,OAAOC,KAAKA,CAAA;IACV,MAAMC,OAAO,GAAGN,OAAO,CAAC,SAAS,CAAC;IAClC,MAAMI,KAAK,GAAGH,SAAA,CAAAM,OAAO,CAACC,aAAa,CACjCT,QAAA,CAAAU,MAAM,CAACC,IAAI,CACTC,IAAI,CAACC,KAAK,CACRZ,OAAO,CAAC,IAAI,CAAC,CAACa,YAAY,CAACP,OAAO,CAACQ,GAAG,CAACC,aAAa,EAAE;MACpDC,QAAQ,EAAE;KACX,CAAC,CACH,CACF,CACF;IACD,OAAO,IAAId,UAAU,CAACE,KAAK,CAAC;EAC9B;EAEA,MAAMa,eAAeA,CAACC,EAAe;IACnCA,EAAE,CAACC,WAAW,CAAC,IAAI,CAACf,KAAK,CAAC;IAC1B,OAAOc,EAAE;EACX;EAEA,MAAME,mBAAmBA,CAACC,GAAkB;IAC1C,OAAOA,GAAG,CAACC,GAAG,CAAEC,CAAC,IAAI;MACnBA,CAAC,CAACJ,WAAW,CAAC,IAAI,CAACf,KAAK,CAAC;MACzB,OAAOmB,CAAC;IACV,CAAC,CAAC;EACJ;EAEA,IAAIC,SAASA,CAAA;IACX,OAAO,IAAI,CAACpB,KAAK,CAACoB,SAAS;EAC7B;;AA/BFC,OAAA,CAAAC,OAAA,GAAAxB,UAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}