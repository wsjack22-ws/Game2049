{"ast":null,"code":"import { Transaction } from \"@solana/web3.js\";\nimport { splitArgsAndCtx } from \"../context\";\nexport default class TransactionFactory {\n  static build(idlIx, ixFn) {\n    const txFn = (...args) => {\n      var _a;\n      const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n      const tx = new Transaction();\n      (_a = ctx.instructions) === null || _a === void 0 ? void 0 : _a.forEach(ix => tx.add(ix));\n      tx.add(ixFn(...args));\n      return tx;\n    };\n    return txFn;\n  }\n}","map":{"version":3,"names":["Transaction","splitArgsAndCtx","TransactionFactory","build","idlIx","ixFn","txFn","args","ctx","tx","_a","instructions","forEach","ix","add"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/program/namespace/transaction.ts"],"sourcesContent":["import { Transaction } from \"@solana/web3.js\";\nimport { Idl, IdlInstruction } from \"../../idl\";\nimport { splitArgsAndCtx } from \"../context\";\nimport { InstructionFn } from \"./instruction\";\nimport {\n  AllInstructions,\n  InstructionContextFn,\n  MakeInstructionsNamespace,\n} from \"./types\";\n\nexport default class TransactionFactory {\n  public static build<IDL extends Idl, I extends AllInstructions<IDL>>(\n    idlIx: I,\n    ixFn: InstructionFn<IDL, I>\n  ): TransactionFn<IDL, I> {\n    const txFn: TransactionFn<IDL, I> = (...args): Transaction => {\n      const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n      const tx = new Transaction();\n      ctx.instructions?.forEach((ix) => tx.add(ix));\n      tx.add(ixFn(...args));\n      return tx;\n    };\n\n    return txFn;\n  }\n}\n\n/**\n * The namespace provides functions to build [[Transaction]] objects for each\n * method of a program.\n *\n * ## Usage\n *\n * ```javascript\n * program.transaction.<method>(...args, ctx);\n * ```\n *\n * ## Parameters\n *\n * 1. `args` - The positional arguments for the program. The type and number\n *    of these arguments depend on the program being used.\n * 2. `ctx`  - [[Context]] non-argument parameters to pass to the method.\n *    Always the last parameter in the method call.\n *\n * ## Example\n *\n * To create an instruction for the `increment` method above,\n *\n * ```javascript\n * const tx = await program.transaction.increment({\n *   accounts: {\n *     counter,\n *   },\n * });\n * ```\n */\nexport type TransactionNamespace<\n  IDL extends Idl = Idl,\n  I extends AllInstructions<IDL> = AllInstructions<IDL>\n> = MakeInstructionsNamespace<IDL, I, Transaction>;\n\n/**\n * Tx is a function to create a `Transaction` for a given program instruction.\n */\nexport type TransactionFn<\n  IDL extends Idl = Idl,\n  I extends AllInstructions<IDL> = AllInstructions<IDL>\n> = InstructionContextFn<IDL, I, Transaction>;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,iBAAiB;AAE7C,SAASC,eAAe,QAAQ,YAAY;AAQ5C,eAAc,MAAOC,kBAAkB;EAC9B,OAAOC,KAAKA,CACjBC,KAAQ,EACRC,IAA2B;IAE3B,MAAMC,IAAI,GAA0BA,CAAC,GAAGC,IAAI,KAAiB;;MAC3D,MAAM,GAAGC,GAAG,CAAC,GAAGP,eAAe,CAACG,KAAK,EAAE,CAAC,GAAGG,IAAI,CAAC,CAAC;MACjD,MAAME,EAAE,GAAG,IAAIT,WAAW,EAAE;MAC5B,CAAAU,EAAA,GAAAF,GAAG,CAACG,YAAY,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,OAAO,CAAEC,EAAE,IAAKJ,EAAE,CAACK,GAAG,CAACD,EAAE,CAAC,CAAC;MAC7CJ,EAAE,CAACK,GAAG,CAACT,IAAI,CAAC,GAAGE,IAAI,CAAC,CAAC;MACrB,OAAOE,EAAE;IACX,CAAC;IAED,OAAOH,IAAI;EACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}