{"ast":null,"code":"import randombytes from 'randombytes';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport base64urlLib from 'base64url';\nimport keccakLib from 'keccak';\nconst randomId = () => randombytes(32).toString(\"hex\");\nclass URLWithHashParams extends URL {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"hashParams\", new URLSearchParams());\n  }\n  toString() {\n    this.hash = this.hashParams.toString();\n    return super.toString.call(this);\n  }\n}\nconst base64url = base64urlLib;\nfunction safebtoa(str) {\n  return base64url.encode(str);\n}\nfunction safeatob(str) {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return base64url.decode(str);\n}\nconst keccak = keccakLib;\nfunction base64toJSON(b64str) {\n  return JSON.parse(base64url.decode(b64str));\n}\nfunction jsonToBase64(json) {\n  return base64url.encode(JSON.stringify(json));\n}\nfunction keccak256(str) {\n  let input = str;\n  if (typeof str === \"string\" && str.slice(0, 2) === \"0x\" && str.length === 66) {\n    input = Buffer.from(str.slice(2), \"hex\");\n  }\n  const data = `0x${keccak(\"keccak256\").update(input).digest(\"hex\").padStart(64, \"0\")}`;\n  return data;\n}\nexport { URLWithHashParams, base64toJSON, base64url, jsonToBase64, keccak, keccak256, randomId, safeatob, safebtoa };","map":{"version":3,"names":["randomId","randombytes","toString","URLWithHashParams","URL","constructor","arguments","_defineProperty","URLSearchParams","hash","hashParams","call","base64url","base64urlLib","safebtoa","str","encode","safeatob","decode","keccak","keccakLib","base64toJSON","b64str","JSON","parse","jsonToBase64","json","stringify","keccak256","input","slice","length","Buffer","from","data","update","digest","padStart"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@toruslabs/openlogin-utils/src/randomId.ts","/Users/wuhuan/gif-portal-starter/node_modules/@toruslabs/openlogin-utils/src/url.ts","/Users/wuhuan/gif-portal-starter/node_modules/@toruslabs/openlogin-utils/src/utils.ts"],"sourcesContent":["import randombytes from \"randombytes\";\n\nexport const randomId = (): string => randombytes(32).toString(\"hex\");\n","import { HashParams } from \"./hashParams\";\n\nexport class URLWithHashParams extends URL {\n  hashParams: HashParams = new URLSearchParams();\n\n  toString(): string {\n    this.hash = this.hashParams.toString();\n    return super.toString.call(this);\n  }\n}\n","import base64urlLib from \"base64url\";\nimport keccakLib from \"keccak\";\n\nexport const base64url = base64urlLib;\n\nexport function safebtoa(str: string): string {\n  return base64url.encode(str);\n}\n\nexport function safeatob(str: string): string {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return base64url.decode(str);\n}\n\nexport const keccak = keccakLib;\n\nexport type BufferEncoding = \"ascii\" | \"utf8\" | \"utf-8\" | \"utf16le\" | \"ucs2\" | \"ucs-2\" | \"base64\" | \"latin1\" | \"binary\" | \"hex\";\n\nexport function base64toJSON(b64str: string): Record<string, unknown> {\n  return JSON.parse(base64url.decode(b64str));\n}\n\nexport function jsonToBase64(json: Record<string, unknown>): string {\n  return base64url.encode(JSON.stringify(json));\n}\n\nexport function keccak256(str: string): string {\n  let input: string | Buffer = str;\n  if (typeof str === \"string\" && str.slice(0, 2) === \"0x\" && str.length === 66) {\n    input = Buffer.from(str.slice(2), \"hex\");\n  }\n  const data = `0x${keccak(\"keccak256\").update(input).digest(\"hex\").padStart(64, \"0\")}`;\n  return data;\n}\n\nexport interface BaseLoginOptions {\n  /**\n   * If you need to send custom parameters to the Authorization Server,\n   * make sure to use the original parameter name.\n   */\n  [key: string]: unknown;\n  /**\n   * - `'page'`: displays the UI with a full page view\n   * - `'popup'`: displays the UI with a popup window\n   * - `'touch'`: displays the UI in a way that leverages a touch interface\n   * - `'wap'`: displays the UI with a \"feature phone\" type interface\n   */\n  display?: \"page\" | \"popup\" | \"touch\" | \"wap\" | string;\n  /**\n   * - `'none'`: do not prompt user for login or consent on re-authentication\n   * - `'login'`: prompt user for re-authentication\n   * - `'consent'`: prompt user for consent before processing request\n   * - `'select_account'`: prompt user to select an account\n   */\n  prompt?: \"none\" | \"login\" | \"consent\" | \"select_account\" | string;\n  /**\n   * Maximum allowable elapsed time (in seconds) since authentication.\n   * If the last time the user authenticated is greater than this value,\n   * the user must be re-authenticated.\n   */\n  max_age?: string | number;\n  /**\n   * The space-separated list of language tags, ordered by preference.\n   * For example: `'fr-CA fr en'`.\n   */\n  ui_locales?: string;\n  /**\n   * Previously issued ID Token.\n   */\n  id_token_hint?: string;\n  /**\n   * The user's email address or other identifier. When your app knows\n   * which user is trying to authenticate, you can provide this parameter\n   * to pre-fill the email box or select the right session for sign-in.\n   *\n   * This currently only affects the classic Lock experience.\n   */\n  login_hint?: string;\n  acr_values?: string;\n  /**\n   * The default scope to be used on authentication requests.\n   * The defaultScope defined in the Auth0Client is included\n   * along with this scope\n   */\n  scope?: string;\n  /**\n   * The default audience to be used for requesting API access.\n   */\n  audience?: string;\n  /**\n   * The name of the connection configured for your application.\n   * If null, it will redirect to the Auth0 Login Page and show\n   * the Login Widget.\n   */\n  connection?: string;\n}\n\nexport interface ExtraLoginOptions extends BaseLoginOptions {\n  /**\n   * Your Auth0 account domain such as `'example.auth0.com'`,\n   * `'example.eu.auth0.com'` or , `'example.mycompany.com'`\n   * (when using [custom domains](https://auth0.com/docs/custom-domains))\n   */\n  domain?: string;\n  /**\n   * The Client ID found on your Application settings page\n   */\n  client_id?: string;\n  /**\n   * The default URL where Auth0 will redirect your browser to with\n   * the authentication result. It must be whitelisted in\n   * the \"Allowed Callback URLs\" field in your Auth0 Application's\n   * settings. If not provided here, it should be provided in the other\n   * methods that provide authentication.\n   */\n  redirect_uri?: string;\n  /**\n   * The value in seconds used to account for clock skew in JWT expirations.\n   * Typically, this value is no more than a minute or two at maximum.\n   * Defaults to 60s.\n   */\n  leeway?: number;\n  /**\n   * The field in jwt token which maps to verifier id\n   */\n  verifierIdField?: string;\n  /**\n   * Whether the verifier id field is case sensitive\n   * @defaultValue true\n   */\n  isVerifierIdCaseSensitive?: boolean;\n}\n"],"mappings":";;;;AAEa,MAAAA,QAAQ,GAAGA,CAAA,KAAcC,WAAW,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,KAAK;ACA9D,MAAOC,iBAAkB,SAAQC,GAAG;EAAAC,YAAA;IAAA,SAAAC,SAAA;IAAAC,eACf,yBAAIC,eAAe,EAAE;EAAA;EAE9CN,QAAQA,CAAA;IACN,IAAI,CAACO,IAAI,GAAG,IAAI,CAACC,UAAU,CAACR,QAAQ,EAAE;IACtC,OAAO,KAAK,CAACA,QAAQ,CAACS,IAAI,CAAC,IAAI,CAAC;EAClC;AACD;ACNM,MAAMC,SAAS,GAAGC,YAAA;AAEnB,SAAUC,QAAQA,CAACC,GAAW;EAClC,OAAOH,SAAS,CAACI,MAAM,CAACD,GAAG,CAAC;AAC9B;AAEM,SAAUE,QAAQA,CAACF,GAAW;EAClC;EACA,OAAOH,SAAS,CAACM,MAAM,CAACH,GAAG,CAAC;AAC9B;AAEO,MAAMI,MAAM,GAAGC,SAAA;AAIhB,SAAUC,YAAYA,CAACC,MAAc;EACzC,OAAOC,IAAI,CAACC,KAAK,CAACZ,SAAS,CAACM,MAAM,CAACI,MAAM,CAAC,CAAC;AAC7C;AAEM,SAAUG,YAAYA,CAACC,IAA6B;EACxD,OAAOd,SAAS,CAACI,MAAM,CAACO,IAAI,CAACI,SAAS,CAACD,IAAI,CAAC,CAAC;AAC/C;AAEM,SAAUE,SAASA,CAACb,GAAW;EACnC,IAAIc,KAAK,GAAoBd,GAAG;EAChC,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACe,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,IAAIf,GAAG,CAACgB,MAAM,KAAK,EAAE,EAAE;IAC5EF,KAAK,GAAGG,MAAM,CAACC,IAAI,CAAClB,GAAG,CAACe,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;EACzC;EACD,MAAMI,IAAI,GAAG,KAAKf,MAAM,CAAC,WAAW,CAAC,CAACgB,MAAM,CAACN,KAAK,CAAC,CAACO,MAAM,CAAC,KAAK,CAAC,CAACC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAG;EACrF,OAAOH,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}