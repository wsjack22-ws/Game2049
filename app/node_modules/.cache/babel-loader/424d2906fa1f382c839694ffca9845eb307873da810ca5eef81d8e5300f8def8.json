{"ast":null,"code":"import _classCallCheck from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as base64 from \"base64-js\";\nimport { sha256 } from \"js-sha256\";\nimport { IdlCoder } from \"./idl\";\nexport var EventCoder = /*#__PURE__*/function () {\n  function EventCoder(idl) {\n    _classCallCheck(this, EventCoder);\n    if (idl.events === undefined) {\n      this.layouts = new Map();\n      return;\n    }\n    var layouts = idl.events.map(function (event) {\n      var eventTypeDef = {\n        name: event.name,\n        type: {\n          kind: \"struct\",\n          fields: event.fields.map(function (f) {\n            return {\n              name: f.name,\n              type: f.type\n            };\n          })\n        }\n      };\n      return [event.name, IdlCoder.typeDefLayout(eventTypeDef, idl.types)];\n    });\n    // @ts-ignore\n    this.layouts = new Map(layouts);\n    this.discriminators = new Map(idl.events === undefined ? [] : idl.events.map(function (e) {\n      return [base64.fromByteArray(eventDiscriminator(e.name)), e.name];\n    }));\n  }\n  _createClass(EventCoder, [{\n    key: \"decode\",\n    value: function decode(log) {\n      var logArr;\n      // This will throw if log length is not a multiple of 4.\n      try {\n        logArr = Buffer.from(base64.toByteArray(log));\n      } catch (e) {\n        return null;\n      }\n      var disc = base64.fromByteArray(logArr.slice(0, 8));\n      // Only deserialize if the discriminator implies a proper event.\n      var eventName = this.discriminators.get(disc);\n      if (eventName === undefined) {\n        return null;\n      }\n      var layout = this.layouts.get(eventName);\n      if (!layout) {\n        throw new Error(\"Unknown event: \".concat(eventName));\n      }\n      var data = layout.decode(logArr.slice(8));\n      return {\n        data: data,\n        name: eventName\n      };\n    }\n  }]);\n  return EventCoder;\n}();\nexport function eventDiscriminator(name) {\n  return Buffer.from(sha256.digest(\"event:\".concat(name))).slice(0, 8);\n}","map":{"version":3,"names":["base64","sha256","IdlCoder","EventCoder","idl","_classCallCheck","events","undefined","layouts","Map","map","event","eventTypeDef","name","type","kind","fields","f","typeDefLayout","types","discriminators","e","fromByteArray","eventDiscriminator","_createClass","key","value","decode","log","logArr","Buffer","from","toByteArray","disc","slice","eventName","get","layout","Error","concat","data","digest"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/coder/event.ts"],"sourcesContent":["import * as base64 from \"base64-js\";\nimport { Layout } from \"buffer-layout\";\nimport { sha256 } from \"js-sha256\";\nimport { Idl, IdlEvent, IdlTypeDef } from \"../idl\";\nimport { Event, EventData } from \"../program/event\";\nimport { IdlCoder } from \"./idl\";\n\nexport class EventCoder {\n  /**\n   * Maps account type identifier to a layout.\n   */\n  private layouts: Map<string, Layout>;\n\n  /**\n   * Maps base64 encoded event discriminator to event name.\n   */\n  private discriminators: Map<string, string>;\n\n  public constructor(idl: Idl) {\n    if (idl.events === undefined) {\n      this.layouts = new Map();\n      return;\n    }\n    const layouts = idl.events.map((event) => {\n      let eventTypeDef: IdlTypeDef = {\n        name: event.name,\n        type: {\n          kind: \"struct\",\n          fields: event.fields.map((f) => {\n            return { name: f.name, type: f.type };\n          }),\n        },\n      };\n      return [event.name, IdlCoder.typeDefLayout(eventTypeDef, idl.types)];\n    });\n    // @ts-ignore\n    this.layouts = new Map(layouts);\n\n    this.discriminators = new Map<string, string>(\n      idl.events === undefined\n        ? []\n        : idl.events.map((e) => [\n            base64.fromByteArray(eventDiscriminator(e.name)),\n            e.name,\n          ])\n    );\n  }\n\n  public decode<E extends IdlEvent = IdlEvent, T = Record<string, never>>(\n    log: string\n  ): Event<E, T> | null {\n    let logArr: Buffer;\n    // This will throw if log length is not a multiple of 4.\n    try {\n      logArr = Buffer.from(base64.toByteArray(log));\n    } catch (e) {\n      return null;\n    }\n    const disc = base64.fromByteArray(logArr.slice(0, 8));\n\n    // Only deserialize if the discriminator implies a proper event.\n    const eventName = this.discriminators.get(disc);\n    if (eventName === undefined) {\n      return null;\n    }\n\n    const layout = this.layouts.get(eventName);\n    if (!layout) {\n      throw new Error(`Unknown event: ${eventName}`);\n    }\n    const data = layout.decode(logArr.slice(8)) as EventData<\n      E[\"fields\"][number],\n      T\n    >;\n    return { data, name: eventName };\n  }\n}\n\nexport function eventDiscriminator(name: string): Buffer {\n  return Buffer.from(sha256.digest(`event:${name}`)).slice(0, 8);\n}\n"],"mappings":";;AAAA,OAAO,KAAKA,MAAM,MAAM,WAAW;AAEnC,SAASC,MAAM,QAAQ,WAAW;AAGlC,SAASC,QAAQ,QAAQ,OAAO;AAEhC,WAAaC,UAAU;EAWrB,SAAAA,WAAmBC,GAAQ;IAAAC,eAAA,OAAAF,UAAA;IACzB,IAAIC,GAAG,CAACE,MAAM,KAAKC,SAAS,EAAE;MAC5B,IAAI,CAACC,OAAO,GAAG,IAAIC,GAAG,EAAE;MACxB;;IAEF,IAAMD,OAAO,GAAGJ,GAAG,CAACE,MAAM,CAACI,GAAG,CAAC,UAACC,KAAK,EAAI;MACvC,IAAIC,YAAY,GAAe;QAC7BC,IAAI,EAAEF,KAAK,CAACE,IAAI;QAChBC,IAAI,EAAE;UACJC,IAAI,EAAE,QAAQ;UACdC,MAAM,EAAEL,KAAK,CAACK,MAAM,CAACN,GAAG,CAAC,UAACO,CAAC,EAAI;YAC7B,OAAO;cAAEJ,IAAI,EAAEI,CAAC,CAACJ,IAAI;cAAEC,IAAI,EAAEG,CAAC,CAACH;YAAI,CAAE;UACvC,CAAC;;OAEJ;MACD,OAAO,CAACH,KAAK,CAACE,IAAI,EAAEX,QAAQ,CAACgB,aAAa,CAACN,YAAY,EAAER,GAAG,CAACe,KAAK,CAAC,CAAC;IACtE,CAAC,CAAC;IACF;IACA,IAAI,CAACX,OAAO,GAAG,IAAIC,GAAG,CAACD,OAAO,CAAC;IAE/B,IAAI,CAACY,cAAc,GAAG,IAAIX,GAAG,CAC3BL,GAAG,CAACE,MAAM,KAAKC,SAAS,GACpB,EAAE,GACFH,GAAG,CAACE,MAAM,CAACI,GAAG,CAAC,UAACW,CAAC;MAAA,OAAK,CACpBrB,MAAM,CAACsB,aAAa,CAACC,kBAAkB,CAACF,CAAC,CAACR,IAAI,CAAC,CAAC,EAChDQ,CAAC,CAACR,IAAI,CACP;IAAA,EAAC,CACP;EACH;EAACW,YAAA,CAAArB,UAAA;IAAAsB,GAAA;IAAAC,KAAA,EAEM,SAAAC,OACLC,GAAW;MAEX,IAAIC,MAAc;MAClB;MACA,IAAI;QACFA,MAAM,GAAGC,MAAM,CAACC,IAAI,CAAC/B,MAAM,CAACgC,WAAW,CAACJ,GAAG,CAAC,CAAC;OAC9C,CAAC,OAAOP,CAAC,EAAE;QACV,OAAO,IAAI;;MAEb,IAAMY,IAAI,GAAGjC,MAAM,CAACsB,aAAa,CAACO,MAAM,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAErD;MACA,IAAMC,SAAS,GAAG,IAAI,CAACf,cAAc,CAACgB,GAAG,CAACH,IAAI,CAAC;MAC/C,IAAIE,SAAS,KAAK5B,SAAS,EAAE;QAC3B,OAAO,IAAI;;MAGb,IAAM8B,MAAM,GAAG,IAAI,CAAC7B,OAAO,CAAC4B,GAAG,CAACD,SAAS,CAAC;MAC1C,IAAI,CAACE,MAAM,EAAE;QACX,MAAM,IAAIC,KAAK,mBAAAC,MAAA,CAAmBJ,SAAS,CAAE,CAAC;;MAEhD,IAAMK,IAAI,GAAGH,MAAM,CAACV,MAAM,CAACE,MAAM,CAACK,KAAK,CAAC,CAAC,CAAC,CAGzC;MACD,OAAO;QAAEM,IAAI,EAAJA,IAAI;QAAE3B,IAAI,EAAEsB;MAAS,CAAE;IAClC;EAAC;EAAA,OAAAhC,UAAA;AAAA;AAGH,OAAM,SAAUoB,kBAAkBA,CAACV,IAAY;EAC7C,OAAOiB,MAAM,CAACC,IAAI,CAAC9B,MAAM,CAACwC,MAAM,UAAAF,MAAA,CAAU1B,IAAI,CAAE,CAAC,CAAC,CAACqB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;AAChE"},"metadata":{},"sourceType":"module","externalDependencies":[]}