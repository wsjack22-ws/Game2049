{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.timeSince = exports.inMilliseconds = exports.Duration = void 0;\n/**\n * Common duration constants, in milliseconds.\n */\nvar Duration;\n(function (Duration) {\n  /**\n   * A millisecond.\n   */\n  Duration[Duration[\"Millisecond\"] = 1] = \"Millisecond\";\n  /**\n   * A second, in milliseconds.\n   */\n  Duration[Duration[\"Second\"] = 1000] = \"Second\";\n  /**\n   * A minute, in milliseconds.\n   */\n  Duration[Duration[\"Minute\"] = 60000] = \"Minute\";\n  /**\n   * An hour, in milliseconds.\n   */\n  Duration[Duration[\"Hour\"] = 3600000] = \"Hour\";\n  /**\n   * A day, in milliseconds.\n   */\n  Duration[Duration[\"Day\"] = 86400000] = \"Day\";\n  /**\n   * A week, in milliseconds.\n   */\n  Duration[Duration[\"Week\"] = 604800000] = \"Week\";\n  /**\n   * A year, in milliseconds.\n   */\n  Duration[Duration[\"Year\"] = 31536000000] = \"Year\";\n})(Duration = exports.Duration || (exports.Duration = {}));\nconst isNonNegativeInteger = number => Number.isInteger(number) && number >= 0;\nconst assertIsNonNegativeInteger = (number, name) => {\n  if (!isNonNegativeInteger(number)) {\n    throw new Error(`\"${name}\" must be a non-negative integer. Received: \"${number}\".`);\n  }\n};\n/**\n * Calculates the millisecond value of the specified number of units of time.\n *\n * @param count - The number of units of time.\n * @param duration - The unit of time to count.\n * @returns The count multiplied by the specified duration.\n */\nfunction inMilliseconds(count, duration) {\n  assertIsNonNegativeInteger(count, 'count');\n  return count * duration;\n}\nexports.inMilliseconds = inMilliseconds;\n/**\n * Gets the milliseconds since a particular Unix epoch timestamp.\n *\n * @param timestamp - A Unix millisecond timestamp.\n * @returns The number of milliseconds elapsed since the specified timestamp.\n */\nfunction timeSince(timestamp) {\n  assertIsNonNegativeInteger(timestamp, 'timestamp');\n  return Date.now() - timestamp;\n}\nexports.timeSince = timeSince;","map":{"version":3,"names":["Duration","exports","isNonNegativeInteger","number","Number","isInteger","assertIsNonNegativeInteger","name","Error","inMilliseconds","count","duration","timeSince","timestamp","Date","now"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@metamask/utils/src/time.ts"],"sourcesContent":["/**\n * Common duration constants, in milliseconds.\n */\nexport enum Duration {\n  /**\n   * A millisecond.\n   */\n  Millisecond = 1,\n\n  /**\n   * A second, in milliseconds.\n   */\n  Second = 1000, // Millisecond * 1000\n\n  /**\n   * A minute, in milliseconds.\n   */\n  Minute = 60_000, // Second * 60\n\n  /**\n   * An hour, in milliseconds.\n   */\n  Hour = 3_600_000, // Minute * 60\n\n  /**\n   * A day, in milliseconds.\n   */\n  Day = 86_400_000, // Hour * 24\n\n  /**\n   * A week, in milliseconds.\n   */\n  Week = 604_800_000, // Day * 7\n\n  /**\n   * A year, in milliseconds.\n   */\n  Year = 31_536_000_000, // Day * 365\n}\n\nconst isNonNegativeInteger = (number: number) =>\n  Number.isInteger(number) && number >= 0;\n\nconst assertIsNonNegativeInteger = (number: number, name: string) => {\n  if (!isNonNegativeInteger(number)) {\n    throw new Error(\n      `\"${name}\" must be a non-negative integer. Received: \"${number}\".`,\n    );\n  }\n};\n\n/**\n * Calculates the millisecond value of the specified number of units of time.\n *\n * @param count - The number of units of time.\n * @param duration - The unit of time to count.\n * @returns The count multiplied by the specified duration.\n */\nexport function inMilliseconds(count: number, duration: Duration): number {\n  assertIsNonNegativeInteger(count, 'count');\n  return count * duration;\n}\n\n/**\n * Gets the milliseconds since a particular Unix epoch timestamp.\n *\n * @param timestamp - A Unix millisecond timestamp.\n * @returns The number of milliseconds elapsed since the specified timestamp.\n */\nexport function timeSince(timestamp: number): number {\n  assertIsNonNegativeInteger(timestamp, 'timestamp');\n  return Date.now() - timestamp;\n}\n"],"mappings":";;;;;;AAAA;;;AAGA,IAAYA,QAmCX;AAnCD,WAAYA,QAAQ;EAClB;;;EAGAA,QAAA,CAAAA,QAAA,oCAAe;EAEf;;;EAGAA,QAAA,CAAAA,QAAA,6BAAa;EAEb;;;EAGAA,QAAA,CAAAA,QAAA,8BAAe;EAEf;;;EAGAA,QAAA,CAAAA,QAAA,4BAAgB;EAEhB;;;EAGAA,QAAA,CAAAA,QAAA,2BAAgB;EAEhB;;;EAGAA,QAAA,CAAAA,QAAA,8BAAkB;EAElB;;;EAGAA,QAAA,CAAAA,QAAA,gCAAqB;AACvB,CAAC,EAnCWA,QAAQ,GAARC,OAAA,CAAAD,QAAQ,KAARC,OAAA,CAAAD,QAAQ;AAqCpB,MAAME,oBAAoB,GAAIC,MAAc,IAC1CC,MAAM,CAACC,SAAS,CAACF,MAAM,CAAC,IAAIA,MAAM,IAAI,CAAC;AAEzC,MAAMG,0BAA0B,GAAGA,CAACH,MAAc,EAAEI,IAAY,KAAI;EAClE,IAAI,CAACL,oBAAoB,CAACC,MAAM,CAAC,EAAE;IACjC,MAAM,IAAIK,KAAK,CACb,IAAID,IAAI,gDAAgDJ,MAAM,IAAI,CACnE;;AAEL,CAAC;AAED;;;;;;;AAOA,SAAgBM,cAAcA,CAACC,KAAa,EAAEC,QAAkB;EAC9DL,0BAA0B,CAACI,KAAK,EAAE,OAAO,CAAC;EAC1C,OAAOA,KAAK,GAAGC,QAAQ;AACzB;AAHAV,OAAA,CAAAQ,cAAA,GAAAA,cAAA;AAKA;;;;;;AAMA,SAAgBG,SAASA,CAACC,SAAiB;EACzCP,0BAA0B,CAACO,SAAS,EAAE,WAAW,CAAC;EAClD,OAAOC,IAAI,CAACC,GAAG,EAAE,GAAGF,SAAS;AAC/B;AAHAZ,OAAA,CAAAW,SAAA,GAAAA,SAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}