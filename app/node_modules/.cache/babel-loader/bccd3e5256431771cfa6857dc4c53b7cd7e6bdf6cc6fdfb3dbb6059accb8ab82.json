{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EthereumProviderError = exports.JsonRpcError = void 0;\nconst utils_1 = require(\"@metamask/utils\");\nconst fast_safe_stringify_1 = __importDefault(require(\"fast-safe-stringify\"));\nconst utils_2 = require(\"./utils\");\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n *\n * Permits any integer error code.\n */\nclass JsonRpcError extends Error {\n  constructor(code, message, data) {\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a non-empty string.');\n    }\n    super(message);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n  /**\n   * Get the error as JSON-serializable object.\n   *\n   * @returns A plain object with all public class properties.\n   */\n  serialize() {\n    const serialized = {\n      code: this.code,\n      message: this.message\n    };\n    if (this.data !== undefined) {\n      // `this.data` is not guaranteed to be a plain object, but this simplifies\n      // the type guard below. We can safely cast it because we know it's a\n      // JSON-serializable value.\n      serialized.data = this.data;\n      if ((0, utils_1.isPlainObject)(this.data)) {\n        serialized.data.cause = (0, utils_2.serializeCause)(this.data.cause);\n      }\n    }\n    if (this.stack) {\n      serialized.stack = this.stack;\n    }\n    return serialized;\n  }\n  /**\n   * Get a string representation of the serialized error, omitting any circular\n   * references.\n   *\n   * @returns A string representation of the serialized error.\n   */\n  toString() {\n    return (0, fast_safe_stringify_1.default)(this.serialize(), stringifyReplacer, 2);\n  }\n}\nexports.JsonRpcError = JsonRpcError;\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nclass EthereumProviderError extends JsonRpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   *\n   * @param code - The JSON-RPC error code. Must be an integer in the\n   * `1000 <= n <= 4999` range.\n   * @param message - The JSON-RPC error message.\n   * @param data - Optional data to include in the error.\n   */\n  constructor(code, message, data) {\n    if (!isValidEthProviderCode(code)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    super(code, message, data);\n  }\n}\nexports.EthereumProviderError = EthereumProviderError;\n/**\n * Check if the given code is a valid JSON-RPC error code.\n *\n * @param code - The code to check.\n * @returns Whether the code is valid.\n */\nfunction isValidEthProviderCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\n/**\n * A JSON replacer function that omits circular references.\n *\n * @param _ - The key being replaced.\n * @param value - The value being replaced.\n * @returns The value to use in place of the original value.\n */\nfunction stringifyReplacer(_, value) {\n  if (value === '[Circular]') {\n    return undefined;\n  }\n  return value;\n}","map":{"version":3,"names":["utils_1","require","fast_safe_stringify_1","__importDefault","utils_2","JsonRpcError","Error","constructor","code","message","data","Number","isInteger","undefined","serialize","serialized","isPlainObject","cause","serializeCause","stack","toString","default","stringifyReplacer","exports","EthereumProviderError","isValidEthProviderCode","_","value"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@metamask/rpc-errors/src/classes.ts"],"sourcesContent":["import {\n  isPlainObject,\n  Json,\n  JsonRpcError as SerializedJsonRpcError,\n} from '@metamask/utils';\nimport safeStringify from 'fast-safe-stringify';\n\nimport { DataWithOptionalCause, serializeCause } from './utils';\n\nexport type { SerializedJsonRpcError };\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n *\n * Permits any integer error code.\n */\nexport class JsonRpcError<T extends DataWithOptionalCause> extends Error {\n  public code: number;\n\n  public data?: T;\n\n  constructor(code: number, message: string, data?: T) {\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a non-empty string.');\n    }\n\n    super(message);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  /**\n   * Get the error as JSON-serializable object.\n   *\n   * @returns A plain object with all public class properties.\n   */\n  serialize(): SerializedJsonRpcError {\n    const serialized: SerializedJsonRpcError = {\n      code: this.code,\n      message: this.message,\n    };\n\n    if (this.data !== undefined) {\n      // `this.data` is not guaranteed to be a plain object, but this simplifies\n      // the type guard below. We can safely cast it because we know it's a\n      // JSON-serializable value.\n      serialized.data = this.data as { [key: string]: Json };\n\n      if (isPlainObject(this.data)) {\n        serialized.data.cause = serializeCause(this.data.cause);\n      }\n    }\n\n    if (this.stack) {\n      serialized.stack = this.stack;\n    }\n\n    return serialized;\n  }\n\n  /**\n   * Get a string representation of the serialized error, omitting any circular\n   * references.\n   *\n   * @returns A string representation of the serialized error.\n   */\n  toString(): string {\n    return safeStringify(this.serialize(), stringifyReplacer, 2);\n  }\n}\n\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nexport class EthereumProviderError<\n  T extends DataWithOptionalCause,\n> extends JsonRpcError<T> {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   *\n   * @param code - The JSON-RPC error code. Must be an integer in the\n   * `1000 <= n <= 4999` range.\n   * @param message - The JSON-RPC error message.\n   * @param data - Optional data to include in the error.\n   */\n  constructor(code: number, message: string, data?: T) {\n    if (!isValidEthProviderCode(code)) {\n      throw new Error(\n        '\"code\" must be an integer such that: 1000 <= code <= 4999',\n      );\n    }\n\n    super(code, message, data);\n  }\n}\n\n/**\n * Check if the given code is a valid JSON-RPC error code.\n *\n * @param code - The code to check.\n * @returns Whether the code is valid.\n */\nfunction isValidEthProviderCode(code: number): boolean {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\n\n/**\n * A JSON replacer function that omits circular references.\n *\n * @param _ - The key being replaced.\n * @param value - The value being replaced.\n * @returns The value to use in place of the original value.\n */\nfunction stringifyReplacer(_: unknown, value: unknown): unknown {\n  if (value === '[Circular]') {\n    return undefined;\n  }\n\n  return value;\n}\n"],"mappings":";;;;;;;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AAKA,MAAAC,qBAAA,GAAAC,eAAA,CAAAF,OAAA;AAEA,MAAAG,OAAA,GAAAH,OAAA;AAIA;;;;;;AAMA,MAAaI,YAA8C,SAAQC,KAAK;EAKtEC,YAAYC,IAAY,EAAEC,OAAe,EAAEC,IAAQ;IACjD,IAAI,CAACC,MAAM,CAACC,SAAS,CAACJ,IAAI,CAAC,EAAE;MAC3B,MAAM,IAAIF,KAAK,CAAC,4BAA4B,CAAC;;IAG/C,IAAI,CAACG,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;MAC3C,MAAM,IAAIH,KAAK,CAAC,uCAAuC,CAAC;;IAG1D,KAAK,CAACG,OAAO,CAAC;IACd,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAIE,IAAI,KAAKG,SAAS,EAAE;MACtB,IAAI,CAACH,IAAI,GAAGA,IAAI;;EAEpB;EAEA;;;;;EAKAI,SAASA,CAAA;IACP,MAAMC,UAAU,GAA2B;MACzCP,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,OAAO,EAAE,IAAI,CAACA;KACf;IAED,IAAI,IAAI,CAACC,IAAI,KAAKG,SAAS,EAAE;MAC3B;MACA;MACA;MACAE,UAAU,CAACL,IAAI,GAAG,IAAI,CAACA,IAA+B;MAEtD,IAAI,IAAAV,OAAA,CAAAgB,aAAa,EAAC,IAAI,CAACN,IAAI,CAAC,EAAE;QAC5BK,UAAU,CAACL,IAAI,CAACO,KAAK,GAAG,IAAAb,OAAA,CAAAc,cAAc,EAAC,IAAI,CAACR,IAAI,CAACO,KAAK,CAAC;;;IAI3D,IAAI,IAAI,CAACE,KAAK,EAAE;MACdJ,UAAU,CAACI,KAAK,GAAG,IAAI,CAACA,KAAK;;IAG/B,OAAOJ,UAAU;EACnB;EAEA;;;;;;EAMAK,QAAQA,CAAA;IACN,OAAO,IAAAlB,qBAAA,CAAAmB,OAAa,EAAC,IAAI,CAACP,SAAS,EAAE,EAAEQ,iBAAiB,EAAE,CAAC,CAAC;EAC9D;;AA1DFC,OAAA,CAAAlB,YAAA,GAAAA,YAAA;AA6DA;;;;AAIA,MAAamB,qBAEX,SAAQnB,YAAe;EACvB;;;;;;;;EAQAE,YAAYC,IAAY,EAAEC,OAAe,EAAEC,IAAQ;IACjD,IAAI,CAACe,sBAAsB,CAACjB,IAAI,CAAC,EAAE;MACjC,MAAM,IAAIF,KAAK,CACb,2DAA2D,CAC5D;;IAGH,KAAK,CAACE,IAAI,EAAEC,OAAO,EAAEC,IAAI,CAAC;EAC5B;;AAnBFa,OAAA,CAAAC,qBAAA,GAAAA,qBAAA;AAsBA;;;;;;AAMA,SAASC,sBAAsBA,CAACjB,IAAY;EAC1C,OAAOG,MAAM,CAACC,SAAS,CAACJ,IAAI,CAAC,IAAIA,IAAI,IAAI,IAAI,IAAIA,IAAI,IAAI,IAAI;AAC/D;AAEA;;;;;;;AAOA,SAASc,iBAAiBA,CAACI,CAAU,EAAEC,KAAc;EACnD,IAAIA,KAAK,KAAK,YAAY,EAAE;IAC1B,OAAOd,SAAS;;EAGlB,OAAOc,KAAK;AACd"},"metadata":{},"sourceType":"script","externalDependencies":[]}