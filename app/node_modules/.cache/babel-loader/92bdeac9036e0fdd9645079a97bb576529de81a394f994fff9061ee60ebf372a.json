{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nconst bytes_1 = require(\"./bytes\");\nconst constants_1 = require(\"./constants\");\nconst helpers_1 = require(\"./helpers\");\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */\nfunction ecsign(msgHash, privateKey, chainId) {\n  const sig = secp256k1_1.secp256k1.sign(msgHash, privateKey);\n  const buf = sig.toCompactRawBytes();\n  const r = Buffer.from(buf.slice(0, 32));\n  const s = Buffer.from(buf.slice(32, 64));\n  const v = chainId === undefined ? BigInt(sig.recovery + 27) : BigInt(sig.recovery + 35) + BigInt(chainId) * BigInt(2);\n  return {\n    r,\n    s,\n    v\n  };\n}\nexports.ecsign = ecsign;\nfunction calculateSigRecovery(v, chainId) {\n  if (v === BigInt(0) || v === BigInt(1)) return v;\n  if (chainId === undefined) {\n    return v - BigInt(27);\n  }\n  return v - (chainId * BigInt(2) + BigInt(35));\n}\nfunction isValidSigRecovery(recovery) {\n  return recovery === BigInt(0) || recovery === BigInt(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nconst ecrecover = function (msgHash, v, r, s, chainId) {\n  const signature = Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  const sig = secp256k1_1.secp256k1.Signature.fromCompact(signature).addRecoveryBit(Number(recovery));\n  const senderPubKey = sig.recoverPublicKey(msgHash);\n  return Buffer.from(senderPubKey.toRawBytes(false).slice(1));\n};\nexports.ecrecover = ecrecover;\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toRpcSig = function (v, r, s, chainId) {\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));\n};\nexports.toRpcSig = toRpcSig;\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toCompactSig = function (v, r, s, chainId) {\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  let ss = s;\n  if (v > BigInt(28) && v % BigInt(2) === BigInt(1) || v === BigInt(1) || v === BigInt(28)) {\n    ss = Buffer.from(s);\n    ss[0] |= 0x80;\n  }\n  return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));\n};\nexports.toCompactSig = toCompactSig;\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nconst fromRpcSig = function (sig) {\n  const buf = (0, bytes_1.toBuffer)(sig);\n  let r;\n  let s;\n  let v;\n  if (buf.length >= 65) {\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = (0, bytes_1.bufferToBigInt)(buf.slice(64));\n  } else if (buf.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = BigInt((0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7);\n    s[0] &= 0x7f;\n  } else {\n    throw new Error('Invalid signature length');\n  }\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v = v + BigInt(27);\n  }\n  return {\n    v,\n    r,\n    s\n  };\n};\nexports.fromRpcSig = fromRpcSig;\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nconst isValidSignature = function (v, r, s, homesteadOrLater = true, chainId) {\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false;\n  }\n  const rBigInt = (0, bytes_1.bufferToBigInt)(r);\n  const sBigInt = (0, bytes_1.bufferToBigInt)(s);\n  if (rBigInt === BigInt(0) || rBigInt >= constants_1.SECP256K1_ORDER || sBigInt === BigInt(0) || sBigInt >= constants_1.SECP256K1_ORDER) {\n    return false;\n  }\n  if (homesteadOrLater && sBigInt >= constants_1.SECP256K1_ORDER_DIV_2) {\n    return false;\n  }\n  return true;\n};\nexports.isValidSignature = isValidSignature;\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nconst hashPersonalMessage = function (message) {\n  (0, helpers_1.assertIsBuffer)(message);\n  const prefix = Buffer.from(`\\u0019Ethereum Signed Message:\\n${message.length}`, 'utf-8');\n  return Buffer.from((0, keccak_1.keccak256)(Buffer.concat([prefix, message])));\n};\nexports.hashPersonalMessage = hashPersonalMessage;","map":{"version":3,"names":["keccak_1","require","secp256k1_1","bytes_1","constants_1","helpers_1","ecsign","msgHash","privateKey","chainId","sig","secp256k1","sign","buf","toCompactRawBytes","r","Buffer","from","slice","s","v","undefined","BigInt","recovery","exports","calculateSigRecovery","isValidSigRecovery","ecrecover","signature","concat","setLengthLeft","Error","Signature","fromCompact","addRecoveryBit","Number","senderPubKey","recoverPublicKey","toRawBytes","toRpcSig","bufferToHex","toBuffer","toCompactSig","ss","fromRpcSig","length","bufferToBigInt","bufferToInt","isValidSignature","homesteadOrLater","rBigInt","sBigInt","SECP256K1_ORDER","SECP256K1_ORDER_DIV_2","hashPersonalMessage","message","assertIsBuffer","prefix","keccak256"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@ethereumjs/util/src/signature.ts"],"sourcesContent":["import { keccak256 } from 'ethereum-cryptography/keccak'\nimport { secp256k1 } from 'ethereum-cryptography/secp256k1'\n\nimport { bufferToBigInt, bufferToHex, bufferToInt, setLengthLeft, toBuffer } from './bytes'\nimport { SECP256K1_ORDER, SECP256K1_ORDER_DIV_2 } from './constants'\nimport { assertIsBuffer } from './helpers'\n\nexport interface ECDSASignature {\n  v: bigint\n  r: Buffer\n  s: Buffer\n}\n\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */\nexport function ecsign(msgHash: Buffer, privateKey: Buffer, chainId?: bigint): ECDSASignature {\n  const sig = secp256k1.sign(msgHash, privateKey)\n  const buf = sig.toCompactRawBytes()\n  const r = Buffer.from(buf.slice(0, 32))\n  const s = Buffer.from(buf.slice(32, 64))\n\n  const v =\n    chainId === undefined\n      ? BigInt(sig.recovery! + 27)\n      : BigInt(sig.recovery! + 35) + BigInt(chainId) * BigInt(2)\n\n  return { r, s, v }\n}\n\nfunction calculateSigRecovery(v: bigint, chainId?: bigint): bigint {\n  if (v === BigInt(0) || v === BigInt(1)) return v\n\n  if (chainId === undefined) {\n    return v - BigInt(27)\n  }\n  return v - (chainId * BigInt(2) + BigInt(35))\n}\n\nfunction isValidSigRecovery(recovery: bigint): boolean {\n  return recovery === BigInt(0) || recovery === BigInt(1)\n}\n\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nexport const ecrecover = function (\n  msgHash: Buffer,\n  v: bigint,\n  r: Buffer,\n  s: Buffer,\n  chainId?: bigint\n): Buffer {\n  const signature = Buffer.concat([setLengthLeft(r, 32), setLengthLeft(s, 32)], 64)\n  const recovery = calculateSigRecovery(v, chainId)\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value')\n  }\n\n  const sig = secp256k1.Signature.fromCompact(signature).addRecoveryBit(Number(recovery))\n  const senderPubKey = sig.recoverPublicKey(msgHash)\n  return Buffer.from(senderPubKey.toRawBytes(false).slice(1))\n}\n\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nexport const toRpcSig = function (v: bigint, r: Buffer, s: Buffer, chainId?: bigint): string {\n  const recovery = calculateSigRecovery(v, chainId)\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value')\n  }\n\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  return bufferToHex(Buffer.concat([setLengthLeft(r, 32), setLengthLeft(s, 32), toBuffer(v)]))\n}\n\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nexport const toCompactSig = function (v: bigint, r: Buffer, s: Buffer, chainId?: bigint): string {\n  const recovery = calculateSigRecovery(v, chainId)\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value')\n  }\n\n  let ss = s\n  if ((v > BigInt(28) && v % BigInt(2) === BigInt(1)) || v === BigInt(1) || v === BigInt(28)) {\n    ss = Buffer.from(s)\n    ss[0] |= 0x80\n  }\n\n  return bufferToHex(Buffer.concat([setLengthLeft(r, 32), setLengthLeft(ss, 32)]))\n}\n\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nexport const fromRpcSig = function (sig: string): ECDSASignature {\n  const buf: Buffer = toBuffer(sig)\n\n  let r: Buffer\n  let s: Buffer\n  let v: bigint\n  if (buf.length >= 65) {\n    r = buf.slice(0, 32)\n    s = buf.slice(32, 64)\n    v = bufferToBigInt(buf.slice(64))\n  } else if (buf.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = buf.slice(0, 32)\n    s = buf.slice(32, 64)\n    v = BigInt(bufferToInt(buf.slice(32, 33)) >> 7)\n    s[0] &= 0x7f\n  } else {\n    throw new Error('Invalid signature length')\n  }\n\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v = v + BigInt(27)\n  }\n\n  return {\n    v,\n    r,\n    s,\n  }\n}\n\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nexport const isValidSignature = function (\n  v: bigint,\n  r: Buffer,\n  s: Buffer,\n  homesteadOrLater: boolean = true,\n  chainId?: bigint\n): boolean {\n  if (r.length !== 32 || s.length !== 32) {\n    return false\n  }\n\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false\n  }\n\n  const rBigInt = bufferToBigInt(r)\n  const sBigInt = bufferToBigInt(s)\n\n  if (\n    rBigInt === BigInt(0) ||\n    rBigInt >= SECP256K1_ORDER ||\n    sBigInt === BigInt(0) ||\n    sBigInt >= SECP256K1_ORDER\n  ) {\n    return false\n  }\n\n  if (homesteadOrLater && sBigInt >= SECP256K1_ORDER_DIV_2) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nexport const hashPersonalMessage = function (message: Buffer): Buffer {\n  assertIsBuffer(message)\n  const prefix = Buffer.from(`\\u0019Ethereum Signed Message:\\n${message.length}`, 'utf-8')\n  return Buffer.from(keccak256(Buffer.concat([prefix, message])))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}