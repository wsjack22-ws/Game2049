{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MAX_WITHDRAWALS_PER_PAYLOAD = exports.RLP_EMPTY_STRING = exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.SECP256K1_ORDER_DIV_2 = exports.SECP256K1_ORDER = exports.MAX_INTEGER_BIGINT = exports.MAX_INTEGER = exports.MAX_UINT64 = void 0;\nconst buffer_1 = require(\"buffer\");\nconst secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\n/**\n * 2^64-1\n */\nexports.MAX_UINT64 = BigInt('0xffffffffffffffff');\n/**\n * The max integer that the evm can handle (2^256-1)\n */\nexports.MAX_INTEGER = BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n/**\n * The max integer that the evm can handle (2^256-1) as a bigint\n * 2^256-1 equals to 340282366920938463463374607431768211455\n * We use literal value instead of calculated value for compatibility issue.\n */\nexports.MAX_INTEGER_BIGINT = BigInt('115792089237316195423570985008687907853269984665640564039457584007913129639935');\nexports.SECP256K1_ORDER = secp256k1_1.secp256k1.CURVE.n;\nexports.SECP256K1_ORDER_DIV_2 = secp256k1_1.secp256k1.CURVE.n / BigInt(2);\n/**\n * 2^256\n */\nexports.TWO_POW256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\n/**\n * Keccak-256 hash of null\n */\nexports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n/**\n * Keccak-256 hash of null\n */\nexports.KECCAK256_NULL = buffer_1.Buffer.from(exports.KECCAK256_NULL_S, 'hex');\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexports.KECCAK256_RLP_ARRAY = buffer_1.Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');\n/**\n * Keccak-256 hash of the RLP of null\n */\nexports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';\n/**\n * Keccak-256 hash of the RLP of null\n */\nexports.KECCAK256_RLP = buffer_1.Buffer.from(exports.KECCAK256_RLP_S, 'hex');\n/**\n *  RLP encoded empty string\n */\nexports.RLP_EMPTY_STRING = buffer_1.Buffer.from([0x80]);\nexports.MAX_WITHDRAWALS_PER_PAYLOAD = 16;","map":{"version":3,"names":["buffer_1","require","secp256k1_1","exports","MAX_UINT64","BigInt","MAX_INTEGER","MAX_INTEGER_BIGINT","SECP256K1_ORDER","secp256k1","CURVE","n","SECP256K1_ORDER_DIV_2","TWO_POW256","KECCAK256_NULL_S","KECCAK256_NULL","Buffer","from","KECCAK256_RLP_ARRAY_S","KECCAK256_RLP_ARRAY","KECCAK256_RLP_S","KECCAK256_RLP","RLP_EMPTY_STRING","MAX_WITHDRAWALS_PER_PAYLOAD"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@ethereumjs/util/src/constants.ts"],"sourcesContent":["import { Buffer } from 'buffer'\nimport { secp256k1 } from 'ethereum-cryptography/secp256k1'\n\n/**\n * 2^64-1\n */\nexport const MAX_UINT64 = BigInt('0xffffffffffffffff')\n\n/**\n * The max integer that the evm can handle (2^256-1)\n */\nexport const MAX_INTEGER = BigInt(\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n)\n\n/**\n * The max integer that the evm can handle (2^256-1) as a bigint\n * 2^256-1 equals to 340282366920938463463374607431768211455\n * We use literal value instead of calculated value for compatibility issue.\n */\nexport const MAX_INTEGER_BIGINT = BigInt(\n  '115792089237316195423570985008687907853269984665640564039457584007913129639935'\n)\n\nexport const SECP256K1_ORDER = secp256k1.CURVE.n\nexport const SECP256K1_ORDER_DIV_2 = secp256k1.CURVE.n / BigInt(2)\n\n/**\n * 2^256\n */\nexport const TWO_POW256 = BigInt(\n  '0x10000000000000000000000000000000000000000000000000000000000000000'\n)\n\n/**\n * Keccak-256 hash of null\n */\nexport const KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n\n/**\n * Keccak-256 hash of null\n */\nexport const KECCAK256_NULL = Buffer.from(KECCAK256_NULL_S, 'hex')\n\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexport const KECCAK256_RLP_ARRAY_S =\n  '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'\n\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexport const KECCAK256_RLP_ARRAY = Buffer.from(KECCAK256_RLP_ARRAY_S, 'hex')\n\n/**\n * Keccak-256 hash of the RLP of null\n */\nexport const KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'\n\n/**\n * Keccak-256 hash of the RLP of null\n */\nexport const KECCAK256_RLP = Buffer.from(KECCAK256_RLP_S, 'hex')\n\n/**\n *  RLP encoded empty string\n */\nexport const RLP_EMPTY_STRING = Buffer.from([0x80])\n\nexport const MAX_WITHDRAWALS_PER_PAYLOAD = 16\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,WAAA,GAAAD,OAAA;AAEA;;;AAGaE,OAAA,CAAAC,UAAU,GAAGC,MAAM,CAAC,oBAAoB,CAAC;AAEtD;;;AAGaF,OAAA,CAAAG,WAAW,GAAGD,MAAM,CAC/B,oEAAoE,CACrE;AAED;;;;;AAKaF,OAAA,CAAAI,kBAAkB,GAAGF,MAAM,CACtC,gFAAgF,CACjF;AAEYF,OAAA,CAAAK,eAAe,GAAGN,WAAA,CAAAO,SAAS,CAACC,KAAK,CAACC,CAAC;AACnCR,OAAA,CAAAS,qBAAqB,GAAGV,WAAA,CAAAO,SAAS,CAACC,KAAK,CAACC,CAAC,GAAGN,MAAM,CAAC,CAAC,CAAC;AAElE;;;AAGaF,OAAA,CAAAU,UAAU,GAAGR,MAAM,CAC9B,qEAAqE,CACtE;AAED;;;AAGaF,OAAA,CAAAW,gBAAgB,GAAG,kEAAkE;AAElG;;;AAGaX,OAAA,CAAAY,cAAc,GAAGf,QAAA,CAAAgB,MAAM,CAACC,IAAI,CAACd,OAAA,CAAAW,gBAAgB,EAAE,KAAK,CAAC;AAElE;;;AAGaX,OAAA,CAAAe,qBAAqB,GAChC,kEAAkE;AAEpE;;;AAGaf,OAAA,CAAAgB,mBAAmB,GAAGnB,QAAA,CAAAgB,MAAM,CAACC,IAAI,CAACd,OAAA,CAAAe,qBAAqB,EAAE,KAAK,CAAC;AAE5E;;;AAGaf,OAAA,CAAAiB,eAAe,GAAG,kEAAkE;AAEjG;;;AAGajB,OAAA,CAAAkB,aAAa,GAAGrB,QAAA,CAAAgB,MAAM,CAACC,IAAI,CAACd,OAAA,CAAAiB,eAAe,EAAE,KAAK,CAAC;AAEhE;;;AAGajB,OAAA,CAAAmB,gBAAgB,GAAGtB,QAAA,CAAAgB,MAAM,CAACC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;AAEtCd,OAAA,CAAAoB,2BAA2B,GAAG,EAAE"},"metadata":{},"sourceType":"script","externalDependencies":[]}