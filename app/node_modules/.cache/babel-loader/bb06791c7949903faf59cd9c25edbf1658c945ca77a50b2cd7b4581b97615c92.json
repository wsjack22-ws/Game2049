{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IdlCoder = void 0;\nconst camelcase_1 = __importDefault(require(\"camelcase\"));\nconst borsh = __importStar(require(\"@project-serum/borsh\"));\nconst error_js_1 = require(\"../../error.js\");\nclass IdlCoder {\n  static fieldLayout(field, types) {\n    const fieldName = field.name !== undefined ? (0, camelcase_1.default)(field.name) : undefined;\n    switch (field.type) {\n      case \"bool\":\n        {\n          return borsh.bool(fieldName);\n        }\n      case \"u8\":\n        {\n          return borsh.u8(fieldName);\n        }\n      case \"i8\":\n        {\n          return borsh.i8(fieldName);\n        }\n      case \"u16\":\n        {\n          return borsh.u16(fieldName);\n        }\n      case \"i16\":\n        {\n          return borsh.i16(fieldName);\n        }\n      case \"u32\":\n        {\n          return borsh.u32(fieldName);\n        }\n      case \"i32\":\n        {\n          return borsh.i32(fieldName);\n        }\n      case \"f32\":\n        {\n          return borsh.f32(fieldName);\n        }\n      case \"u64\":\n        {\n          return borsh.u64(fieldName);\n        }\n      case \"i64\":\n        {\n          return borsh.i64(fieldName);\n        }\n      case \"f64\":\n        {\n          return borsh.f64(fieldName);\n        }\n      case \"u128\":\n        {\n          return borsh.u128(fieldName);\n        }\n      case \"i128\":\n        {\n          return borsh.i128(fieldName);\n        }\n      case \"bytes\":\n        {\n          return borsh.vecU8(fieldName);\n        }\n      case \"string\":\n        {\n          return borsh.str(fieldName);\n        }\n      case \"publicKey\":\n        {\n          return borsh.publicKey(fieldName);\n        }\n      default:\n        {\n          if (\"vec\" in field.type) {\n            return borsh.vec(IdlCoder.fieldLayout({\n              name: undefined,\n              type: field.type.vec\n            }, types), fieldName);\n          } else if (\"option\" in field.type) {\n            return borsh.option(IdlCoder.fieldLayout({\n              name: undefined,\n              type: field.type.option\n            }, types), fieldName);\n          } else if (\"defined\" in field.type) {\n            const defined = field.type.defined;\n            // User defined type.\n            if (types === undefined) {\n              throw new error_js_1.IdlError(\"User defined types not provided\");\n            }\n            const filtered = types.filter(t => t.name === defined);\n            if (filtered.length !== 1) {\n              throw new error_js_1.IdlError(`Type not found: ${JSON.stringify(field)}`);\n            }\n            return IdlCoder.typeDefLayout(filtered[0], types, fieldName);\n          } else if (\"array\" in field.type) {\n            let arrayTy = field.type.array[0];\n            let arrayLen = field.type.array[1];\n            let innerLayout = IdlCoder.fieldLayout({\n              name: undefined,\n              type: arrayTy\n            }, types);\n            return borsh.array(innerLayout, arrayLen, fieldName);\n          } else {\n            throw new Error(`Not yet implemented: ${field}`);\n          }\n        }\n    }\n  }\n  static typeDefLayout(typeDef, types = [], name) {\n    if (typeDef.type.kind === \"struct\") {\n      const fieldLayouts = typeDef.type.fields.map(field => {\n        const x = IdlCoder.fieldLayout(field, types);\n        return x;\n      });\n      return borsh.struct(fieldLayouts, name);\n    } else if (typeDef.type.kind === \"enum\") {\n      let variants = typeDef.type.variants.map(variant => {\n        const name = (0, camelcase_1.default)(variant.name);\n        if (variant.fields === undefined) {\n          return borsh.struct([], name);\n        }\n        const fieldLayouts = variant.fields.map(f => {\n          if (!f.hasOwnProperty(\"name\")) {\n            throw new Error(\"Tuple enum variants not yet implemented.\");\n          }\n          // this typescript conversion is ok\n          // because if f were of type IdlType\n          // (that does not have a name property)\n          // the check before would've errored\n          return IdlCoder.fieldLayout(f, types);\n        });\n        return borsh.struct(fieldLayouts, name);\n      });\n      if (name !== undefined) {\n        // Buffer-layout lib requires the name to be null (on construction)\n        // when used as a field.\n        return borsh.rustEnum(variants).replicate(name);\n      }\n      return borsh.rustEnum(variants, name);\n    } else {\n      throw new Error(`Unknown type kint: ${typeDef}`);\n    }\n  }\n}\nexports.IdlCoder = IdlCoder;","map":{"version":3,"names":["camelcase_1","__importDefault","require","borsh","__importStar","error_js_1","IdlCoder","fieldLayout","field","types","fieldName","name","undefined","default","type","bool","u8","i8","u16","i16","u32","i32","f32","u64","i64","f64","u128","i128","vecU8","str","publicKey","vec","option","defined","IdlError","filtered","filter","t","length","JSON","stringify","typeDefLayout","arrayTy","array","arrayLen","innerLayout","Error","typeDef","kind","fieldLayouts","fields","map","x","struct","variants","variant","f","hasOwnProperty","rustEnum","replicate","exports"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/coder/borsh/idl.ts"],"sourcesContent":["import camelCase from \"camelcase\";\nimport { Layout } from \"buffer-layout\";\nimport * as borsh from \"@project-serum/borsh\";\nimport { IdlField, IdlTypeDef, IdlEnumVariant, IdlType } from \"../../idl.js\";\nimport { IdlError } from \"../../error.js\";\n\nexport class IdlCoder {\n  public static fieldLayout(\n    field: { name?: string } & Pick<IdlField, \"type\">,\n    types?: IdlTypeDef[]\n  ): Layout {\n    const fieldName =\n      field.name !== undefined ? camelCase(field.name) : undefined;\n    switch (field.type) {\n      case \"bool\": {\n        return borsh.bool(fieldName);\n      }\n      case \"u8\": {\n        return borsh.u8(fieldName);\n      }\n      case \"i8\": {\n        return borsh.i8(fieldName);\n      }\n      case \"u16\": {\n        return borsh.u16(fieldName);\n      }\n      case \"i16\": {\n        return borsh.i16(fieldName);\n      }\n      case \"u32\": {\n        return borsh.u32(fieldName);\n      }\n      case \"i32\": {\n        return borsh.i32(fieldName);\n      }\n      case \"f32\": {\n        return borsh.f32(fieldName);\n      }\n      case \"u64\": {\n        return borsh.u64(fieldName);\n      }\n      case \"i64\": {\n        return borsh.i64(fieldName);\n      }\n      case \"f64\": {\n        return borsh.f64(fieldName);\n      }\n      case \"u128\": {\n        return borsh.u128(fieldName);\n      }\n      case \"i128\": {\n        return borsh.i128(fieldName);\n      }\n      case \"bytes\": {\n        return borsh.vecU8(fieldName);\n      }\n      case \"string\": {\n        return borsh.str(fieldName);\n      }\n      case \"publicKey\": {\n        return borsh.publicKey(fieldName);\n      }\n      default: {\n        if (\"vec\" in field.type) {\n          return borsh.vec(\n            IdlCoder.fieldLayout(\n              {\n                name: undefined,\n                type: field.type.vec,\n              },\n              types\n            ),\n            fieldName\n          );\n        } else if (\"option\" in field.type) {\n          return borsh.option(\n            IdlCoder.fieldLayout(\n              {\n                name: undefined,\n                type: field.type.option,\n              },\n              types\n            ),\n            fieldName\n          );\n        } else if (\"defined\" in field.type) {\n          const defined = field.type.defined;\n          // User defined type.\n          if (types === undefined) {\n            throw new IdlError(\"User defined types not provided\");\n          }\n          const filtered = types.filter((t) => t.name === defined);\n          if (filtered.length !== 1) {\n            throw new IdlError(`Type not found: ${JSON.stringify(field)}`);\n          }\n          return IdlCoder.typeDefLayout(filtered[0], types, fieldName);\n        } else if (\"array\" in field.type) {\n          let arrayTy = field.type.array[0];\n          let arrayLen = field.type.array[1];\n          let innerLayout = IdlCoder.fieldLayout(\n            {\n              name: undefined,\n              type: arrayTy,\n            },\n            types\n          );\n          return borsh.array(innerLayout, arrayLen, fieldName);\n        } else {\n          throw new Error(`Not yet implemented: ${field}`);\n        }\n      }\n    }\n  }\n\n  public static typeDefLayout(\n    typeDef: IdlTypeDef,\n    types: IdlTypeDef[] = [],\n    name?: string\n  ): Layout {\n    if (typeDef.type.kind === \"struct\") {\n      const fieldLayouts = typeDef.type.fields.map((field) => {\n        const x = IdlCoder.fieldLayout(field, types);\n        return x;\n      });\n      return borsh.struct(fieldLayouts, name);\n    } else if (typeDef.type.kind === \"enum\") {\n      let variants = typeDef.type.variants.map((variant: IdlEnumVariant) => {\n        const name = camelCase(variant.name);\n        if (variant.fields === undefined) {\n          return borsh.struct([], name);\n        }\n        const fieldLayouts = variant.fields.map((f: IdlField | IdlType) => {\n          if (!f.hasOwnProperty(\"name\")) {\n            throw new Error(\"Tuple enum variants not yet implemented.\");\n          }\n          // this typescript conversion is ok\n          // because if f were of type IdlType\n          // (that does not have a name property)\n          // the check before would've errored\n          return IdlCoder.fieldLayout(f as IdlField, types);\n        });\n        return borsh.struct(fieldLayouts, name);\n      });\n\n      if (name !== undefined) {\n        // Buffer-layout lib requires the name to be null (on construction)\n        // when used as a field.\n        return borsh.rustEnum(variants).replicate(name);\n      }\n\n      return borsh.rustEnum(variants, name);\n    } else {\n      throw new Error(`Unknown type kint: ${typeDef}`);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}