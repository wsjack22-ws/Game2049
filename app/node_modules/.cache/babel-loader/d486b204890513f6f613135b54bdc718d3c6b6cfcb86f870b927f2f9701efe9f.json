{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LangErrorMessage = exports.LangErrorCode = exports.translateError = exports.ProgramError = exports.AnchorError = exports.ProgramErrorStack = exports.IdlError = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst features = __importStar(require(\"./utils/features.js\"));\nclass IdlError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"IdlError\";\n  }\n}\nexports.IdlError = IdlError;\nclass ProgramErrorStack {\n  constructor(stack) {\n    this.stack = stack;\n  }\n  static parse(logs) {\n    var _a;\n    const programKeyRegex = /^Program (\\w*) invoke/;\n    const successRegex = /^Program \\w* success/;\n    const programStack = [];\n    for (let i = 0; i < logs.length; i++) {\n      if (successRegex.exec(logs[i])) {\n        programStack.pop();\n        continue;\n      }\n      const programKey = (_a = programKeyRegex.exec(logs[i])) === null || _a === void 0 ? void 0 : _a[1];\n      if (!programKey) {\n        continue;\n      }\n      programStack.push(new web3_js_1.PublicKey(programKey));\n    }\n    return new ProgramErrorStack(programStack);\n  }\n}\nexports.ProgramErrorStack = ProgramErrorStack;\nclass AnchorError extends Error {\n  constructor(errorCode, errorMessage, errorLogs, logs, origin, comparedValues) {\n    super(errorLogs.join(\"\\n\").replace(\"Program log: \", \"\"));\n    this.errorLogs = errorLogs;\n    this.logs = logs;\n    this.error = {\n      errorCode,\n      errorMessage,\n      comparedValues,\n      origin\n    };\n    this._programErrorStack = ProgramErrorStack.parse(logs);\n  }\n  static parse(logs) {\n    if (!logs) {\n      return null;\n    }\n    const anchorErrorLogIndex = logs.findIndex(log => log.startsWith(\"Program log: AnchorError\"));\n    if (anchorErrorLogIndex === -1) {\n      return null;\n    }\n    const anchorErrorLog = logs[anchorErrorLogIndex];\n    const errorLogs = [anchorErrorLog];\n    let comparedValues;\n    if (anchorErrorLogIndex + 1 < logs.length) {\n      // This catches the comparedValues where the following is logged\n      // <AnchorError>\n      // Left:\n      // <Pubkey>\n      // Right:\n      // <Pubkey>\n      if (logs[anchorErrorLogIndex + 1] === \"Program log: Left:\") {\n        const pubkeyRegex = /^Program log: (.*)$/;\n        const leftPubkey = pubkeyRegex.exec(logs[anchorErrorLogIndex + 2])[1];\n        const rightPubkey = pubkeyRegex.exec(logs[anchorErrorLogIndex + 4])[1];\n        comparedValues = [new web3_js_1.PublicKey(leftPubkey), new web3_js_1.PublicKey(rightPubkey)];\n        errorLogs.push(...logs.slice(anchorErrorLogIndex + 1, anchorErrorLogIndex + 5));\n      }\n      // This catches the comparedValues where the following is logged\n      // <AnchorError>\n      // Left: <value>\n      // Right: <value>\n      else if (logs[anchorErrorLogIndex + 1].startsWith(\"Program log: Left:\")) {\n        const valueRegex = /^Program log: (Left|Right): (.*)$/;\n        const leftValue = valueRegex.exec(logs[anchorErrorLogIndex + 1])[2];\n        const rightValue = valueRegex.exec(logs[anchorErrorLogIndex + 2])[2];\n        errorLogs.push(...logs.slice(anchorErrorLogIndex + 1, anchorErrorLogIndex + 3));\n        comparedValues = [leftValue, rightValue];\n      }\n    }\n    const regexNoInfo = /^Program log: AnchorError occurred\\. Error Code: (.*)\\. Error Number: (\\d*)\\. Error Message: (.*)\\./;\n    const noInfoAnchorErrorLog = regexNoInfo.exec(anchorErrorLog);\n    const regexFileLine = /^Program log: AnchorError thrown in (.*):(\\d*)\\. Error Code: (.*)\\. Error Number: (\\d*)\\. Error Message: (.*)\\./;\n    const fileLineAnchorErrorLog = regexFileLine.exec(anchorErrorLog);\n    const regexAccountName = /^Program log: AnchorError caused by account: (.*)\\. Error Code: (.*)\\. Error Number: (\\d*)\\. Error Message: (.*)\\./;\n    const accountNameAnchorErrorLog = regexAccountName.exec(anchorErrorLog);\n    if (noInfoAnchorErrorLog) {\n      const [errorCodeString, errorNumber, errorMessage] = noInfoAnchorErrorLog.slice(1, 4);\n      const errorCode = {\n        code: errorCodeString,\n        number: parseInt(errorNumber)\n      };\n      return new AnchorError(errorCode, errorMessage, errorLogs, logs, undefined, comparedValues);\n    } else if (fileLineAnchorErrorLog) {\n      const [file, line, errorCodeString, errorNumber, errorMessage] = fileLineAnchorErrorLog.slice(1, 6);\n      const errorCode = {\n        code: errorCodeString,\n        number: parseInt(errorNumber)\n      };\n      const fileLine = {\n        file,\n        line: parseInt(line)\n      };\n      return new AnchorError(errorCode, errorMessage, errorLogs, logs, fileLine, comparedValues);\n    } else if (accountNameAnchorErrorLog) {\n      const [accountName, errorCodeString, errorNumber, errorMessage] = accountNameAnchorErrorLog.slice(1, 5);\n      const origin = accountName;\n      const errorCode = {\n        code: errorCodeString,\n        number: parseInt(errorNumber)\n      };\n      return new AnchorError(errorCode, errorMessage, errorLogs, logs, origin, comparedValues);\n    } else {\n      return null;\n    }\n  }\n  get program() {\n    return this._programErrorStack.stack[this._programErrorStack.stack.length - 1];\n  }\n  get programErrorStack() {\n    return this._programErrorStack.stack;\n  }\n  toString() {\n    return this.message;\n  }\n}\nexports.AnchorError = AnchorError;\n// An error from a user defined program.\nclass ProgramError extends Error {\n  constructor(code, msg, logs) {\n    super();\n    this.code = code;\n    this.msg = msg;\n    this.logs = logs;\n    if (logs) {\n      this._programErrorStack = ProgramErrorStack.parse(logs);\n    }\n  }\n  static parse(err, idlErrors) {\n    const errString = err.toString();\n    // TODO: don't rely on the error string. web3.js should preserve the error\n    //       code information instead of giving us an untyped string.\n    let unparsedErrorCode;\n    if (errString.includes(\"custom program error:\")) {\n      let components = errString.split(\"custom program error: \");\n      if (components.length !== 2) {\n        return null;\n      } else {\n        unparsedErrorCode = components[1];\n      }\n    } else {\n      const matches = errString.match(/\"Custom\":([0-9]+)}/g);\n      if (!matches || matches.length > 1) {\n        return null;\n      }\n      unparsedErrorCode = matches[0].match(/([0-9]+)/g)[0];\n    }\n    let errorCode;\n    try {\n      errorCode = parseInt(unparsedErrorCode);\n    } catch (parseErr) {\n      return null;\n    }\n    // Parse user error.\n    let errorMsg = idlErrors.get(errorCode);\n    if (errorMsg !== undefined) {\n      return new ProgramError(errorCode, errorMsg, err.logs);\n    }\n    // Parse framework internal error.\n    errorMsg = exports.LangErrorMessage.get(errorCode);\n    if (errorMsg !== undefined) {\n      return new ProgramError(errorCode, errorMsg, err.logs);\n    }\n    // Unable to parse the error. Just return the untranslated error.\n    return null;\n  }\n  get program() {\n    var _a;\n    return (_a = this._programErrorStack) === null || _a === void 0 ? void 0 : _a.stack[this._programErrorStack.stack.length - 1];\n  }\n  get programErrorStack() {\n    var _a;\n    return (_a = this._programErrorStack) === null || _a === void 0 ? void 0 : _a.stack;\n  }\n  toString() {\n    return this.msg;\n  }\n}\nexports.ProgramError = ProgramError;\nfunction translateError(err, idlErrors) {\n  if (features.isSet(\"debug-logs\")) {\n    console.log(\"Translating error:\", err);\n  }\n  const anchorError = AnchorError.parse(err.logs);\n  if (anchorError) {\n    return anchorError;\n  }\n  const programError = ProgramError.parse(err, idlErrors);\n  if (programError) {\n    return programError;\n  }\n  if (err.logs) {\n    const handler = {\n      get: function (target, prop) {\n        if (prop === \"programErrorStack\") {\n          return target.programErrorStack.stack;\n        } else if (prop === \"program\") {\n          return target.programErrorStack.stack[err.programErrorStack.stack.length - 1];\n        } else {\n          // this is the normal way to return all other props\n          // without modifying them.\n          // @ts-expect-error\n          return Reflect.get(...arguments);\n        }\n      }\n    };\n    err.programErrorStack = ProgramErrorStack.parse(err.logs);\n    return new Proxy(err, handler);\n  }\n  return err;\n}\nexports.translateError = translateError;\nexports.LangErrorCode = {\n  // Instructions.\n  InstructionMissing: 100,\n  InstructionFallbackNotFound: 101,\n  InstructionDidNotDeserialize: 102,\n  InstructionDidNotSerialize: 103,\n  // IDL instructions.\n  IdlInstructionStub: 1000,\n  IdlInstructionInvalidProgram: 1001,\n  // Constraints.\n  ConstraintMut: 2000,\n  ConstraintHasOne: 2001,\n  ConstraintSigner: 2002,\n  ConstraintRaw: 2003,\n  ConstraintOwner: 2004,\n  ConstraintRentExempt: 2005,\n  ConstraintSeeds: 2006,\n  ConstraintExecutable: 2007,\n  ConstraintState: 2008,\n  ConstraintAssociated: 2009,\n  ConstraintAssociatedInit: 2010,\n  ConstraintClose: 2011,\n  ConstraintAddress: 2012,\n  ConstraintZero: 2013,\n  ConstraintTokenMint: 2014,\n  ConstraintTokenOwner: 2015,\n  ConstraintMintMintAuthority: 2016,\n  ConstraintMintFreezeAuthority: 2017,\n  ConstraintMintDecimals: 2018,\n  ConstraintSpace: 2019,\n  // Require.\n  RequireViolated: 2500,\n  RequireEqViolated: 2501,\n  RequireKeysEqViolated: 2502,\n  RequireNeqViolated: 2503,\n  RequireKeysNeqViolated: 2504,\n  RequireGtViolated: 2505,\n  RequireGteViolated: 2506,\n  // Accounts.\n  AccountDiscriminatorAlreadySet: 3000,\n  AccountDiscriminatorNotFound: 3001,\n  AccountDiscriminatorMismatch: 3002,\n  AccountDidNotDeserialize: 3003,\n  AccountDidNotSerialize: 3004,\n  AccountNotEnoughKeys: 3005,\n  AccountNotMutable: 3006,\n  AccountOwnedByWrongProgram: 3007,\n  InvalidProgramId: 3008,\n  InvalidProgramExecutable: 3009,\n  AccountNotSigner: 3010,\n  AccountNotSystemOwned: 3011,\n  AccountNotInitialized: 3012,\n  AccountNotProgramData: 3013,\n  AccountNotAssociatedTokenAccount: 3014,\n  AccountSysvarMismatch: 3015,\n  // State.\n  StateInvalidAddress: 4000,\n  // Miscellaneous\n  DeclaredProgramIdMismatch: 4100,\n  // Used for APIs that shouldn't be used anymore.\n  Deprecated: 5000\n};\nexports.LangErrorMessage = new Map([\n// Instructions.\n[exports.LangErrorCode.InstructionMissing, \"8 byte instruction identifier not provided\"], [exports.LangErrorCode.InstructionFallbackNotFound, \"Fallback functions are not supported\"], [exports.LangErrorCode.InstructionDidNotDeserialize, \"The program could not deserialize the given instruction\"], [exports.LangErrorCode.InstructionDidNotSerialize, \"The program could not serialize the given instruction\"],\n// Idl instructions.\n[exports.LangErrorCode.IdlInstructionStub, \"The program was compiled without idl instructions\"], [exports.LangErrorCode.IdlInstructionInvalidProgram, \"The transaction was given an invalid program for the IDL instruction\"],\n// Constraints.\n[exports.LangErrorCode.ConstraintMut, \"A mut constraint was violated\"], [exports.LangErrorCode.ConstraintHasOne, \"A has_one constraint was violated\"], [exports.LangErrorCode.ConstraintSigner, \"A signer constraint was violated\"], [exports.LangErrorCode.ConstraintRaw, \"A raw constraint was violated\"], [exports.LangErrorCode.ConstraintOwner, \"An owner constraint was violated\"], [exports.LangErrorCode.ConstraintRentExempt, \"A rent exemption constraint was violated\"], [exports.LangErrorCode.ConstraintSeeds, \"A seeds constraint was violated\"], [exports.LangErrorCode.ConstraintExecutable, \"An executable constraint was violated\"], [exports.LangErrorCode.ConstraintState, \"A state constraint was violated\"], [exports.LangErrorCode.ConstraintAssociated, \"An associated constraint was violated\"], [exports.LangErrorCode.ConstraintAssociatedInit, \"An associated init constraint was violated\"], [exports.LangErrorCode.ConstraintClose, \"A close constraint was violated\"], [exports.LangErrorCode.ConstraintAddress, \"An address constraint was violated\"], [exports.LangErrorCode.ConstraintZero, \"Expected zero account discriminant\"], [exports.LangErrorCode.ConstraintTokenMint, \"A token mint constraint was violated\"], [exports.LangErrorCode.ConstraintTokenOwner, \"A token owner constraint was violated\"], [exports.LangErrorCode.ConstraintMintMintAuthority, \"A mint mint authority constraint was violated\"], [exports.LangErrorCode.ConstraintMintFreezeAuthority, \"A mint freeze authority constraint was violated\"], [exports.LangErrorCode.ConstraintMintDecimals, \"A mint decimals constraint was violated\"], [exports.LangErrorCode.ConstraintSpace, \"A space constraint was violated\"],\n// Require.\n[exports.LangErrorCode.RequireViolated, \"A require expression was violated\"], [exports.LangErrorCode.RequireEqViolated, \"A require_eq expression was violated\"], [exports.LangErrorCode.RequireKeysEqViolated, \"A require_keys_eq expression was violated\"], [exports.LangErrorCode.RequireNeqViolated, \"A require_neq expression was violated\"], [exports.LangErrorCode.RequireKeysNeqViolated, \"A require_keys_neq expression was violated\"], [exports.LangErrorCode.RequireGtViolated, \"A require_gt expression was violated\"], [exports.LangErrorCode.RequireGteViolated, \"A require_gte expression was violated\"],\n// Accounts.\n[exports.LangErrorCode.AccountDiscriminatorAlreadySet, \"The account discriminator was already set on this account\"], [exports.LangErrorCode.AccountDiscriminatorNotFound, \"No 8 byte discriminator was found on the account\"], [exports.LangErrorCode.AccountDiscriminatorMismatch, \"8 byte discriminator did not match what was expected\"], [exports.LangErrorCode.AccountDidNotDeserialize, \"Failed to deserialize the account\"], [exports.LangErrorCode.AccountDidNotSerialize, \"Failed to serialize the account\"], [exports.LangErrorCode.AccountNotEnoughKeys, \"Not enough account keys given to the instruction\"], [exports.LangErrorCode.AccountNotMutable, \"The given account is not mutable\"], [exports.LangErrorCode.AccountOwnedByWrongProgram, \"The given account is owned by a different program than expected\"], [exports.LangErrorCode.InvalidProgramId, \"Program ID was not as expected\"], [exports.LangErrorCode.InvalidProgramExecutable, \"Program account is not executable\"], [exports.LangErrorCode.AccountNotSigner, \"The given account did not sign\"], [exports.LangErrorCode.AccountNotSystemOwned, \"The given account is not owned by the system program\"], [exports.LangErrorCode.AccountNotInitialized, \"The program expected this account to be already initialized\"], [exports.LangErrorCode.AccountNotProgramData, \"The given account is not a program data account\"], [exports.LangErrorCode.AccountNotAssociatedTokenAccount, \"The given account is not the associated token account\"], [exports.LangErrorCode.AccountSysvarMismatch, \"The given public key does not match the required sysvar\"],\n// State.\n[exports.LangErrorCode.StateInvalidAddress, \"The given state account does not have the correct address\"],\n// Miscellaneous\n[exports.LangErrorCode.DeclaredProgramIdMismatch, \"The declared program id does not match the actual program id\"],\n// Deprecated\n[exports.LangErrorCode.Deprecated, \"The API being used is deprecated and should no longer be used\"]]);","map":{"version":3,"names":["web3_js_1","require","features","__importStar","IdlError","Error","constructor","message","name","exports","ProgramErrorStack","stack","parse","logs","programKeyRegex","successRegex","programStack","i","length","exec","pop","programKey","_a","push","PublicKey","AnchorError","errorCode","errorMessage","errorLogs","origin","comparedValues","join","replace","error","_programErrorStack","anchorErrorLogIndex","findIndex","log","startsWith","anchorErrorLog","pubkeyRegex","leftPubkey","rightPubkey","slice","valueRegex","leftValue","rightValue","regexNoInfo","noInfoAnchorErrorLog","regexFileLine","fileLineAnchorErrorLog","regexAccountName","accountNameAnchorErrorLog","errorCodeString","errorNumber","code","number","parseInt","undefined","file","line","fileLine","accountName","program","programErrorStack","toString","ProgramError","msg","err","idlErrors","errString","unparsedErrorCode","includes","components","split","matches","match","parseErr","errorMsg","get","LangErrorMessage","translateError","isSet","console","anchorError","programError","handler","target","prop","Reflect","arguments","Proxy","LangErrorCode","InstructionMissing","InstructionFallbackNotFound","InstructionDidNotDeserialize","InstructionDidNotSerialize","IdlInstructionStub","IdlInstructionInvalidProgram","ConstraintMut","ConstraintHasOne","ConstraintSigner","ConstraintRaw","ConstraintOwner","ConstraintRentExempt","ConstraintSeeds","ConstraintExecutable","ConstraintState","ConstraintAssociated","ConstraintAssociatedInit","ConstraintClose","ConstraintAddress","ConstraintZero","ConstraintTokenMint","ConstraintTokenOwner","ConstraintMintMintAuthority","ConstraintMintFreezeAuthority","ConstraintMintDecimals","ConstraintSpace","RequireViolated","RequireEqViolated","RequireKeysEqViolated","RequireNeqViolated","RequireKeysNeqViolated","RequireGtViolated","RequireGteViolated","AccountDiscriminatorAlreadySet","AccountDiscriminatorNotFound","AccountDiscriminatorMismatch","AccountDidNotDeserialize","AccountDidNotSerialize","AccountNotEnoughKeys","AccountNotMutable","AccountOwnedByWrongProgram","InvalidProgramId","InvalidProgramExecutable","AccountNotSigner","AccountNotSystemOwned","AccountNotInitialized","AccountNotProgramData","AccountNotAssociatedTokenAccount","AccountSysvarMismatch","StateInvalidAddress","DeclaredProgramIdMismatch","Deprecated","Map"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/error.ts"],"sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport * as features from \"./utils/features.js\";\n\nexport class IdlError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"IdlError\";\n  }\n}\n\ninterface ErrorCode {\n  code: string;\n  number: number;\n}\n\ninterface FileLine {\n  file: string;\n  line: number;\n}\n\ntype Origin = string | FileLine;\ntype ComparedAccountNames = [string, string];\ntype ComparedPublicKeys = [PublicKey, PublicKey];\ntype ComparedValues = ComparedAccountNames | ComparedPublicKeys;\n\nexport class ProgramErrorStack {\n  constructor(readonly stack: PublicKey[]) {}\n\n  public static parse(logs: string[]) {\n    const programKeyRegex = /^Program (\\w*) invoke/;\n    const successRegex = /^Program \\w* success/;\n\n    const programStack: PublicKey[] = [];\n    for (let i = 0; i < logs.length; i++) {\n      if (successRegex.exec(logs[i])) {\n        programStack.pop();\n        continue;\n      }\n\n      const programKey = programKeyRegex.exec(logs[i])?.[1];\n      if (!programKey) {\n        continue;\n      }\n      programStack.push(new PublicKey(programKey));\n    }\n    return new ProgramErrorStack(programStack);\n  }\n}\n\nexport class AnchorError extends Error {\n  readonly error: {\n    errorCode: ErrorCode;\n    errorMessage: string;\n    comparedValues?: ComparedValues;\n    origin?: Origin;\n  };\n  private readonly _programErrorStack: ProgramErrorStack;\n\n  constructor(\n    errorCode: ErrorCode,\n    errorMessage: string,\n    readonly errorLogs: string[],\n    readonly logs: string[],\n    origin?: Origin,\n    comparedValues?: ComparedValues\n  ) {\n    super(errorLogs.join(\"\\n\").replace(\"Program log: \", \"\"));\n    this.error = { errorCode, errorMessage, comparedValues, origin };\n    this._programErrorStack = ProgramErrorStack.parse(logs);\n  }\n\n  public static parse(logs: string[]) {\n    if (!logs) {\n      return null;\n    }\n\n    const anchorErrorLogIndex = logs.findIndex((log) =>\n      log.startsWith(\"Program log: AnchorError\")\n    );\n    if (anchorErrorLogIndex === -1) {\n      return null;\n    }\n    const anchorErrorLog = logs[anchorErrorLogIndex];\n    const errorLogs = [anchorErrorLog];\n    let comparedValues: ComparedValues | undefined;\n    if (anchorErrorLogIndex + 1 < logs.length) {\n      // This catches the comparedValues where the following is logged\n      // <AnchorError>\n      // Left:\n      // <Pubkey>\n      // Right:\n      // <Pubkey>\n      if (logs[anchorErrorLogIndex + 1] === \"Program log: Left:\") {\n        const pubkeyRegex = /^Program log: (.*)$/;\n        const leftPubkey = pubkeyRegex.exec(logs[anchorErrorLogIndex + 2])![1];\n        const rightPubkey = pubkeyRegex.exec(logs[anchorErrorLogIndex + 4])![1];\n        comparedValues = [\n          new PublicKey(leftPubkey),\n          new PublicKey(rightPubkey),\n        ];\n        errorLogs.push(\n          ...logs.slice(anchorErrorLogIndex + 1, anchorErrorLogIndex + 5)\n        );\n      }\n      // This catches the comparedValues where the following is logged\n      // <AnchorError>\n      // Left: <value>\n      // Right: <value>\n      else if (logs[anchorErrorLogIndex + 1].startsWith(\"Program log: Left:\")) {\n        const valueRegex = /^Program log: (Left|Right): (.*)$/;\n        const leftValue = valueRegex.exec(logs[anchorErrorLogIndex + 1])![2];\n        const rightValue = valueRegex.exec(logs[anchorErrorLogIndex + 2])![2];\n        errorLogs.push(\n          ...logs.slice(anchorErrorLogIndex + 1, anchorErrorLogIndex + 3)\n        );\n        comparedValues = [leftValue, rightValue];\n      }\n    }\n    const regexNoInfo =\n      /^Program log: AnchorError occurred\\. Error Code: (.*)\\. Error Number: (\\d*)\\. Error Message: (.*)\\./;\n    const noInfoAnchorErrorLog = regexNoInfo.exec(anchorErrorLog);\n    const regexFileLine =\n      /^Program log: AnchorError thrown in (.*):(\\d*)\\. Error Code: (.*)\\. Error Number: (\\d*)\\. Error Message: (.*)\\./;\n    const fileLineAnchorErrorLog = regexFileLine.exec(anchorErrorLog);\n    const regexAccountName =\n      /^Program log: AnchorError caused by account: (.*)\\. Error Code: (.*)\\. Error Number: (\\d*)\\. Error Message: (.*)\\./;\n    const accountNameAnchorErrorLog = regexAccountName.exec(anchorErrorLog);\n    if (noInfoAnchorErrorLog) {\n      const [errorCodeString, errorNumber, errorMessage] =\n        noInfoAnchorErrorLog.slice(1, 4);\n      const errorCode = {\n        code: errorCodeString,\n        number: parseInt(errorNumber),\n      };\n      return new AnchorError(\n        errorCode,\n        errorMessage,\n        errorLogs,\n        logs,\n        undefined,\n        comparedValues\n      );\n    } else if (fileLineAnchorErrorLog) {\n      const [file, line, errorCodeString, errorNumber, errorMessage] =\n        fileLineAnchorErrorLog.slice(1, 6);\n      const errorCode = {\n        code: errorCodeString,\n        number: parseInt(errorNumber),\n      };\n      const fileLine = { file, line: parseInt(line) };\n      return new AnchorError(\n        errorCode,\n        errorMessage,\n        errorLogs,\n        logs,\n        fileLine,\n        comparedValues\n      );\n    } else if (accountNameAnchorErrorLog) {\n      const [accountName, errorCodeString, errorNumber, errorMessage] =\n        accountNameAnchorErrorLog.slice(1, 5);\n      const origin = accountName;\n      const errorCode = {\n        code: errorCodeString,\n        number: parseInt(errorNumber),\n      };\n      return new AnchorError(\n        errorCode,\n        errorMessage,\n        errorLogs,\n        logs,\n        origin,\n        comparedValues\n      );\n    } else {\n      return null;\n    }\n  }\n\n  get program(): PublicKey {\n    return this._programErrorStack.stack[\n      this._programErrorStack.stack.length - 1\n    ];\n  }\n\n  get programErrorStack(): PublicKey[] {\n    return this._programErrorStack.stack;\n  }\n\n  public toString(): string {\n    return this.message;\n  }\n}\n\n// An error from a user defined program.\nexport class ProgramError extends Error {\n  private readonly _programErrorStack?: ProgramErrorStack;\n\n  constructor(\n    readonly code: number,\n    readonly msg: string,\n    readonly logs?: string[]\n  ) {\n    super();\n    if (logs) {\n      this._programErrorStack = ProgramErrorStack.parse(logs);\n    }\n  }\n\n  public static parse(\n    err: any,\n    idlErrors: Map<number, string>\n  ): ProgramError | null {\n    const errString: string = err.toString();\n    // TODO: don't rely on the error string. web3.js should preserve the error\n    //       code information instead of giving us an untyped string.\n    let unparsedErrorCode: string;\n    if (errString.includes(\"custom program error:\")) {\n      let components = errString.split(\"custom program error: \");\n      if (components.length !== 2) {\n        return null;\n      } else {\n        unparsedErrorCode = components[1];\n      }\n    } else {\n      const matches = errString.match(/\"Custom\":([0-9]+)}/g);\n      if (!matches || matches.length > 1) {\n        return null;\n      }\n      unparsedErrorCode = matches[0].match(/([0-9]+)/g)![0];\n    }\n\n    let errorCode: number;\n    try {\n      errorCode = parseInt(unparsedErrorCode);\n    } catch (parseErr) {\n      return null;\n    }\n\n    // Parse user error.\n    let errorMsg = idlErrors.get(errorCode);\n    if (errorMsg !== undefined) {\n      return new ProgramError(errorCode, errorMsg, err.logs);\n    }\n\n    // Parse framework internal error.\n    errorMsg = LangErrorMessage.get(errorCode);\n    if (errorMsg !== undefined) {\n      return new ProgramError(errorCode, errorMsg, err.logs);\n    }\n\n    // Unable to parse the error. Just return the untranslated error.\n    return null;\n  }\n\n  get program(): PublicKey | undefined {\n    return this._programErrorStack?.stack[\n      this._programErrorStack.stack.length - 1\n    ];\n  }\n\n  get programErrorStack(): PublicKey[] | undefined {\n    return this._programErrorStack?.stack;\n  }\n\n  public toString(): string {\n    return this.msg;\n  }\n}\n\nexport function translateError(err: any, idlErrors: Map<number, string>) {\n  if (features.isSet(\"debug-logs\")) {\n    console.log(\"Translating error:\", err);\n  }\n\n  const anchorError = AnchorError.parse(err.logs);\n  if (anchorError) {\n    return anchorError;\n  }\n\n  const programError = ProgramError.parse(err, idlErrors);\n  if (programError) {\n    return programError;\n  }\n  if (err.logs) {\n    const handler = {\n      get: function (target, prop) {\n        if (prop === \"programErrorStack\") {\n          return target.programErrorStack.stack;\n        } else if (prop === \"program\") {\n          return target.programErrorStack.stack[\n            err.programErrorStack.stack.length - 1\n          ];\n        } else {\n          // this is the normal way to return all other props\n          // without modifying them.\n          // @ts-expect-error\n          return Reflect.get(...arguments);\n        }\n      },\n    };\n    err.programErrorStack = ProgramErrorStack.parse(err.logs);\n    return new Proxy(err, handler);\n  }\n  return err;\n}\n\nexport const LangErrorCode = {\n  // Instructions.\n  InstructionMissing: 100,\n  InstructionFallbackNotFound: 101,\n  InstructionDidNotDeserialize: 102,\n  InstructionDidNotSerialize: 103,\n\n  // IDL instructions.\n  IdlInstructionStub: 1000,\n  IdlInstructionInvalidProgram: 1001,\n\n  // Constraints.\n  ConstraintMut: 2000,\n  ConstraintHasOne: 2001,\n  ConstraintSigner: 2002,\n  ConstraintRaw: 2003,\n  ConstraintOwner: 2004,\n  ConstraintRentExempt: 2005,\n  ConstraintSeeds: 2006,\n  ConstraintExecutable: 2007,\n  ConstraintState: 2008,\n  ConstraintAssociated: 2009,\n  ConstraintAssociatedInit: 2010,\n  ConstraintClose: 2011,\n  ConstraintAddress: 2012,\n  ConstraintZero: 2013,\n  ConstraintTokenMint: 2014,\n  ConstraintTokenOwner: 2015,\n  ConstraintMintMintAuthority: 2016,\n  ConstraintMintFreezeAuthority: 2017,\n  ConstraintMintDecimals: 2018,\n  ConstraintSpace: 2019,\n\n  // Require.\n  RequireViolated: 2500,\n  RequireEqViolated: 2501,\n  RequireKeysEqViolated: 2502,\n  RequireNeqViolated: 2503,\n  RequireKeysNeqViolated: 2504,\n  RequireGtViolated: 2505,\n  RequireGteViolated: 2506,\n\n  // Accounts.\n  AccountDiscriminatorAlreadySet: 3000,\n  AccountDiscriminatorNotFound: 3001,\n  AccountDiscriminatorMismatch: 3002,\n  AccountDidNotDeserialize: 3003,\n  AccountDidNotSerialize: 3004,\n  AccountNotEnoughKeys: 3005,\n  AccountNotMutable: 3006,\n  AccountOwnedByWrongProgram: 3007,\n  InvalidProgramId: 3008,\n  InvalidProgramExecutable: 3009,\n  AccountNotSigner: 3010,\n  AccountNotSystemOwned: 3011,\n  AccountNotInitialized: 3012,\n  AccountNotProgramData: 3013,\n  AccountNotAssociatedTokenAccount: 3014,\n  AccountSysvarMismatch: 3015,\n  // State.\n  StateInvalidAddress: 4000,\n\n  // Miscellaneous\n  DeclaredProgramIdMismatch: 4100,\n\n  // Used for APIs that shouldn't be used anymore.\n  Deprecated: 5000,\n};\n\nexport const LangErrorMessage = new Map([\n  // Instructions.\n  [\n    LangErrorCode.InstructionMissing,\n    \"8 byte instruction identifier not provided\",\n  ],\n  [\n    LangErrorCode.InstructionFallbackNotFound,\n    \"Fallback functions are not supported\",\n  ],\n  [\n    LangErrorCode.InstructionDidNotDeserialize,\n    \"The program could not deserialize the given instruction\",\n  ],\n  [\n    LangErrorCode.InstructionDidNotSerialize,\n    \"The program could not serialize the given instruction\",\n  ],\n\n  // Idl instructions.\n  [\n    LangErrorCode.IdlInstructionStub,\n    \"The program was compiled without idl instructions\",\n  ],\n  [\n    LangErrorCode.IdlInstructionInvalidProgram,\n    \"The transaction was given an invalid program for the IDL instruction\",\n  ],\n\n  // Constraints.\n  [LangErrorCode.ConstraintMut, \"A mut constraint was violated\"],\n  [LangErrorCode.ConstraintHasOne, \"A has_one constraint was violated\"],\n  [LangErrorCode.ConstraintSigner, \"A signer constraint was violated\"],\n  [LangErrorCode.ConstraintRaw, \"A raw constraint was violated\"],\n  [LangErrorCode.ConstraintOwner, \"An owner constraint was violated\"],\n  [\n    LangErrorCode.ConstraintRentExempt,\n    \"A rent exemption constraint was violated\",\n  ],\n  [LangErrorCode.ConstraintSeeds, \"A seeds constraint was violated\"],\n  [LangErrorCode.ConstraintExecutable, \"An executable constraint was violated\"],\n  [LangErrorCode.ConstraintState, \"A state constraint was violated\"],\n  [LangErrorCode.ConstraintAssociated, \"An associated constraint was violated\"],\n  [\n    LangErrorCode.ConstraintAssociatedInit,\n    \"An associated init constraint was violated\",\n  ],\n  [LangErrorCode.ConstraintClose, \"A close constraint was violated\"],\n  [LangErrorCode.ConstraintAddress, \"An address constraint was violated\"],\n  [LangErrorCode.ConstraintZero, \"Expected zero account discriminant\"],\n  [LangErrorCode.ConstraintTokenMint, \"A token mint constraint was violated\"],\n  [LangErrorCode.ConstraintTokenOwner, \"A token owner constraint was violated\"],\n  [\n    LangErrorCode.ConstraintMintMintAuthority,\n    \"A mint mint authority constraint was violated\",\n  ],\n  [\n    LangErrorCode.ConstraintMintFreezeAuthority,\n    \"A mint freeze authority constraint was violated\",\n  ],\n  [\n    LangErrorCode.ConstraintMintDecimals,\n    \"A mint decimals constraint was violated\",\n  ],\n  [LangErrorCode.ConstraintSpace, \"A space constraint was violated\"],\n\n  // Require.\n  [LangErrorCode.RequireViolated, \"A require expression was violated\"],\n  [LangErrorCode.RequireEqViolated, \"A require_eq expression was violated\"],\n  [\n    LangErrorCode.RequireKeysEqViolated,\n    \"A require_keys_eq expression was violated\",\n  ],\n  [LangErrorCode.RequireNeqViolated, \"A require_neq expression was violated\"],\n  [\n    LangErrorCode.RequireKeysNeqViolated,\n    \"A require_keys_neq expression was violated\",\n  ],\n  [LangErrorCode.RequireGtViolated, \"A require_gt expression was violated\"],\n  [LangErrorCode.RequireGteViolated, \"A require_gte expression was violated\"],\n\n  // Accounts.\n  [\n    LangErrorCode.AccountDiscriminatorAlreadySet,\n    \"The account discriminator was already set on this account\",\n  ],\n  [\n    LangErrorCode.AccountDiscriminatorNotFound,\n    \"No 8 byte discriminator was found on the account\",\n  ],\n  [\n    LangErrorCode.AccountDiscriminatorMismatch,\n    \"8 byte discriminator did not match what was expected\",\n  ],\n  [LangErrorCode.AccountDidNotDeserialize, \"Failed to deserialize the account\"],\n  [LangErrorCode.AccountDidNotSerialize, \"Failed to serialize the account\"],\n  [\n    LangErrorCode.AccountNotEnoughKeys,\n    \"Not enough account keys given to the instruction\",\n  ],\n  [LangErrorCode.AccountNotMutable, \"The given account is not mutable\"],\n  [\n    LangErrorCode.AccountOwnedByWrongProgram,\n    \"The given account is owned by a different program than expected\",\n  ],\n  [LangErrorCode.InvalidProgramId, \"Program ID was not as expected\"],\n  [LangErrorCode.InvalidProgramExecutable, \"Program account is not executable\"],\n  [LangErrorCode.AccountNotSigner, \"The given account did not sign\"],\n  [\n    LangErrorCode.AccountNotSystemOwned,\n    \"The given account is not owned by the system program\",\n  ],\n  [\n    LangErrorCode.AccountNotInitialized,\n    \"The program expected this account to be already initialized\",\n  ],\n  [\n    LangErrorCode.AccountNotProgramData,\n    \"The given account is not a program data account\",\n  ],\n  [\n    LangErrorCode.AccountNotAssociatedTokenAccount,\n    \"The given account is not the associated token account\",\n  ],\n  [\n    LangErrorCode.AccountSysvarMismatch,\n    \"The given public key does not match the required sysvar\",\n  ],\n\n  // State.\n  [\n    LangErrorCode.StateInvalidAddress,\n    \"The given state account does not have the correct address\",\n  ],\n\n  // Miscellaneous\n  [\n    LangErrorCode.DeclaredProgramIdMismatch,\n    \"The declared program id does not match the actual program id\",\n  ],\n\n  // Deprecated\n  [\n    LangErrorCode.Deprecated,\n    \"The API being used is deprecated and should no longer be used\",\n  ],\n]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}