{"ast":null,"code":"export class IdlError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"IdlError\";\n  }\n}\n// An error from a user defined program.\nexport class ProgramError extends Error {\n  constructor(code, msg, ...params) {\n    super(...params);\n    this.code = code;\n    this.msg = msg;\n  }\n  static parse(err, idlErrors) {\n    // TODO: don't rely on the error string. web3.js should preserve the error\n    //       code information instead of giving us an untyped string.\n    let components = err.toString().split(\"custom program error: \");\n    if (components.length !== 2) {\n      return null;\n    }\n    let errorCode;\n    try {\n      errorCode = parseInt(components[1]);\n    } catch (parseErr) {\n      return null;\n    }\n    // Parse user error.\n    let errorMsg = idlErrors.get(errorCode);\n    if (errorMsg !== undefined) {\n      return new ProgramError(errorCode, errorMsg, errorCode + \": \" + errorMsg);\n    }\n    // Parse framework internal error.\n    errorMsg = LangErrorMessage.get(errorCode);\n    if (errorMsg !== undefined) {\n      return new ProgramError(errorCode, errorMsg, errorCode + \": \" + errorMsg);\n    }\n    // Unable to parse the error. Just return the untranslated error.\n    return null;\n  }\n  toString() {\n    return this.msg;\n  }\n}\nconst LangErrorCode = {\n  // Instructions.\n  InstructionMissing: 100,\n  InstructionFallbackNotFound: 101,\n  InstructionDidNotDeserialize: 102,\n  InstructionDidNotSerialize: 103,\n  // IDL instructions.\n  IdlInstructionStub: 120,\n  IdlInstructionInvalidProgram: 121,\n  // Constraints.\n  ConstraintMut: 140,\n  ConstraintHasOne: 141,\n  ConstraintSigner: 142,\n  ConstraintRaw: 143,\n  ConstraintOwner: 144,\n  ConstraintRentExempt: 145,\n  ConstraintSeeds: 146,\n  ConstraintExecutable: 147,\n  ConstraintState: 148,\n  ConstraintAssociated: 149,\n  ConstraintAssociatedInit: 150,\n  ConstraintClose: 151,\n  ConstraintAddress: 152,\n  // Accounts.\n  AccountDiscriminatorAlreadySet: 160,\n  AccountDiscriminatorNotFound: 161,\n  AccountDiscriminatorMismatch: 162,\n  AccountDidNotDeserialize: 163,\n  AccountDidNotSerialize: 164,\n  AccountNotEnoughKeys: 165,\n  AccountNotMutable: 166,\n  AccountNotProgramOwned: 167,\n  InvalidProgramId: 168,\n  InvalidProgramExecutable: 169,\n  AccountNotSigner: 170,\n  AccountNotSystemOwned: 171,\n  // State.\n  StateInvalidAddress: 180,\n  // Used for APIs that shouldn't be used anymore.\n  Deprecated: 299\n};\nconst LangErrorMessage = new Map([\n// Instructions.\n[LangErrorCode.InstructionMissing, \"8 byte instruction identifier not provided\"], [LangErrorCode.InstructionFallbackNotFound, \"Fallback functions are not supported\"], [LangErrorCode.InstructionDidNotDeserialize, \"The program could not deserialize the given instruction\"], [LangErrorCode.InstructionDidNotSerialize, \"The program could not serialize the given instruction\"],\n// Idl instructions.\n[LangErrorCode.IdlInstructionStub, \"The program was compiled without idl instructions\"], [LangErrorCode.IdlInstructionInvalidProgram, \"The transaction was given an invalid program for the IDL instruction\"],\n// Constraints.\n[LangErrorCode.ConstraintMut, \"A mut constraint was violated\"], [LangErrorCode.ConstraintHasOne, \"A has_one constraint was violated\"], [LangErrorCode.ConstraintSigner, \"A signer constraint was violated\"], [LangErrorCode.ConstraintRaw, \"A raw constraint was violated\"], [LangErrorCode.ConstraintOwner, \"An owner constraint was violated\"], [LangErrorCode.ConstraintRentExempt, \"A rent exempt constraint was violated\"], [LangErrorCode.ConstraintSeeds, \"A seeds constraint was violated\"], [LangErrorCode.ConstraintExecutable, \"An executable constraint was violated\"], [LangErrorCode.ConstraintState, \"A state constraint was violated\"], [LangErrorCode.ConstraintAssociated, \"An associated constraint was violated\"], [LangErrorCode.ConstraintAssociatedInit, \"An associated init constraint was violated\"], [LangErrorCode.ConstraintClose, \"A close constraint was violated\"], [LangErrorCode.ConstraintAddress, \"An address constraint was violated\"],\n// Accounts.\n[LangErrorCode.AccountDiscriminatorAlreadySet, \"The account discriminator was already set on this account\"], [LangErrorCode.AccountDiscriminatorNotFound, \"No 8 byte discriminator was found on the account\"], [LangErrorCode.AccountDiscriminatorMismatch, \"8 byte discriminator did not match what was expected\"], [LangErrorCode.AccountDidNotDeserialize, \"Failed to deserialize the account\"], [LangErrorCode.AccountDidNotSerialize, \"Failed to serialize the account\"], [LangErrorCode.AccountNotEnoughKeys, \"Not enough account keys given to the instruction\"], [LangErrorCode.AccountNotMutable, \"The given account is not mutable\"], [LangErrorCode.AccountNotProgramOwned, \"The given account is not owned by the executing program\"], [LangErrorCode.InvalidProgramId, \"Program ID was not as expected\"], [LangErrorCode.InvalidProgramExecutable, \"Program account is not executable\"], [LangErrorCode.AccountNotSigner, \"The given account did not sign\"], [LangErrorCode.AccountNotSystemOwned, \"The given account is not owned by the system program\"],\n// State.\n[LangErrorCode.StateInvalidAddress, \"The given state account does not have the correct address\"],\n// Misc.\n[LangErrorCode.Deprecated, \"The API being used is deprecated and should no longer be used\"]]);","map":{"version":3,"names":["IdlError","Error","constructor","message","name","ProgramError","code","msg","params","parse","err","idlErrors","components","toString","split","length","errorCode","parseInt","parseErr","errorMsg","get","undefined","LangErrorMessage","LangErrorCode","InstructionMissing","InstructionFallbackNotFound","InstructionDidNotDeserialize","InstructionDidNotSerialize","IdlInstructionStub","IdlInstructionInvalidProgram","ConstraintMut","ConstraintHasOne","ConstraintSigner","ConstraintRaw","ConstraintOwner","ConstraintRentExempt","ConstraintSeeds","ConstraintExecutable","ConstraintState","ConstraintAssociated","ConstraintAssociatedInit","ConstraintClose","ConstraintAddress","AccountDiscriminatorAlreadySet","AccountDiscriminatorNotFound","AccountDiscriminatorMismatch","AccountDidNotDeserialize","AccountDidNotSerialize","AccountNotEnoughKeys","AccountNotMutable","AccountNotProgramOwned","InvalidProgramId","InvalidProgramExecutable","AccountNotSigner","AccountNotSystemOwned","StateInvalidAddress","Deprecated","Map"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/error.ts"],"sourcesContent":["export class IdlError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"IdlError\";\n  }\n}\n\n// An error from a user defined program.\nexport class ProgramError extends Error {\n  constructor(readonly code: number, readonly msg: string, ...params: any[]) {\n    super(...params);\n  }\n\n  public static parse(\n    err: any,\n    idlErrors: Map<number, string>\n  ): ProgramError | null {\n    // TODO: don't rely on the error string. web3.js should preserve the error\n    //       code information instead of giving us an untyped string.\n    let components = err.toString().split(\"custom program error: \");\n    if (components.length !== 2) {\n      return null;\n    }\n\n    let errorCode: number;\n    try {\n      errorCode = parseInt(components[1]);\n    } catch (parseErr) {\n      return null;\n    }\n\n    // Parse user error.\n    let errorMsg = idlErrors.get(errorCode);\n    if (errorMsg !== undefined) {\n      return new ProgramError(errorCode, errorMsg, errorCode + \": \" + errorMsg);\n    }\n\n    // Parse framework internal error.\n    errorMsg = LangErrorMessage.get(errorCode);\n    if (errorMsg !== undefined) {\n      return new ProgramError(errorCode, errorMsg, errorCode + \": \" + errorMsg);\n    }\n\n    // Unable to parse the error. Just return the untranslated error.\n    return null;\n  }\n\n  public toString(): string {\n    return this.msg;\n  }\n}\n\nconst LangErrorCode = {\n  // Instructions.\n  InstructionMissing: 100,\n  InstructionFallbackNotFound: 101,\n  InstructionDidNotDeserialize: 102,\n  InstructionDidNotSerialize: 103,\n\n  // IDL instructions.\n  IdlInstructionStub: 120,\n  IdlInstructionInvalidProgram: 121,\n\n  // Constraints.\n  ConstraintMut: 140,\n  ConstraintHasOne: 141,\n  ConstraintSigner: 142,\n  ConstraintRaw: 143,\n  ConstraintOwner: 144,\n  ConstraintRentExempt: 145,\n  ConstraintSeeds: 146,\n  ConstraintExecutable: 147,\n  ConstraintState: 148,\n  ConstraintAssociated: 149,\n  ConstraintAssociatedInit: 150,\n  ConstraintClose: 151,\n  ConstraintAddress: 152,\n\n  // Accounts.\n  AccountDiscriminatorAlreadySet: 160,\n  AccountDiscriminatorNotFound: 161,\n  AccountDiscriminatorMismatch: 162,\n  AccountDidNotDeserialize: 163,\n  AccountDidNotSerialize: 164,\n  AccountNotEnoughKeys: 165,\n  AccountNotMutable: 166,\n  AccountNotProgramOwned: 167,\n  InvalidProgramId: 168,\n  InvalidProgramExecutable: 169,\n  AccountNotSigner: 170,\n  AccountNotSystemOwned: 171,\n\n  // State.\n  StateInvalidAddress: 180,\n\n  // Used for APIs that shouldn't be used anymore.\n  Deprecated: 299,\n};\n\nconst LangErrorMessage = new Map([\n  // Instructions.\n  [\n    LangErrorCode.InstructionMissing,\n    \"8 byte instruction identifier not provided\",\n  ],\n  [\n    LangErrorCode.InstructionFallbackNotFound,\n    \"Fallback functions are not supported\",\n  ],\n  [\n    LangErrorCode.InstructionDidNotDeserialize,\n    \"The program could not deserialize the given instruction\",\n  ],\n  [\n    LangErrorCode.InstructionDidNotSerialize,\n    \"The program could not serialize the given instruction\",\n  ],\n\n  // Idl instructions.\n  [\n    LangErrorCode.IdlInstructionStub,\n    \"The program was compiled without idl instructions\",\n  ],\n  [\n    LangErrorCode.IdlInstructionInvalidProgram,\n    \"The transaction was given an invalid program for the IDL instruction\",\n  ],\n\n  // Constraints.\n  [LangErrorCode.ConstraintMut, \"A mut constraint was violated\"],\n  [LangErrorCode.ConstraintHasOne, \"A has_one constraint was violated\"],\n  [LangErrorCode.ConstraintSigner, \"A signer constraint was violated\"],\n  [LangErrorCode.ConstraintRaw, \"A raw constraint was violated\"],\n  [LangErrorCode.ConstraintOwner, \"An owner constraint was violated\"],\n  [LangErrorCode.ConstraintRentExempt, \"A rent exempt constraint was violated\"],\n  [LangErrorCode.ConstraintSeeds, \"A seeds constraint was violated\"],\n  [LangErrorCode.ConstraintExecutable, \"An executable constraint was violated\"],\n  [LangErrorCode.ConstraintState, \"A state constraint was violated\"],\n  [LangErrorCode.ConstraintAssociated, \"An associated constraint was violated\"],\n  [\n    LangErrorCode.ConstraintAssociatedInit,\n    \"An associated init constraint was violated\",\n  ],\n  [LangErrorCode.ConstraintClose, \"A close constraint was violated\"],\n  [LangErrorCode.ConstraintAddress, \"An address constraint was violated\"],\n\n  // Accounts.\n  [\n    LangErrorCode.AccountDiscriminatorAlreadySet,\n    \"The account discriminator was already set on this account\",\n  ],\n  [\n    LangErrorCode.AccountDiscriminatorNotFound,\n    \"No 8 byte discriminator was found on the account\",\n  ],\n  [\n    LangErrorCode.AccountDiscriminatorMismatch,\n    \"8 byte discriminator did not match what was expected\",\n  ],\n  [LangErrorCode.AccountDidNotDeserialize, \"Failed to deserialize the account\"],\n  [LangErrorCode.AccountDidNotSerialize, \"Failed to serialize the account\"],\n  [\n    LangErrorCode.AccountNotEnoughKeys,\n    \"Not enough account keys given to the instruction\",\n  ],\n  [LangErrorCode.AccountNotMutable, \"The given account is not mutable\"],\n  [\n    LangErrorCode.AccountNotProgramOwned,\n    \"The given account is not owned by the executing program\",\n  ],\n  [LangErrorCode.InvalidProgramId, \"Program ID was not as expected\"],\n  [LangErrorCode.InvalidProgramExecutable, \"Program account is not executable\"],\n  [LangErrorCode.AccountNotSigner, \"The given account did not sign\"],\n  [\n    LangErrorCode.AccountNotSystemOwned,\n    \"The given account is not owned by the system program\",\n  ],\n\n  // State.\n  [\n    LangErrorCode.StateInvalidAddress,\n    \"The given state account does not have the correct address\",\n  ],\n\n  // Misc.\n  [\n    LangErrorCode.Deprecated,\n    \"The API being used is deprecated and should no longer be used\",\n  ],\n]);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}