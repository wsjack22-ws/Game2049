{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport BN from \"bn.js\";\nimport { sha256 as sha256Sync } from \"js-sha256\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { translateAddress } from \"../program/common\";\n// Sync version of web3.PublicKey.createWithSeed.\nexport function createWithSeedSync(fromPublicKey, seed, programId) {\n  var buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n  var hash = sha256Sync.digest(buffer);\n  return new PublicKey(Buffer.from(hash));\n}\n// Sync version of web3.PublicKey.createProgramAddress.\nexport function createProgramAddressSync(seeds, programId) {\n  var MAX_SEED_LENGTH = 32;\n  var buffer = Buffer.alloc(0);\n  seeds.forEach(function (seed) {\n    if (seed.length > MAX_SEED_LENGTH) {\n      throw new TypeError(\"Max seed length exceeded\");\n    }\n    buffer = Buffer.concat([buffer, toBuffer(seed)]);\n  });\n  buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from(\"ProgramDerivedAddress\")]);\n  var hash = sha256Sync(new Uint8Array(buffer));\n  var publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n  if (PublicKey.isOnCurve(new Uint8Array(publicKeyBytes))) {\n    throw new Error(\"Invalid seeds, address must fall off the curve\");\n  }\n  return new PublicKey(publicKeyBytes);\n}\n// Sync version of web3.PublicKey.findProgramAddress.\nexport function findProgramAddressSync(seeds, programId) {\n  var nonce = 255;\n  var address;\n  while (nonce != 0) {\n    try {\n      var seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n      address = createProgramAddressSync(seedsWithNonce, programId);\n    } catch (err) {\n      if (err instanceof TypeError) {\n        throw err;\n      }\n      nonce--;\n      continue;\n    }\n    return [address, nonce];\n  }\n  throw new Error(\"Unable to find a viable program address nonce\");\n}\nvar toBuffer = function toBuffer(arr) {\n  if (arr instanceof Buffer) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\nexport function associated(_x) {\n  return _associated.apply(this, arguments);\n}\nfunction _associated() {\n  _associated = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(programId) {\n    var seeds,\n      _len,\n      args,\n      _key,\n      _yield$PublicKey$find,\n      _yield$PublicKey$find2,\n      assoc,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          seeds = [Buffer.from([97, 110, 99, 104, 111, 114])]; // b\"anchor\".\n          for (_len = _args.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = _args[_key];\n          }\n          args.forEach(function (arg) {\n            seeds.push(\n            // @ts-ignore\n            arg.buffer !== undefined ? arg : translateAddress(arg).toBuffer());\n          });\n          _context.next = 5;\n          return PublicKey.findProgramAddress(seeds, translateAddress(programId));\n        case 5:\n          _yield$PublicKey$find = _context.sent;\n          _yield$PublicKey$find2 = _slicedToArray(_yield$PublicKey$find, 1);\n          assoc = _yield$PublicKey$find2[0];\n          return _context.abrupt(\"return\", assoc);\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _associated.apply(this, arguments);\n}","map":{"version":3,"names":["BN","sha256","sha256Sync","PublicKey","translateAddress","createWithSeedSync","fromPublicKey","seed","programId","buffer","Buffer","concat","toBuffer","from","hash","digest","createProgramAddressSync","seeds","MAX_SEED_LENGTH","alloc","forEach","length","TypeError","Uint8Array","publicKeyBytes","toArray","undefined","isOnCurve","Error","findProgramAddressSync","nonce","address","seedsWithNonce","err","arr","byteOffset","byteLength","associated","_x","_associated","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_len","args","_key","_yield$PublicKey$find","_yield$PublicKey$find2","assoc","_args","wrap","_callee$","_context","prev","next","Array","arg","push","findProgramAddress","sent","_slicedToArray","abrupt","stop"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/utils/pubkey.ts"],"sourcesContent":["import BN from \"bn.js\";\nimport { sha256 as sha256Sync } from \"js-sha256\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Address, translateAddress } from \"../program/common\";\n\n// Sync version of web3.PublicKey.createWithSeed.\nexport function createWithSeedSync(\n  fromPublicKey: PublicKey,\n  seed: string,\n  programId: PublicKey\n): PublicKey {\n  const buffer = Buffer.concat([\n    fromPublicKey.toBuffer(),\n    Buffer.from(seed),\n    programId.toBuffer(),\n  ]);\n  const hash = sha256Sync.digest(buffer);\n  return new PublicKey(Buffer.from(hash));\n}\n\n// Sync version of web3.PublicKey.createProgramAddress.\nexport function createProgramAddressSync(\n  seeds: Array<Buffer | Uint8Array>,\n  programId: PublicKey\n): PublicKey {\n  const MAX_SEED_LENGTH = 32;\n\n  let buffer = Buffer.alloc(0);\n  seeds.forEach(function (seed) {\n    if (seed.length > MAX_SEED_LENGTH) {\n      throw new TypeError(`Max seed length exceeded`);\n    }\n    buffer = Buffer.concat([buffer, toBuffer(seed)]);\n  });\n  buffer = Buffer.concat([\n    buffer,\n    programId.toBuffer(),\n    Buffer.from(\"ProgramDerivedAddress\"),\n  ]);\n  let hash = sha256Sync(new Uint8Array(buffer));\n  let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n  if (PublicKey.isOnCurve(new Uint8Array(publicKeyBytes))) {\n    throw new Error(`Invalid seeds, address must fall off the curve`);\n  }\n  return new PublicKey(publicKeyBytes);\n}\n\n// Sync version of web3.PublicKey.findProgramAddress.\nexport function findProgramAddressSync(\n  seeds: Array<Buffer | Uint8Array>,\n  programId: PublicKey\n): [PublicKey, number] {\n  let nonce = 255;\n  let address: PublicKey | undefined;\n  while (nonce != 0) {\n    try {\n      const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n      address = createProgramAddressSync(seedsWithNonce, programId);\n    } catch (err) {\n      if (err instanceof TypeError) {\n        throw err;\n      }\n      nonce--;\n      continue;\n    }\n    return [address, nonce];\n  }\n  throw new Error(`Unable to find a viable program address nonce`);\n}\n\nconst toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (arr instanceof Buffer) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nexport async function associated(\n  programId: Address,\n  ...args: Array<PublicKey | Buffer>\n): Promise<PublicKey> {\n  let seeds = [Buffer.from([97, 110, 99, 104, 111, 114])]; // b\"anchor\".\n  args.forEach((arg) => {\n    seeds.push(\n      // @ts-ignore\n      arg.buffer !== undefined ? arg : translateAddress(arg).toBuffer()\n    );\n  });\n  const [assoc] = await PublicKey.findProgramAddress(\n    seeds,\n    translateAddress(programId)\n  );\n  return assoc;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}