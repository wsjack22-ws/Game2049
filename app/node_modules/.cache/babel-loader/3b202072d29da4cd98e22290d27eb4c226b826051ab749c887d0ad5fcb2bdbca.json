{"ast":null,"code":"import _classCallCheck from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _slicedToArray from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapXOFConstructorWithOpts } from './utils.js';\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nvar SHA3_PI = [],\n  SHA3_ROTL = [],\n  _SHA3_IOTA = [];\nvar _0n = /* @__PURE__ */BigInt(0);\nvar _1n = /* @__PURE__ */BigInt(1);\nvar _2n = /* @__PURE__ */BigInt(2);\nvar _7n = /* @__PURE__ */BigInt(7);\nvar _256n = /* @__PURE__ */BigInt(256);\nvar _0x71n = /* @__PURE__ */BigInt(0x71);\nfor (var round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  var _ref = [y, (2 * x + 3 * y) % 5];\n  x = _ref[0];\n  y = _ref[1];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);\n  // Iota\n  var t = _0n;\n  for (var j = 0; j < 7; j++) {\n    R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\n    if (R & _2n) t ^= _1n << (_1n << /* @__PURE__ */BigInt(j)) - _1n;\n  }\n  _SHA3_IOTA.push(t);\n}\nvar _split = /* @__PURE__ */split(_SHA3_IOTA, true),\n  _split2 = _slicedToArray(_split, 2),\n  SHA3_IOTA_H = _split2[0],\n  SHA3_IOTA_L = _split2[1];\n// Left rotation (without 0, 32, 64)\nvar rotlH = function rotlH(h, l, s) {\n  return s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);\n};\nvar rotlL = function rotlL(h, l, s) {\n  return s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);\n};\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s) {\n  var rounds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 24;\n  var B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (var _round = 24 - rounds; _round < 24; _round++) {\n    // Theta θ\n    for (var _x = 0; _x < 10; _x++) B[_x] = s[_x] ^ s[_x + 10] ^ s[_x + 20] ^ s[_x + 30] ^ s[_x + 40];\n    for (var _x2 = 0; _x2 < 10; _x2 += 2) {\n      var idx1 = (_x2 + 8) % 10;\n      var idx0 = (_x2 + 2) % 10;\n      var B0 = B[idx0];\n      var B1 = B[idx0 + 1];\n      var Th = rotlH(B0, B1, 1) ^ B[idx1];\n      var Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (var _y = 0; _y < 50; _y += 10) {\n        s[_x2 + _y] ^= Th;\n        s[_x2 + _y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    var curH = s[2];\n    var curL = s[3];\n    for (var _t = 0; _t < 24; _t++) {\n      var shift = SHA3_ROTL[_t];\n      var _Th = rotlH(curH, curL, shift);\n      var _Tl = rotlL(curH, curL, shift);\n      var PI = SHA3_PI[_t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = _Th;\n      s[PI + 1] = _Tl;\n    }\n    // Chi (χ)\n    for (var _y2 = 0; _y2 < 50; _y2 += 10) {\n      for (var _x3 = 0; _x3 < 10; _x3++) B[_x3] = s[_y2 + _x3];\n      for (var _x4 = 0; _x4 < 10; _x4++) s[_y2 + _x4] ^= ~B[(_x4 + 2) % 10] & B[(_x4 + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[_round];\n    s[1] ^= SHA3_IOTA_L[_round];\n  }\n  B.fill(0);\n}\nexport var Keccak = /*#__PURE__*/function (_Hash) {\n  _inherits(Keccak, _Hash);\n  var _super = _createSuper(Keccak);\n  // NOTE: we accept arguments in bytes instead of bits here.\n  function Keccak(blockLen, suffix, outputLen) {\n    var _this;\n    var enableXOF = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var rounds = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 24;\n    _classCallCheck(this, Keccak);\n    _this = _super.call(this);\n    _this.blockLen = blockLen;\n    _this.suffix = suffix;\n    _this.outputLen = outputLen;\n    _this.enableXOF = enableXOF;\n    _this.rounds = rounds;\n    _this.pos = 0;\n    _this.posOut = 0;\n    _this.finished = false;\n    _this.destroyed = false;\n    // Can be passed from user as dkLen\n    number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= _this.blockLen || _this.blockLen >= 200) throw new Error('Sha3 supports only keccak-f1600 function');\n    _this.state = new Uint8Array(200);\n    _this.state32 = u32(_this.state);\n    return _this;\n  }\n  _createClass(Keccak, [{\n    key: \"keccak\",\n    value: function keccak() {\n      keccakP(this.state32, this.rounds);\n      this.posOut = 0;\n      this.pos = 0;\n    }\n  }, {\n    key: \"update\",\n    value: function update(data) {\n      exists(this);\n      var blockLen = this.blockLen,\n        state = this.state;\n      data = toBytes(data);\n      var len = data.length;\n      for (var pos = 0; pos < len;) {\n        var take = Math.min(blockLen - this.pos, len - pos);\n        for (var i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n        if (this.pos === blockLen) this.keccak();\n      }\n      return this;\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      if (this.finished) return;\n      this.finished = true;\n      var state = this.state,\n        suffix = this.suffix,\n        pos = this.pos,\n        blockLen = this.blockLen;\n      // Do the padding\n      state[pos] ^= suffix;\n      if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n      state[blockLen - 1] ^= 0x80;\n      this.keccak();\n    }\n  }, {\n    key: \"writeInto\",\n    value: function writeInto(out) {\n      exists(this, false);\n      bytes(out);\n      this.finish();\n      var bufferOut = this.state;\n      var blockLen = this.blockLen;\n      for (var pos = 0, len = out.length; pos < len;) {\n        if (this.posOut >= blockLen) this.keccak();\n        var take = Math.min(blockLen - this.posOut, len - pos);\n        out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n        this.posOut += take;\n        pos += take;\n      }\n      return out;\n    }\n  }, {\n    key: \"xofInto\",\n    value: function xofInto(out) {\n      // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n      if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n      return this.writeInto(out);\n    }\n  }, {\n    key: \"xof\",\n    value: function xof(bytes) {\n      number(bytes);\n      return this.xofInto(new Uint8Array(bytes));\n    }\n  }, {\n    key: \"digestInto\",\n    value: function digestInto(out) {\n      output(out, this);\n      if (this.finished) throw new Error('digest() was already called');\n      this.writeInto(out);\n      this.destroy();\n      return out;\n    }\n  }, {\n    key: \"digest\",\n    value: function digest() {\n      return this.digestInto(new Uint8Array(this.outputLen));\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyed = true;\n      this.state.fill(0);\n    }\n  }, {\n    key: \"_cloneInto\",\n    value: function _cloneInto(to) {\n      var blockLen = this.blockLen,\n        suffix = this.suffix,\n        outputLen = this.outputLen,\n        rounds = this.rounds,\n        enableXOF = this.enableXOF;\n      to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n      to.state32.set(this.state32);\n      to.pos = this.pos;\n      to.posOut = this.posOut;\n      to.finished = this.finished;\n      to.rounds = rounds;\n      // Suffix can change in cSHAKE\n      to.suffix = suffix;\n      to.outputLen = outputLen;\n      to.enableXOF = enableXOF;\n      to.destroyed = this.destroyed;\n      return to;\n    }\n  }]);\n  return Keccak;\n}(Hash);\nvar gen = function gen(suffix, blockLen, outputLen) {\n  return wrapConstructor(function () {\n    return new Keccak(blockLen, suffix, outputLen);\n  });\n};\nexport var sha3_224 = /* @__PURE__ */gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport var sha3_256 = /* @__PURE__ */gen(0x06, 136, 256 / 8);\nexport var sha3_384 = /* @__PURE__ */gen(0x06, 104, 384 / 8);\nexport var sha3_512 = /* @__PURE__ */gen(0x06, 72, 512 / 8);\nexport var keccak_224 = /* @__PURE__ */gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport var keccak_256 = /* @__PURE__ */gen(0x01, 136, 256 / 8);\nexport var keccak_384 = /* @__PURE__ */gen(0x01, 104, 384 / 8);\nexport var keccak_512 = /* @__PURE__ */gen(0x01, 72, 512 / 8);\nvar genShake = function genShake(suffix, blockLen, outputLen) {\n  return wrapXOFConstructorWithOpts(function () {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true);\n  });\n};\nexport var shake128 = /* @__PURE__ */genShake(0x1f, 168, 128 / 8);\nexport var shake256 = /* @__PURE__ */genShake(0x1f, 136, 256 / 8);","map":{"version":3,"names":["bytes","exists","number","output","rotlBH","rotlBL","rotlSH","rotlSL","split","Hash","u32","toBytes","wrapConstructor","wrapXOFConstructorWithOpts","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","BigInt","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","_ref","push","t","j","_split","_split2","_slicedToArray","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","h","l","s","rotlL","keccakP","rounds","arguments","length","undefined","B","Uint32Array","idx1","idx0","B0","B1","Th","Tl","curH","curL","shift","PI","fill","Keccak","_Hash","_inherits","_super","_createSuper","blockLen","suffix","outputLen","_this","enableXOF","_classCallCheck","call","pos","posOut","finished","destroyed","Error","state","Uint8Array","state32","_createClass","key","value","keccak","update","data","len","take","Math","min","i","finish","writeInto","out","bufferOut","set","subarray","xofInto","xof","digestInto","destroy","digest","_cloneInto","to","gen","sha3_224","sha3_256","sha3_384","sha3_512","keccak_224","keccak_256","keccak_384","keccak_512","genShake","opts","dkLen","shake128","shake256"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@noble/hashes/src/sha3.ts"],"sourcesContent":["import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapXOFConstructorWithOpts,\n  HashXOF,\n} from './utils.js';\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA]: [number[], number[], bigint[]] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h: number, l: number, s: number) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    exists(this, false);\n    bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapXOFConstructorWithOpts<HashXOF<Keccak>, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}