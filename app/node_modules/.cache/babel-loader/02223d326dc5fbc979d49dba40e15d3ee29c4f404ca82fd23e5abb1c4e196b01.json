{"ast":null,"code":"import { sha256 } from \"js-sha256\";\nimport { IdlCoder } from \"./idl\";\nimport * as features from \"../utils/features\";\nexport class StateCoder {\n  constructor(idl) {\n    if (idl.state === undefined) {\n      throw new Error(\"Idl state not defined.\");\n    }\n    this.layout = IdlCoder.typeDefLayout(idl.state.struct, idl.types);\n  }\n  async encode(name, account) {\n    const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n    const len = this.layout.encode(account, buffer);\n    const disc = await stateDiscriminator(name);\n    const accData = buffer.slice(0, len);\n    return Buffer.concat([disc, accData]);\n  }\n  decode(ix) {\n    // Chop off discriminator.\n    const data = ix.slice(8);\n    return this.layout.decode(data);\n  }\n}\n// Calculates unique 8 byte discriminator prepended to all anchor state accounts.\nexport async function stateDiscriminator(name) {\n  let ns = features.isSet(\"anchor-deprecated-state\") ? \"account\" : \"state\";\n  return Buffer.from(sha256.digest(`${ns}:${name}`)).slice(0, 8);\n}","map":{"version":3,"names":["sha256","IdlCoder","features","StateCoder","constructor","idl","state","undefined","Error","layout","typeDefLayout","struct","types","encode","name","account","buffer","Buffer","alloc","len","disc","stateDiscriminator","accData","slice","concat","decode","ix","data","ns","isSet","from","digest"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/coder/state.ts"],"sourcesContent":["import { Layout } from \"buffer-layout\";\nimport { sha256 } from \"js-sha256\";\nimport { Idl } from \"../idl\";\nimport { IdlCoder } from \"./idl\";\nimport * as features from \"../utils/features\";\n\nexport class StateCoder {\n  private layout: Layout;\n\n  public constructor(idl: Idl) {\n    if (idl.state === undefined) {\n      throw new Error(\"Idl state not defined.\");\n    }\n    this.layout = IdlCoder.typeDefLayout(idl.state.struct, idl.types);\n  }\n\n  public async encode<T = any>(name: string, account: T): Promise<Buffer> {\n    const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n    const len = this.layout.encode(account, buffer);\n\n    const disc = await stateDiscriminator(name);\n    const accData = buffer.slice(0, len);\n\n    return Buffer.concat([disc, accData]);\n  }\n\n  public decode<T = any>(ix: Buffer): T {\n    // Chop off discriminator.\n    const data = ix.slice(8);\n    return this.layout.decode(data);\n  }\n}\n\n// Calculates unique 8 byte discriminator prepended to all anchor state accounts.\nexport async function stateDiscriminator(name: string): Promise<Buffer> {\n  let ns = features.isSet(\"anchor-deprecated-state\") ? \"account\" : \"state\";\n  return Buffer.from(sha256.digest(`${ns}:${name}`)).slice(0, 8);\n}\n"],"mappings":"AACA,SAASA,MAAM,QAAQ,WAAW;AAElC,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAO,KAAKC,QAAQ,MAAM,mBAAmB;AAE7C,OAAM,MAAOC,UAAU;EAGrBC,YAAmBC,GAAQ;IACzB,IAAIA,GAAG,CAACC,KAAK,KAAKC,SAAS,EAAE;MAC3B,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;;IAE3C,IAAI,CAACC,MAAM,GAAGR,QAAQ,CAACS,aAAa,CAACL,GAAG,CAACC,KAAK,CAACK,MAAM,EAAEN,GAAG,CAACO,KAAK,CAAC;EACnE;EAEO,MAAMC,MAAMA,CAAUC,IAAY,EAAEC,OAAU;IACnD,MAAMC,MAAM,GAAGC,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACnC,MAAMC,GAAG,GAAG,IAAI,CAACV,MAAM,CAACI,MAAM,CAACE,OAAO,EAAEC,MAAM,CAAC;IAE/C,MAAMI,IAAI,GAAG,MAAMC,kBAAkB,CAACP,IAAI,CAAC;IAC3C,MAAMQ,OAAO,GAAGN,MAAM,CAACO,KAAK,CAAC,CAAC,EAAEJ,GAAG,CAAC;IAEpC,OAAOF,MAAM,CAACO,MAAM,CAAC,CAACJ,IAAI,EAAEE,OAAO,CAAC,CAAC;EACvC;EAEOG,MAAMA,CAAUC,EAAU;IAC/B;IACA,MAAMC,IAAI,GAAGD,EAAE,CAACH,KAAK,CAAC,CAAC,CAAC;IACxB,OAAO,IAAI,CAACd,MAAM,CAACgB,MAAM,CAACE,IAAI,CAAC;EACjC;;AAGF;AACA,OAAO,eAAeN,kBAAkBA,CAACP,IAAY;EACnD,IAAIc,EAAE,GAAG1B,QAAQ,CAAC2B,KAAK,CAAC,yBAAyB,CAAC,GAAG,SAAS,GAAG,OAAO;EACxE,OAAOZ,MAAM,CAACa,IAAI,CAAC9B,MAAM,CAAC+B,MAAM,CAAC,GAAGH,EAAE,IAAId,IAAI,EAAE,CAAC,CAAC,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;AAChE"},"metadata":{},"sourceType":"module","externalDependencies":[]}