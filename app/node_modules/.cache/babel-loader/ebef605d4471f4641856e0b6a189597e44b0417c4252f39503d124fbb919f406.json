{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar bcUrRegistry = require('@keystonehq/bc-ur-registry');\nvar uuid = require('uuid');\nconst ExtendedRegistryTypes = {\n  SOL_SIGN_REQUEST: /*#__PURE__*/new bcUrRegistry.RegistryType(\"sol-sign-request\", 1101),\n  SOL_SIGNATURE: /*#__PURE__*/new bcUrRegistry.RegistryType(\"sol-signature\", 1102),\n  SOL_NFT_ITEM: /*#__PURE__*/new bcUrRegistry.RegistryType(\"sol-nft-item\", 1104)\n};\nconst {\n  decodeToDataItem,\n  RegistryTypes\n} = bcUrRegistry.extend;\n(function (SignType) {\n  SignType[SignType[\"Transaction\"] = 1] = \"Transaction\";\n  SignType[SignType[\"Message\"] = 2] = \"Message\";\n})(exports.SignType || (exports.SignType = {}));\nvar Keys;\n(function (Keys) {\n  Keys[Keys[\"requestId\"] = 1] = \"requestId\";\n  Keys[Keys[\"signData\"] = 2] = \"signData\";\n  Keys[Keys[\"derivationPath\"] = 3] = \"derivationPath\";\n  Keys[Keys[\"address\"] = 4] = \"address\";\n  Keys[Keys[\"origin\"] = 5] = \"origin\";\n  Keys[Keys[\"signType\"] = 6] = \"signType\";\n})(Keys || (Keys = {}));\nclass SolSignRequest extends bcUrRegistry.RegistryItem {\n  constructor(args) {\n    super();\n    this.getRegistryType = () => ExtendedRegistryTypes.SOL_SIGN_REQUEST;\n    this.getRequestId = () => this.requestId;\n    this.getSignData = () => this.signData;\n    this.getDerivationPath = () => this.derivationPath.getPath();\n    this.getSignRequestAddress = () => this.address;\n    this.getOrigin = () => this.origin;\n    this.getSignType = () => this.signType;\n    this.toDataItem = () => {\n      const map = {};\n      if (this.requestId) {\n        map[Keys.requestId] = new bcUrRegistry.DataItem(this.requestId, RegistryTypes.UUID.getTag());\n      }\n      if (this.address) {\n        map[Keys.address] = this.address;\n      }\n      if (this.origin) {\n        map[Keys.origin] = this.origin;\n      }\n      map[Keys.signData] = this.signData;\n      map[Keys.signType] = this.signType;\n      const keyPath = this.derivationPath.toDataItem();\n      keyPath.setTag(this.derivationPath.getRegistryType().getTag());\n      map[Keys.derivationPath] = keyPath;\n      return new bcUrRegistry.DataItem(map);\n    };\n    this.requestId = args.requestId;\n    this.signData = args.signData;\n    this.derivationPath = args.derivationPath;\n    this.address = args.address;\n    this.origin = args.origin;\n    this.signType = args.signType;\n  }\n  static constructSOLRequest(signData, hdPath, xfp, signType, uuidString, address, origin) {\n    const paths = hdPath.replace(/[m|M]\\//, \"\").split(\"/\");\n    const hdpathObject = new bcUrRegistry.CryptoKeypath(paths.map(path => {\n      const index = parseInt(path.replace(\"'\", \"\"));\n      let isHardened = false;\n      if (path.endsWith(\"'\")) {\n        isHardened = true;\n      }\n      return new bcUrRegistry.PathComponent({\n        index,\n        hardened: isHardened\n      });\n    }), Buffer.from(xfp, \"hex\"));\n    return new SolSignRequest({\n      requestId: uuidString ? Buffer.from(uuid.parse(uuidString)) : undefined,\n      signData,\n      derivationPath: hdpathObject,\n      address: address ? Buffer.from(address.replace(\"0x\", \"\"), \"hex\") : undefined,\n      origin: origin || undefined,\n      signType\n    });\n  }\n}\nSolSignRequest.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const signData = map[Keys.signData];\n  const derivationPath = bcUrRegistry.CryptoKeypath.fromDataItem(map[Keys.derivationPath]);\n  const address = map[Keys.address] ? map[Keys.address] : undefined;\n  const requestId = map[Keys.requestId] ? map[Keys.requestId].getData() : undefined;\n  const origin = map[Keys.origin] ? map[Keys.origin] : undefined;\n  const signType = map[Keys.signType];\n  return new SolSignRequest({\n    requestId,\n    signData,\n    derivationPath,\n    address,\n    origin,\n    signType\n  });\n};\nSolSignRequest.fromCBOR = _cborPayload => {\n  const dataItem = decodeToDataItem(_cborPayload);\n  return SolSignRequest.fromDataItem(dataItem);\n};\nconst {\n  RegistryTypes: RegistryTypes$1,\n  decodeToDataItem: decodeToDataItem$1\n} = bcUrRegistry.extend;\nvar Keys$1;\n(function (Keys) {\n  Keys[Keys[\"requestId\"] = 1] = \"requestId\";\n  Keys[Keys[\"signature\"] = 2] = \"signature\";\n})(Keys$1 || (Keys$1 = {}));\nclass SolSignature extends bcUrRegistry.RegistryItem {\n  constructor(signature, requestId) {\n    super();\n    this.getRegistryType = () => ExtendedRegistryTypes.SOL_SIGNATURE;\n    this.getRequestId = () => this.requestId;\n    this.getSignature = () => this.signature;\n    this.toDataItem = () => {\n      const map = {};\n      if (this.requestId) {\n        map[Keys$1.requestId] = new bcUrRegistry.DataItem(this.requestId, RegistryTypes$1.UUID.getTag());\n      }\n      map[Keys$1.signature] = this.signature;\n      return new bcUrRegistry.DataItem(map);\n    };\n    this.signature = signature;\n    this.requestId = requestId;\n  }\n}\nSolSignature.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const signature = map[Keys$1.signature];\n  const requestId = map[Keys$1.requestId] ? map[Keys$1.requestId].getData() : undefined;\n  return new SolSignature(signature, requestId);\n};\nSolSignature.fromCBOR = _cborPayload => {\n  const dataItem = decodeToDataItem$1(_cborPayload);\n  return SolSignature.fromDataItem(dataItem);\n};\nconst {\n  decodeToDataItem: decodeToDataItem$2\n} = bcUrRegistry.extend;\nvar Keys$2;\n(function (Keys) {\n  Keys[Keys[\"mintAddress\"] = 1] = \"mintAddress\";\n  Keys[Keys[\"collectionName\"] = 2] = \"collectionName\";\n  Keys[Keys[\"name\"] = 3] = \"name\";\n  Keys[Keys[\"mediaData\"] = 4] = \"mediaData\";\n})(Keys$2 || (Keys$2 = {}));\nclass SOLNFTItem extends bcUrRegistry.RegistryItem {\n  constructor(args) {\n    super();\n    this.getRegistryType = () => ExtendedRegistryTypes.SOL_NFT_ITEM;\n    this.getName = () => this.name;\n    this.getMediaData = () => this.mediaData;\n    this.getMintAddress = () => this.mintAddress;\n    this.getCollectionName = () => this.collectionName;\n    this.toDataItem = () => {\n      const map = {};\n      map[Keys$2.name] = this.name;\n      map[Keys$2.mintAddress] = this.mintAddress;\n      map[Keys$2.collectionName] = this.collectionName;\n      map[Keys$2.mediaData] = this.mediaData;\n      return new bcUrRegistry.DataItem(map);\n    };\n    this.name = args.name;\n    this.mintAddress = args.mintAddress;\n    this.collectionName = args.collectionName;\n    this.mediaData = args.mediaData; // remove the data perfix for android usage\n  }\n\n  static constructETHNFTItem(mintAddress, collectionName, name, mediaData) {\n    return new SOLNFTItem({\n      mintAddress,\n      collectionName,\n      mediaData,\n      name\n    });\n  }\n}\nSOLNFTItem.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const name = map[Keys$2.name];\n  const mediaData = map[Keys$2.mediaData];\n  const mintAddress = map[Keys$2.mintAddress];\n  const collectionName = map[Keys$2.collectionName];\n  return new SOLNFTItem({\n    name,\n    mintAddress,\n    collectionName,\n    mediaData\n  });\n};\nSOLNFTItem.fromCBOR = _cborPayload => {\n  const dataItem = decodeToDataItem$2(_cborPayload);\n  return SOLNFTItem.fromDataItem(dataItem);\n};\nbcUrRegistry.patchTags(Object.values(ExtendedRegistryTypes).filter(rt => !!rt.getTag()).map(rt => rt.getTag()));\nObject.keys(bcUrRegistry).forEach(function (k) {\n  if (k !== 'default') Object.defineProperty(exports, k, {\n    enumerable: true,\n    get: function () {\n      return bcUrRegistry[k];\n    }\n  });\n});\nexports.SOLNFTItem = SOLNFTItem;\nexports.SolSignRequest = SolSignRequest;\nexports.SolSignature = SolSignature;","map":{"version":3,"names":["ExtendedRegistryTypes","SOL_SIGN_REQUEST","bcUrRegistry","RegistryType","SOL_SIGNATURE","SOL_NFT_ITEM","decodeToDataItem","RegistryTypes","extend","SignType","exports","Keys","SolSignRequest","RegistryItem","constructor","args","getRegistryType","getRequestId","requestId","getSignData","signData","getDerivationPath","derivationPath","getPath","getSignRequestAddress","address","getOrigin","origin","getSignType","signType","toDataItem","map","DataItem","UUID","getTag","keyPath","setTag","constructSOLRequest","hdPath","xfp","uuidString","paths","replace","split","hdpathObject","CryptoKeypath","path","index","parseInt","isHardened","endsWith","PathComponent","hardened","Buffer","from","uuid","parse","undefined","fromDataItem","dataItem","getData","fromCBOR","_cborPayload","RegistryTypes$1","decodeToDataItem$1","Keys$1","SolSignature","signature","getSignature","decodeToDataItem$2","Keys$2","SOLNFTItem","getName","name","getMediaData","mediaData","getMintAddress","mintAddress","getCollectionName","collectionName","constructETHNFTItem","patchTags","Object","values","filter","rt"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@keystonehq/bc-ur-registry-sol/src/RegistryType.ts","/Users/wuhuan/gif-portal-starter/node_modules/@keystonehq/bc-ur-registry-sol/src/SolSignRequest.ts","/Users/wuhuan/gif-portal-starter/node_modules/@keystonehq/bc-ur-registry-sol/src/SolSignature.ts","/Users/wuhuan/gif-portal-starter/node_modules/@keystonehq/bc-ur-registry-sol/src/SOLNFTItem.ts","/Users/wuhuan/gif-portal-starter/node_modules/@keystonehq/bc-ur-registry-sol/src/index.ts"],"sourcesContent":["import { RegistryType } from \"@keystonehq/bc-ur-registry\";\n\nexport const ExtendedRegistryTypes = {\n  SOL_SIGN_REQUEST: new RegistryType(\"sol-sign-request\", 1101),\n  SOL_SIGNATURE: new RegistryType(\"sol-signature\", 1102),\n  SOL_NFT_ITEM: new RegistryType(\"sol-nft-item\", 1104),\n};\n","import {\n  CryptoKeypath,\n  extend,\n  DataItem,\n  PathComponent,\n  RegistryItem,\n  DataItemMap,\n} from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\nimport * as uuid from \"uuid\";\n\nconst { decodeToDataItem, RegistryTypes } = extend;\n\nexport enum SignType {\n  Transaction = 1,\n  Message = 2,\n}\n\nenum Keys {\n  requestId = 1,\n  signData,\n  derivationPath,\n  address,\n  origin,\n  signType ,\n}\n\ntype signRequestProps = {\n  requestId?: Buffer;\n  signData: Buffer;\n  derivationPath: CryptoKeypath;\n  address?: Buffer;\n  origin?: string;\n  signType: SignType;\n};\n\nexport class SolSignRequest extends RegistryItem {\n  private requestId?: Buffer;\n  private signData: Buffer;\n  private derivationPath: CryptoKeypath;\n  private address?: Buffer;\n  private origin?: string;\n  private signType: SignType;\n\n  getRegistryType = () => ExtendedRegistryTypes.SOL_SIGN_REQUEST;\n\n  constructor(args: signRequestProps) {\n    super();\n    this.requestId = args.requestId;\n    this.signData = args.signData;\n    this.derivationPath = args.derivationPath;\n    this.address = args.address;\n    this.origin = args.origin;\n    this.signType = args.signType;\n  }\n\n  public getRequestId = () => this.requestId;\n  public getSignData = () => this.signData;\n  public getDerivationPath = () => this.derivationPath.getPath();\n  public getSignRequestAddress = () => this.address;\n  public getOrigin = () => this.origin;\n  public getSignType = () => this.signType;\n\n  public toDataItem = () => {\n    const map: DataItemMap = {};\n    if (this.requestId) {\n      map[Keys.requestId] = new DataItem(\n        this.requestId,\n        RegistryTypes.UUID.getTag()\n      );\n    }\n    if (this.address) {\n      map[Keys.address] = this.address;\n    }\n\n    if (this.origin) {\n      map[Keys.origin] = this.origin;\n    }\n\n    map[Keys.signData] = this.signData;\n    map[Keys.signType] = this.signType;\n\n    const keyPath = this.derivationPath.toDataItem();\n    keyPath.setTag(this.derivationPath.getRegistryType().getTag());\n    map[Keys.derivationPath] = keyPath;\n\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const signData = map[Keys.signData];\n    const derivationPath = CryptoKeypath.fromDataItem(map[Keys.derivationPath]);\n    const address = map[Keys.address] ? map[Keys.address] : undefined;\n    const requestId = map[Keys.requestId]\n      ? map[Keys.requestId].getData()\n      : undefined;\n    const origin = map[Keys.origin] ? map[Keys.origin] : undefined;\n    const signType = map[Keys.signType];\n\n    return new SolSignRequest({\n      requestId,\n      signData,\n      derivationPath,\n      address,\n      origin,\n      signType\n    });\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return SolSignRequest.fromDataItem(dataItem);\n  };\n\n  public static constructSOLRequest(\n    signData: Buffer,\n    hdPath: string,\n    xfp: string,\n    signType: SignType,\n    uuidString?: string,\n    address?: string,\n    origin?: string\n  ) {\n    const paths = hdPath.replace(/[m|M]\\//, \"\").split(\"/\");\n    const hdpathObject = new CryptoKeypath(\n      paths.map((path) => {\n        const index = parseInt(path.replace(\"'\", \"\"));\n        let isHardened = false;\n        if (path.endsWith(\"'\")) {\n          isHardened = true;\n        }\n        return new PathComponent({ index, hardened: isHardened });\n      }),\n      Buffer.from(xfp, \"hex\")\n    );\n\n    return new SolSignRequest({\n      requestId: uuidString\n        ? Buffer.from(uuid.parse(uuidString) as Uint8Array)\n        : undefined,\n      signData,\n      derivationPath: hdpathObject,\n      address: address\n        ? Buffer.from(address.replace(\"0x\", \"\"), \"hex\")\n        : undefined,\n      origin: origin || undefined,\n      signType,\n    });\n  }\n}\n","import {\n  extend,\n  DataItem,\n  RegistryItem,\n  DataItemMap,\n} from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\n\nconst { RegistryTypes, decodeToDataItem } = extend;\n\nenum Keys {\n  requestId = 1,\n  signature,\n}\n\nexport class SolSignature extends RegistryItem {\n  private requestId?: Buffer;\n  private signature: Buffer;\n\n  getRegistryType = () => ExtendedRegistryTypes.SOL_SIGNATURE;\n\n  constructor(signature: Buffer, requestId?: Buffer) {\n    super();\n    this.signature = signature;\n    this.requestId = requestId;\n  }\n\n  public getRequestId = () => this.requestId;\n  public getSignature = () => this.signature;\n\n  public toDataItem = () => {\n    const map: DataItemMap = {};\n    if (this.requestId) {\n      map[Keys.requestId] = new DataItem(\n        this.requestId,\n        RegistryTypes.UUID.getTag()\n      );\n    }\n    map[Keys.signature] = this.signature;\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const signature = map[Keys.signature];\n    const requestId = map[Keys.requestId]\n      ? map[Keys.requestId].getData()\n      : undefined;\n\n    return new SolSignature(signature, requestId);\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return SolSignature.fromDataItem(dataItem);\n  };\n}\n","import {\n  extend,\n  DataItem,\n  RegistryItem,\n  DataItemMap,\n} from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\n\nconst { decodeToDataItem } = extend;\n\nenum Keys {\n  mintAddress = 1,\n  collectionName,\n  name,\n  mediaData,\n}\n\ntype NFTProps = {\n  mintAddress: string;\n  collectionName: string;\n  name: string;\n  mediaData: string;\n};\n\nexport class SOLNFTItem extends RegistryItem {\n  private name: string;\n  private mintAddress: string;\n  private collectionName: string;\n  private mediaData: string;\n\n  getRegistryType = () => ExtendedRegistryTypes.SOL_NFT_ITEM;\n\n  constructor(args: NFTProps) {\n    super();\n    this.name = args.name;\n    this.mintAddress = args.mintAddress;\n    this.collectionName = args.collectionName;\n    this.mediaData = args.mediaData; // remove the data perfix for android usage\n  }\n\n  public getName = () => this.name;\n  public getMediaData = () => this.mediaData;\n  public getMintAddress = () => this.mintAddress;\n  public getCollectionName = () => this.collectionName;\n\n  public toDataItem = () => {\n    const map: DataItemMap = {};\n    map[Keys.name] = this.name;\n    map[Keys.mintAddress] = this.mintAddress;\n    map[Keys.collectionName] = this.collectionName;\n    map[Keys.mediaData] = this.mediaData;\n\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const name = map[Keys.name];\n    const mediaData = map[Keys.mediaData];\n    const mintAddress = map[Keys.mintAddress];\n    const collectionName = map[Keys.collectionName];\n\n    return new SOLNFTItem({\n      name,\n      mintAddress,\n      collectionName,\n      mediaData,\n    });\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return SOLNFTItem.fromDataItem(dataItem);\n  };\n\n  public static constructETHNFTItem(\n    mintAddress: string,\n    collectionName: string,\n    name: string,\n    mediaData: string\n  ) {\n    return new SOLNFTItem({\n      mintAddress,\n      collectionName,\n      mediaData,\n      name,\n    });\n  }\n}\n","import { patchTags } from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\nexport * from \"@keystonehq/bc-ur-registry\";\n\npatchTags(\n  Object.values(ExtendedRegistryTypes)\n    .filter((rt) => !!rt.getTag())\n    .map((rt) => rt.getTag()) as number[]\n);\n\nexport { SolSignRequest, SignType } from \"./SolSignRequest\";\nexport { SolSignature } from \"./SolSignature\";\nexport { SOLNFTItem } from \"./SOLNFTItem\";\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}