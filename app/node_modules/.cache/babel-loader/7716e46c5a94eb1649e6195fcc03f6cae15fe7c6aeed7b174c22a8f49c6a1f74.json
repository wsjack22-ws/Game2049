{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeCause = exports.serializeError = exports.isValidCode = exports.getMessageFromCode = exports.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;\nconst utils_1 = require(\"@metamask/utils\");\nconst error_constants_1 = require(\"./error-constants\");\nconst FALLBACK_ERROR_CODE = error_constants_1.errorCodes.rpc.internal;\nconst FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.';\nconst FALLBACK_ERROR = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE)\n};\nexports.JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n *\n * @param code - The error code.\n * @param fallbackMessage - The fallback message to use if the code has no\n * corresponding message.\n * @returns The message for the given code, or the fallback message if the code\n * has no corresponding message.\n */\nfunction getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {\n  if (isValidCode(code)) {\n    const codeString = code.toString();\n    if ((0, utils_1.hasProperty)(error_constants_1.errorValues, codeString)) {\n      return error_constants_1.errorValues[codeString].message;\n    }\n    if (isJsonRpcServerError(code)) {\n      return exports.JSON_RPC_SERVER_ERROR_MESSAGE;\n    }\n  }\n  return fallbackMessage;\n}\nexports.getMessageFromCode = getMessageFromCode;\n/**\n * Returns whether the given code is valid.\n * A code is valid if it is an integer.\n *\n * @param code - The error code.\n * @returns Whether the given code is valid.\n */\nfunction isValidCode(code) {\n  return Number.isInteger(code);\n}\nexports.isValidCode = isValidCode;\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.cause property.\n *\n * @param error - The error to serialize.\n * @param options - Options bag.\n * @param options.fallbackError - The error to return if the given error is\n * not compatible. Should be a JSON serializable value.\n * @param options.shouldIncludeStack - Whether to include the error's stack\n * on the returned object.\n * @returns The serialized error.\n */\nfunction serializeError(error, {\n  fallbackError = FALLBACK_ERROR,\n  shouldIncludeStack = true\n} = {}) {\n  if (!(0, utils_1.isJsonRpcError)(fallbackError)) {\n    throw new Error('Must provide fallback error with integer number code and string message.');\n  }\n  const serialized = buildError(error, fallbackError);\n  if (!shouldIncludeStack) {\n    delete serialized.stack;\n  }\n  return serialized;\n}\nexports.serializeError = serializeError;\n/**\n * Construct a JSON-serializable object given an error and a JSON serializable `fallbackError`\n *\n * @param error - The error in question.\n * @param fallbackError - A JSON serializable fallback error.\n * @returns A JSON serializable error object.\n */\nfunction buildError(error, fallbackError) {\n  // If an error specifies a `serialize` function, we call it and return the result.\n  if (error && typeof error === 'object' && 'serialize' in error && typeof error.serialize === 'function') {\n    return error.serialize();\n  }\n  if ((0, utils_1.isJsonRpcError)(error)) {\n    return error;\n  }\n  // If the error does not match the JsonRpcError type, use the fallback error, but try to include the original error as `cause`.\n  const cause = serializeCause(error);\n  const fallbackWithCause = {\n    ...fallbackError,\n    data: {\n      cause\n    }\n  };\n  return fallbackWithCause;\n}\n/**\n * Check if the given code is a valid JSON-RPC server error code.\n *\n * @param code - The error code.\n * @returns Whether the given code is a valid JSON-RPC server error code.\n */\nfunction isJsonRpcServerError(code) {\n  return code >= -32099 && code <= -32000;\n}\n/**\n * Serializes an unknown error to be used as the `cause` in a fallback error.\n *\n * @param error - The unknown error.\n * @returns A JSON-serializable object containing as much information about the original error as possible.\n */\nfunction serializeCause(error) {\n  if (Array.isArray(error)) {\n    return error.map(entry => {\n      if ((0, utils_1.isValidJson)(entry)) {\n        return entry;\n      } else if ((0, utils_1.isObject)(entry)) {\n        return serializeObject(entry);\n      }\n      return null;\n    });\n  } else if ((0, utils_1.isObject)(error)) {\n    return serializeObject(error);\n  }\n  if ((0, utils_1.isValidJson)(error)) {\n    return error;\n  }\n  return null;\n}\nexports.serializeCause = serializeCause;\n/**\n * Extracts all JSON-serializable properties from an object.\n *\n * @param object - The object in question.\n * @returns An object containing all the JSON-serializable properties.\n */\nfunction serializeObject(object) {\n  return Object.getOwnPropertyNames(object).reduce((acc, key) => {\n    const value = object[key];\n    if ((0, utils_1.isValidJson)(value)) {\n      acc[key] = value;\n    }\n    return acc;\n  }, {});\n}","map":{"version":3,"names":["utils_1","require","error_constants_1","FALLBACK_ERROR_CODE","errorCodes","rpc","internal","FALLBACK_MESSAGE","FALLBACK_ERROR","code","message","getMessageFromCode","exports","JSON_RPC_SERVER_ERROR_MESSAGE","fallbackMessage","isValidCode","codeString","toString","hasProperty","errorValues","isJsonRpcServerError","Number","isInteger","serializeError","error","fallbackError","shouldIncludeStack","isJsonRpcError","Error","serialized","buildError","stack","serialize","cause","serializeCause","fallbackWithCause","data","Array","isArray","map","entry","isValidJson","isObject","serializeObject","object","Object","getOwnPropertyNames","reduce","acc","key","value"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@metamask/rpc-errors/src/utils.ts"],"sourcesContent":["import {\n  hasProperty,\n  isValidJson,\n  isObject,\n  isJsonRpcError,\n  Json,\n  JsonRpcError as SerializedJsonRpcError,\n  RuntimeObject,\n} from '@metamask/utils';\n\nimport { errorCodes, errorValues } from './error-constants';\n\n/**\n * A data object, that must be either:\n *\n * - A JSON-serializable object.\n * - An object with a `cause` property that is an error-like value, and any\n * other properties that are JSON-serializable.\n */\nexport type DataWithOptionalCause =\n  | Json\n  | {\n      // Unfortunately we can't use just `Json` here, because all properties of\n      // an object with an index signature must be assignable to the index\n      // signature's type. So we have to use `Json | unknown` instead.\n      [key: string]: Json | unknown;\n      cause: unknown;\n    };\n\nconst FALLBACK_ERROR_CODE = errorCodes.rpc.internal;\nconst FALLBACK_MESSAGE =\n  'Unspecified error message. This is a bug, please report it.';\nconst FALLBACK_ERROR: SerializedJsonRpcError = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE),\n};\n\nexport const JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';\n\ntype ErrorValueKey = keyof typeof errorValues;\n\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n *\n * @param code - The error code.\n * @param fallbackMessage - The fallback message to use if the code has no\n * corresponding message.\n * @returns The message for the given code, or the fallback message if the code\n * has no corresponding message.\n */\nexport function getMessageFromCode(\n  code: unknown,\n  fallbackMessage: string = FALLBACK_MESSAGE,\n): string {\n  if (isValidCode(code)) {\n    const codeString = code.toString();\n\n    if (hasProperty(errorValues, codeString)) {\n      return errorValues[codeString as ErrorValueKey].message;\n    }\n\n    if (isJsonRpcServerError(code)) {\n      return JSON_RPC_SERVER_ERROR_MESSAGE;\n    }\n  }\n  return fallbackMessage;\n}\n\n/**\n * Returns whether the given code is valid.\n * A code is valid if it is an integer.\n *\n * @param code - The error code.\n * @returns Whether the given code is valid.\n */\nexport function isValidCode(code: unknown): code is number {\n  return Number.isInteger(code);\n}\n\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.cause property.\n *\n * @param error - The error to serialize.\n * @param options - Options bag.\n * @param options.fallbackError - The error to return if the given error is\n * not compatible. Should be a JSON serializable value.\n * @param options.shouldIncludeStack - Whether to include the error's stack\n * on the returned object.\n * @returns The serialized error.\n */\nexport function serializeError(\n  error: unknown,\n  { fallbackError = FALLBACK_ERROR, shouldIncludeStack = true } = {},\n): SerializedJsonRpcError {\n  if (!isJsonRpcError(fallbackError)) {\n    throw new Error(\n      'Must provide fallback error with integer number code and string message.',\n    );\n  }\n\n  const serialized = buildError(error, fallbackError);\n\n  if (!shouldIncludeStack) {\n    delete serialized.stack;\n  }\n\n  return serialized;\n}\n\n/**\n * Construct a JSON-serializable object given an error and a JSON serializable `fallbackError`\n *\n * @param error - The error in question.\n * @param fallbackError - A JSON serializable fallback error.\n * @returns A JSON serializable error object.\n */\nfunction buildError(\n  error: unknown,\n  fallbackError: SerializedJsonRpcError,\n): SerializedJsonRpcError {\n  // If an error specifies a `serialize` function, we call it and return the result.\n  if (\n    error &&\n    typeof error === 'object' &&\n    'serialize' in error &&\n    typeof error.serialize === 'function'\n  ) {\n    return error.serialize();\n  }\n\n  if (isJsonRpcError(error)) {\n    return error;\n  }\n\n  // If the error does not match the JsonRpcError type, use the fallback error, but try to include the original error as `cause`.\n  const cause = serializeCause(error);\n  const fallbackWithCause = {\n    ...fallbackError,\n    data: { cause },\n  };\n\n  return fallbackWithCause;\n}\n\n/**\n * Check if the given code is a valid JSON-RPC server error code.\n *\n * @param code - The error code.\n * @returns Whether the given code is a valid JSON-RPC server error code.\n */\nfunction isJsonRpcServerError(code: number): boolean {\n  return code >= -32099 && code <= -32000;\n}\n\n/**\n * Serializes an unknown error to be used as the `cause` in a fallback error.\n *\n * @param error - The unknown error.\n * @returns A JSON-serializable object containing as much information about the original error as possible.\n */\nexport function serializeCause(error: unknown): Json {\n  if (Array.isArray(error)) {\n    return error.map((entry) => {\n      if (isValidJson(entry)) {\n        return entry;\n      } else if (isObject(entry)) {\n        return serializeObject(entry);\n      }\n      return null;\n    });\n  } else if (isObject(error)) {\n    return serializeObject(error);\n  }\n\n  if (isValidJson(error)) {\n    return error;\n  }\n\n  return null;\n}\n\n/**\n * Extracts all JSON-serializable properties from an object.\n *\n * @param object - The object in question.\n * @returns An object containing all the JSON-serializable properties.\n */\nfunction serializeObject(object: RuntimeObject): Json {\n  return Object.getOwnPropertyNames(object).reduce<Record<string, Json>>(\n    (acc, key) => {\n      const value = object[key];\n      if (isValidJson(value)) {\n        acc[key] = value;\n      }\n\n      return acc;\n    },\n    {},\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}