{"ast":null,"code":"import _objectWithoutProperties from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _get from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _objectSpread from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _wrapNativeSuper from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _regeneratorRuntime from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _inherits from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _excluded = [\"commitment\"],\n  _excluded2 = [\"encoding\"],\n  _excluded3 = [\"commitment\"],\n  _excluded4 = [\"commitment\"];\nimport { Buffer } from 'buffer';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, type, number, array, nullable, optional, boolean, record, union, create, any, assert as assert$1 } from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport createRpc from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { secp256k1 } from '@noble/curves/secp256k1';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\n/**\n * Ed25519 Keypair\n */\n\nvar generatePrivateKey = ed25519.utils.randomPrivateKey;\nvar generateKeypair = function generateKeypair() {\n  var privateScalar = ed25519.utils.randomPrivateKey();\n  var publicKey = getPublicKey(privateScalar);\n  var secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey: publicKey,\n    secretKey: secretKey\n  };\n};\nvar getPublicKey = ed25519.getPublicKey;\nfunction _isOnCurve(publicKey) {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch (_unused) {\n    return false;\n  }\n}\nvar _sign = function sign(message, secretKey) {\n  return ed25519.sign(message, secretKey.slice(0, 32));\n};\nvar verify = ed25519.verify;\nvar toBuffer = function toBuffer(arr) {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\n// Class wrapping a plain object\nvar Struct = /*#__PURE__*/function () {\n  function Struct(properties) {\n    _classCallCheck(this, Struct);\n    Object.assign(this, properties);\n  }\n  _createClass(Struct, [{\n    key: \"encode\",\n    value: function encode() {\n      return Buffer.from(serialize(SOLANA_SCHEMA, this));\n    }\n  }], [{\n    key: \"decode\",\n    value: function decode(data) {\n      return deserialize(SOLANA_SCHEMA, this, data);\n    }\n  }, {\n    key: \"decodeUnchecked\",\n    value: function decodeUnchecked(data) {\n      return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n    }\n  }]);\n  return Struct;\n}(); // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nvar Enum = /*#__PURE__*/function (_Struct) {\n  _inherits(Enum, _Struct);\n  var _super = _createSuper(Enum);\n  function Enum(properties) {\n    var _this;\n    _classCallCheck(this, Enum);\n    _this = _super.call(this, properties);\n    _this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(function (key) {\n      _this.enum = key;\n    });\n    return _this;\n  }\n  return _createClass(Enum);\n}(Struct);\nvar SOLANA_SCHEMA = new Map();\nvar _class;\nvar _Symbol$toStringTag;\n\n/**\n * Maximum length of derived pubkey seed\n */\nvar MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nvar PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\n\n/**\n * JSON object representation of PublicKey class\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nvar uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\n_Symbol$toStringTag = Symbol.toStringTag;\nvar PublicKey = /*#__PURE__*/function (_Struct2, _Symbol$toStringTag2) {\n  _inherits(PublicKey, _Struct2);\n  var _super2 = _createSuper(PublicKey);\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  function PublicKey(value) {\n    var _this2;\n    _classCallCheck(this, PublicKey);\n    _this2 = _super2.call(this, {});\n    /** @internal */\n    _this2._bn = void 0;\n    if (isPublicKeyData(value)) {\n      _this2._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        var decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(\"Invalid public key input\");\n        }\n        _this2._bn = new BN(decoded);\n      } else {\n        _this2._bn = new BN(value);\n      }\n      if (_this2._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(\"Invalid public key input\");\n      }\n    }\n    return _this2;\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  _createClass(PublicKey, [{\n    key: \"equals\",\n    value:\n    /**\n     * Default public key value. The base58-encoded string representation is all ones (as seen below)\n     * The underlying BN number is 32 bytes that are all zeros\n     */\n\n    /**\n     * Checks if two publicKeys are equal\n     */\n    function equals(publicKey) {\n      return this._bn.eq(publicKey._bn);\n    }\n\n    /**\n     * Return the base-58 representation of the public key\n     */\n  }, {\n    key: \"toBase58\",\n    value: function toBase58() {\n      return bs58.encode(this.toBytes());\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toBase58();\n    }\n\n    /**\n     * Return the byte array representation of the public key in big endian\n     */\n  }, {\n    key: \"toBytes\",\n    value: function toBytes() {\n      var buf = this.toBuffer();\n      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n    }\n\n    /**\n     * Return the Buffer representation of the public key in big endian\n     */\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      var b = this._bn.toArrayLike(Buffer);\n      if (b.length === PUBLIC_KEY_LENGTH) {\n        return b;\n      }\n      var zeroPad = Buffer.alloc(32);\n      b.copy(zeroPad, 32 - b.length);\n      return zeroPad;\n    }\n  }, {\n    key: _Symbol$toStringTag2,\n    get: function get() {\n      return \"PublicKey(\".concat(this.toString(), \")\");\n    }\n\n    /**\n     * Return the base-58 representation of the public key\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toBase58();\n    }\n\n    /**\n     * Derive a public key from another key, a seed, and a program ID.\n     * The program ID will also serve as the owner of the public key, giving\n     * it permission to write data to the account.\n     */\n    /* eslint-disable require-await */\n  }], [{\n    key: \"unique\",\n    value: function unique() {\n      var key = new PublicKey(uniquePublicKeyCounter);\n      uniquePublicKeyCounter += 1;\n      return new PublicKey(key.toBuffer());\n    }\n  }, {\n    key: \"createWithSeed\",\n    value: function () {\n      var _createWithSeed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(fromPublicKey, seed, programId) {\n        var buffer, publicKeyBytes;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n              publicKeyBytes = sha256(buffer);\n              return _context.abrupt(\"return\", new PublicKey(publicKeyBytes));\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function createWithSeed(_x, _x2, _x3) {\n        return _createWithSeed.apply(this, arguments);\n      }\n      return createWithSeed;\n    }()\n    /**\n     * Derive a program address from seeds and a program ID.\n     */\n    /* eslint-disable require-await */\n  }, {\n    key: \"createProgramAddressSync\",\n    value: function createProgramAddressSync(seeds, programId) {\n      var buffer = Buffer.alloc(0);\n      seeds.forEach(function (seed) {\n        if (seed.length > MAX_SEED_LENGTH) {\n          throw new TypeError(\"Max seed length exceeded\");\n        }\n        buffer = Buffer.concat([buffer, toBuffer(seed)]);\n      });\n      buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n      var publicKeyBytes = sha256(buffer);\n      if (_isOnCurve(publicKeyBytes)) {\n        throw new Error(\"Invalid seeds, address must fall off the curve\");\n      }\n      return new PublicKey(publicKeyBytes);\n    }\n\n    /**\n     * Async version of createProgramAddressSync\n     * For backwards compatibility\n     *\n     * @deprecated Use {@link createProgramAddressSync} instead\n     */\n    /* eslint-disable require-await */\n  }, {\n    key: \"createProgramAddress\",\n    value: function () {\n      var _createProgramAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(seeds, programId) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this.createProgramAddressSync(seeds, programId));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function createProgramAddress(_x4, _x5) {\n        return _createProgramAddress.apply(this, arguments);\n      }\n      return createProgramAddress;\n    }()\n    /**\n     * Find a valid program address\n     *\n     * Valid program addresses must fall off the ed25519 curve.  This function\n     * iterates a nonce until it finds one that when combined with the seeds\n     * results in a valid program address.\n     */\n  }, {\n    key: \"findProgramAddressSync\",\n    value: function findProgramAddressSync(seeds, programId) {\n      var nonce = 255;\n      var address;\n      while (nonce != 0) {\n        try {\n          var seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n          address = this.createProgramAddressSync(seedsWithNonce, programId);\n        } catch (err) {\n          if (err instanceof TypeError) {\n            throw err;\n          }\n          nonce--;\n          continue;\n        }\n        return [address, nonce];\n      }\n      throw new Error(\"Unable to find a viable program address nonce\");\n    }\n\n    /**\n     * Async version of findProgramAddressSync\n     * For backwards compatibility\n     *\n     * @deprecated Use {@link findProgramAddressSync} instead\n     */\n  }, {\n    key: \"findProgramAddress\",\n    value: function () {\n      var _findProgramAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(seeds, programId) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", this.findProgramAddressSync(seeds, programId));\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function findProgramAddress(_x6, _x7) {\n        return _findProgramAddress.apply(this, arguments);\n      }\n      return findProgramAddress;\n    }()\n    /**\n     * Check that a pubkey is on the ed25519 curve.\n     */\n  }, {\n    key: \"isOnCurve\",\n    value: function isOnCurve(pubkeyData) {\n      var pubkey = new PublicKey(pubkeyData);\n      return _isOnCurve(pubkey.toBytes());\n    }\n  }]);\n  return PublicKey;\n}(Struct, _Symbol$toStringTag);\n_class = PublicKey;\nPublicKey.default = new _class('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nvar Account = /*#__PURE__*/function () {\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  function Account(secretKey) {\n    _classCallCheck(this, Account);\n    /** @internal */\n    this._publicKey = void 0;\n    /** @internal */\n    this._secretKey = void 0;\n    if (secretKey) {\n      var secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  _createClass(Account, [{\n    key: \"publicKey\",\n    get: function get() {\n      return new PublicKey(this._publicKey);\n    }\n\n    /**\n     * The **unencrypted** secret key for this account. The first 32 bytes\n     * is the private scalar and the last 32 bytes is the public key.\n     * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n     */\n  }, {\n    key: \"secretKey\",\n    get: function get() {\n      return Buffer.concat([this._secretKey, this._publicKey], 64);\n    }\n  }]);\n  return Account;\n}();\nvar BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nvar PACKET_DATA_SIZE = 1280 - 40 - 8;\nvar VERSION_PREFIX_MASK = 0x7f;\nvar SIGNATURE_LENGTH_IN_BYTES = 64;\nvar TransactionExpiredBlockheightExceededError = /*#__PURE__*/function (_Error) {\n  _inherits(TransactionExpiredBlockheightExceededError, _Error);\n  var _super3 = _createSuper(TransactionExpiredBlockheightExceededError);\n  function TransactionExpiredBlockheightExceededError(signature) {\n    var _this3;\n    _classCallCheck(this, TransactionExpiredBlockheightExceededError);\n    _this3 = _super3.call(this, \"Signature \".concat(signature, \" has expired: block height exceeded.\"));\n    _this3.signature = void 0;\n    _this3.signature = signature;\n    return _this3;\n  }\n  return _createClass(TransactionExpiredBlockheightExceededError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nvar TransactionExpiredTimeoutError = /*#__PURE__*/function (_Error2) {\n  _inherits(TransactionExpiredTimeoutError, _Error2);\n  var _super4 = _createSuper(TransactionExpiredTimeoutError);\n  function TransactionExpiredTimeoutError(signature, timeoutSeconds) {\n    var _this4;\n    _classCallCheck(this, TransactionExpiredTimeoutError);\n    _this4 = _super4.call(this, \"Transaction was not confirmed in \".concat(timeoutSeconds.toFixed(2), \" seconds. It is \") + 'unknown if it succeeded or failed. Check signature ' + \"\".concat(signature, \" using the Solana Explorer or CLI tools.\"));\n    _this4.signature = void 0;\n    _this4.signature = signature;\n    return _this4;\n  }\n  return _createClass(TransactionExpiredTimeoutError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nvar TransactionExpiredNonceInvalidError = /*#__PURE__*/function (_Error3) {\n  _inherits(TransactionExpiredNonceInvalidError, _Error3);\n  var _super5 = _createSuper(TransactionExpiredNonceInvalidError);\n  function TransactionExpiredNonceInvalidError(signature) {\n    var _this5;\n    _classCallCheck(this, TransactionExpiredNonceInvalidError);\n    _this5 = _super5.call(this, \"Signature \".concat(signature, \" has expired: the nonce is no longer valid.\"));\n    _this5.signature = void 0;\n    _this5.signature = signature;\n    return _this5;\n  }\n  return _createClass(TransactionExpiredNonceInvalidError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\nvar MessageAccountKeys = /*#__PURE__*/function () {\n  function MessageAccountKeys(staticAccountKeys, accountKeysFromLookups) {\n    _classCallCheck(this, MessageAccountKeys);\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n  _createClass(MessageAccountKeys, [{\n    key: \"keySegments\",\n    value: function keySegments() {\n      var keySegments = [this.staticAccountKeys];\n      if (this.accountKeysFromLookups) {\n        keySegments.push(this.accountKeysFromLookups.writable);\n        keySegments.push(this.accountKeysFromLookups.readonly);\n      }\n      return keySegments;\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var _iterator = _createForOfIteratorHelper(this.keySegments()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var keySegment = _step.value;\n          if (index < keySegment.length) {\n            return keySegment[index];\n          } else {\n            index -= keySegment.length;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.keySegments().flat().length;\n    }\n  }, {\n    key: \"compileInstructions\",\n    value: function compileInstructions(instructions) {\n      // Bail early if any account indexes would overflow a u8\n      var U8_MAX = 255;\n      if (this.length > U8_MAX + 1) {\n        throw new Error('Account index overflow encountered during compilation');\n      }\n      var keyIndexMap = new Map();\n      this.keySegments().flat().forEach(function (key, index) {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n      var findKeyIndex = function findKeyIndex(key) {\n        var keyIndex = keyIndexMap.get(key.toBase58());\n        if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n        return keyIndex;\n      };\n      return instructions.map(function (instruction) {\n        return {\n          programIdIndex: findKeyIndex(instruction.programId),\n          accountKeyIndexes: instruction.keys.map(function (meta) {\n            return findKeyIndex(meta.pubkey);\n          }),\n          data: instruction.data\n        };\n      });\n    }\n  }]);\n  return MessageAccountKeys;\n}();\n/**\n * Layout for a public key\n */\nvar publicKey = function publicKey() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nvar signature = function signature() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'signature';\n  return BufferLayout.blob(64, property);\n};\n/**\n * Layout for a Rust String type\n */\nvar rustString = function rustString() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  var rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  var _decode = rsl.decode.bind(rsl);\n  var _encode = rsl.encode.bind(rsl);\n  var rslShim = rsl;\n  rslShim.decode = function (b, offset) {\n    var data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = function (str, b, offset) {\n    var data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = function (str) {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nvar authorized = function authorized() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nvar lockup = function lockup() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n\n/**\n *  Layout for a VoteInit object\n */\nvar voteInit = function voteInit() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteInit';\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nvar voteAuthorizeWithSeedArgs = function voteAuthorizeWithSeedArgs() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteAuthorizeWithSeedArgs';\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  var getItemAlloc = function getItemAlloc(item) {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      var field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n  var alloc = 0;\n  type.layout.fields.forEach(function (item) {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\nfunction decodeLength(bytes) {\n  var len = 0;\n  var size = 0;\n  for (;;) {\n    var elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  var rem_len = len;\n  for (;;) {\n    var elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\nvar CompiledKeys = /*#__PURE__*/function () {\n  function CompiledKeys(payer, keyMetaMap) {\n    _classCallCheck(this, CompiledKeys);\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n  _createClass(CompiledKeys, [{\n    key: \"getMessageComponents\",\n    value: function getMessageComponents() {\n      var mapEntries = _toConsumableArray(this.keyMetaMap.entries());\n      assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n      var writableSigners = mapEntries.filter(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          meta = _ref2[1];\n        return meta.isSigner && meta.isWritable;\n      });\n      var readonlySigners = mapEntries.filter(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          meta = _ref4[1];\n        return meta.isSigner && !meta.isWritable;\n      });\n      var writableNonSigners = mapEntries.filter(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n          meta = _ref6[1];\n        return !meta.isSigner && meta.isWritable;\n      });\n      var readonlyNonSigners = mapEntries.filter(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n          meta = _ref8[1];\n        return !meta.isSigner && !meta.isWritable;\n      });\n      var header = {\n        numRequiredSignatures: writableSigners.length + readonlySigners.length,\n        numReadonlySignedAccounts: readonlySigners.length,\n        numReadonlyUnsignedAccounts: readonlyNonSigners.length\n      };\n\n      // sanity checks\n      {\n        assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n        var _writableSigners$ = _slicedToArray(writableSigners[0], 1),\n          payerAddress = _writableSigners$[0];\n        assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n      }\n      var staticAccountKeys = [].concat(_toConsumableArray(writableSigners.map(function (_ref9) {\n        var _ref10 = _slicedToArray(_ref9, 1),\n          address = _ref10[0];\n        return new PublicKey(address);\n      })), _toConsumableArray(readonlySigners.map(function (_ref11) {\n        var _ref12 = _slicedToArray(_ref11, 1),\n          address = _ref12[0];\n        return new PublicKey(address);\n      })), _toConsumableArray(writableNonSigners.map(function (_ref13) {\n        var _ref14 = _slicedToArray(_ref13, 1),\n          address = _ref14[0];\n        return new PublicKey(address);\n      })), _toConsumableArray(readonlyNonSigners.map(function (_ref15) {\n        var _ref16 = _slicedToArray(_ref15, 1),\n          address = _ref16[0];\n        return new PublicKey(address);\n      })));\n      return [header, staticAccountKeys];\n    }\n  }, {\n    key: \"extractTableLookup\",\n    value: function extractTableLookup(lookupTable) {\n      var _this$drainKeysFoundI = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, function (keyMeta) {\n          return !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable;\n        }),\n        _this$drainKeysFoundI2 = _slicedToArray(_this$drainKeysFoundI, 2),\n        writableIndexes = _this$drainKeysFoundI2[0],\n        drainedWritableKeys = _this$drainKeysFoundI2[1];\n      var _this$drainKeysFoundI3 = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, function (keyMeta) {\n          return !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable;\n        }),\n        _this$drainKeysFoundI4 = _slicedToArray(_this$drainKeysFoundI3, 2),\n        readonlyIndexes = _this$drainKeysFoundI4[0],\n        drainedReadonlyKeys = _this$drainKeysFoundI4[1];\n\n      // Don't extract lookup if no keys were found\n      if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n        return;\n      }\n      return [{\n        accountKey: lookupTable.key,\n        writableIndexes: writableIndexes,\n        readonlyIndexes: readonlyIndexes\n      }, {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys\n      }];\n    }\n\n    /** @internal */\n  }, {\n    key: \"drainKeysFoundInLookupTable\",\n    value: function drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n      var _this6 = this;\n      var lookupTableIndexes = new Array();\n      var drainedKeys = new Array();\n      var _iterator2 = _createForOfIteratorHelper(this.keyMetaMap.entries()),\n        _step2;\n      try {\n        var _loop = function _loop() {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n            address = _step2$value[0],\n            keyMeta = _step2$value[1];\n          if (keyMetaFilter(keyMeta)) {\n            var key = new PublicKey(address);\n            var lookupTableIndex = lookupTableEntries.findIndex(function (entry) {\n              return entry.equals(key);\n            });\n            if (lookupTableIndex >= 0) {\n              assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n              lookupTableIndexes.push(lookupTableIndex);\n              drainedKeys.push(key);\n              _this6.keyMetaMap.delete(address);\n            }\n          }\n        };\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return [lookupTableIndexes, drainedKeys];\n    }\n  }], [{\n    key: \"compile\",\n    value: function compile(instructions, payer) {\n      var keyMetaMap = new Map();\n      var getOrInsertDefault = function getOrInsertDefault(pubkey) {\n        var address = pubkey.toBase58();\n        var keyMeta = keyMetaMap.get(address);\n        if (keyMeta === undefined) {\n          keyMeta = {\n            isSigner: false,\n            isWritable: false,\n            isInvoked: false\n          };\n          keyMetaMap.set(address, keyMeta);\n        }\n        return keyMeta;\n      };\n      var payerKeyMeta = getOrInsertDefault(payer);\n      payerKeyMeta.isSigner = true;\n      payerKeyMeta.isWritable = true;\n      var _iterator3 = _createForOfIteratorHelper(instructions),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var ix = _step3.value;\n          getOrInsertDefault(ix.programId).isInvoked = true;\n          var _iterator4 = _createForOfIteratorHelper(ix.keys),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var accountMeta = _step4.value;\n              var keyMeta = getOrInsertDefault(accountMeta.pubkey);\n              keyMeta.isSigner || (keyMeta.isSigner = accountMeta.isSigner);\n              keyMeta.isWritable || (keyMeta.isWritable = accountMeta.isWritable);\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return new CompiledKeys(payer, keyMetaMap);\n    }\n  }]);\n  return CompiledKeys;\n}();\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n/**\n * Message constructor arguments\n */\n/**\n * List of instructions to be processed atomically\n */\nvar Message = /*#__PURE__*/function () {\n  function Message(args) {\n    var _this7 = this;\n    _classCallCheck(this, Message);\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(function (account) {\n      return new PublicKey(account);\n    });\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(function (ix) {\n      return _this7.indexToProgramIds.set(ix.programIdIndex, _this7.accountKeys[ix.programIdIndex]);\n    });\n  }\n  _createClass(Message, [{\n    key: \"version\",\n    get: function get() {\n      return 'legacy';\n    }\n  }, {\n    key: \"staticAccountKeys\",\n    get: function get() {\n      return this.accountKeys;\n    }\n  }, {\n    key: \"compiledInstructions\",\n    get: function get() {\n      return this.instructions.map(function (ix) {\n        return {\n          programIdIndex: ix.programIdIndex,\n          accountKeyIndexes: ix.accounts,\n          data: bs58.decode(ix.data)\n        };\n      });\n    }\n  }, {\n    key: \"addressTableLookups\",\n    get: function get() {\n      return [];\n    }\n  }, {\n    key: \"getAccountKeys\",\n    value: function getAccountKeys() {\n      return new MessageAccountKeys(this.staticAccountKeys);\n    }\n  }, {\n    key: \"isAccountSigner\",\n    value: function isAccountSigner(index) {\n      return index < this.header.numRequiredSignatures;\n    }\n  }, {\n    key: \"isAccountWritable\",\n    value: function isAccountWritable(index) {\n      var numSignedAccounts = this.header.numRequiredSignatures;\n      if (index >= this.header.numRequiredSignatures) {\n        var unsignedAccountIndex = index - numSignedAccounts;\n        var numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n        var numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n        return unsignedAccountIndex < numWritableUnsignedAccounts;\n      } else {\n        var numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n        return index < numWritableSignedAccounts;\n      }\n    }\n  }, {\n    key: \"isProgramId\",\n    value: function isProgramId(index) {\n      return this.indexToProgramIds.has(index);\n    }\n  }, {\n    key: \"programIds\",\n    value: function programIds() {\n      return _toConsumableArray(this.indexToProgramIds.values());\n    }\n  }, {\n    key: \"nonProgramIds\",\n    value: function nonProgramIds() {\n      var _this8 = this;\n      return this.accountKeys.filter(function (_, index) {\n        return !_this8.isProgramId(index);\n      });\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var numKeys = this.accountKeys.length;\n      var keyCount = [];\n      encodeLength(keyCount, numKeys);\n      var instructions = this.instructions.map(function (instruction) {\n        var accounts = instruction.accounts,\n          programIdIndex = instruction.programIdIndex;\n        var data = Array.from(bs58.decode(instruction.data));\n        var keyIndicesCount = [];\n        encodeLength(keyIndicesCount, accounts.length);\n        var dataCount = [];\n        encodeLength(dataCount, data.length);\n        return {\n          programIdIndex: programIdIndex,\n          keyIndicesCount: Buffer.from(keyIndicesCount),\n          keyIndices: accounts,\n          dataLength: Buffer.from(dataCount),\n          data: data\n        };\n      });\n      var instructionCount = [];\n      encodeLength(instructionCount, instructions.length);\n      var instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n      Buffer.from(instructionCount).copy(instructionBuffer);\n      var instructionBufferLength = instructionCount.length;\n      instructions.forEach(function (instruction) {\n        var instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n        var length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n        instructionBufferLength += length;\n      });\n      instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n      var signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n      var transaction = {\n        numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n        numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n        numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n        keyCount: Buffer.from(keyCount),\n        keys: this.accountKeys.map(function (key) {\n          return toBuffer(key.toBytes());\n        }),\n        recentBlockhash: bs58.decode(this.recentBlockhash)\n      };\n      var signData = Buffer.alloc(2048);\n      var length = signDataLayout.encode(transaction, signData);\n      instructionBuffer.copy(signData, length);\n      return signData.slice(0, length + instructionBuffer.length);\n    }\n\n    /**\n     * Decode a compiled message into a Message object.\n     */\n  }], [{\n    key: \"compile\",\n    value: function compile(args) {\n      var compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n      var _compiledKeys$getMess = compiledKeys.getMessageComponents(),\n        _compiledKeys$getMess2 = _slicedToArray(_compiledKeys$getMess, 2),\n        header = _compiledKeys$getMess2[0],\n        staticAccountKeys = _compiledKeys$getMess2[1];\n      var accountKeys = new MessageAccountKeys(staticAccountKeys);\n      var instructions = accountKeys.compileInstructions(args.instructions).map(function (ix) {\n        return {\n          programIdIndex: ix.programIdIndex,\n          accounts: ix.accountKeyIndexes,\n          data: bs58.encode(ix.data)\n        };\n      });\n      return new Message({\n        header: header,\n        accountKeys: staticAccountKeys,\n        recentBlockhash: args.recentBlockhash,\n        instructions: instructions\n      });\n    }\n  }, {\n    key: \"from\",\n    value: function from(buffer) {\n      // Slice up wire data\n      var byteArray = _toConsumableArray(buffer);\n      var numRequiredSignatures = byteArray.shift();\n      if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n        throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n      }\n      var numReadonlySignedAccounts = byteArray.shift();\n      var numReadonlyUnsignedAccounts = byteArray.shift();\n      var accountCount = decodeLength(byteArray);\n      var accountKeys = [];\n      for (var i = 0; i < accountCount; i++) {\n        var account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n        byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n        accountKeys.push(new PublicKey(Buffer.from(account)));\n      }\n      var recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      var instructionCount = decodeLength(byteArray);\n      var instructions = [];\n      for (var _i = 0; _i < instructionCount; _i++) {\n        var programIdIndex = byteArray.shift();\n        var _accountCount = decodeLength(byteArray);\n        var accounts = byteArray.slice(0, _accountCount);\n        byteArray = byteArray.slice(_accountCount);\n        var dataLength = decodeLength(byteArray);\n        var dataSlice = byteArray.slice(0, dataLength);\n        var data = bs58.encode(Buffer.from(dataSlice));\n        byteArray = byteArray.slice(dataLength);\n        instructions.push({\n          programIdIndex: programIdIndex,\n          accounts: accounts,\n          data: data\n        });\n      }\n      var messageArgs = {\n        header: {\n          numRequiredSignatures: numRequiredSignatures,\n          numReadonlySignedAccounts: numReadonlySignedAccounts,\n          numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts\n        },\n        recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n        accountKeys: accountKeys,\n        instructions: instructions\n      };\n      return new Message(messageArgs);\n    }\n  }]);\n  return Message;\n}();\n/**\n * Message constructor arguments\n */\nvar MessageV0 = /*#__PURE__*/function () {\n  function MessageV0(args) {\n    _classCallCheck(this, MessageV0);\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n  _createClass(MessageV0, [{\n    key: \"version\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"numAccountKeysFromLookups\",\n    get: function get() {\n      var count = 0;\n      var _iterator5 = _createForOfIteratorHelper(this.addressTableLookups),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var lookup = _step5.value;\n          count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      return count;\n    }\n  }, {\n    key: \"getAccountKeys\",\n    value: function getAccountKeys(args) {\n      var accountKeysFromLookups;\n      if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n        if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n          throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n        }\n        accountKeysFromLookups = args.accountKeysFromLookups;\n      } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n        accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n      } else if (this.addressTableLookups.length > 0) {\n        throw new Error('Failed to get account keys because address table lookups were not resolved');\n      }\n      return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n    }\n  }, {\n    key: \"isAccountSigner\",\n    value: function isAccountSigner(index) {\n      return index < this.header.numRequiredSignatures;\n    }\n  }, {\n    key: \"isAccountWritable\",\n    value: function isAccountWritable(index) {\n      var numSignedAccounts = this.header.numRequiredSignatures;\n      var numStaticAccountKeys = this.staticAccountKeys.length;\n      if (index >= numStaticAccountKeys) {\n        var lookupAccountKeysIndex = index - numStaticAccountKeys;\n        var numWritableLookupAccountKeys = this.addressTableLookups.reduce(function (count, lookup) {\n          return count + lookup.writableIndexes.length;\n        }, 0);\n        return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n      } else if (index >= this.header.numRequiredSignatures) {\n        var unsignedAccountIndex = index - numSignedAccounts;\n        var numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n        var numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n        return unsignedAccountIndex < numWritableUnsignedAccounts;\n      } else {\n        var numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n        return index < numWritableSignedAccounts;\n      }\n    }\n  }, {\n    key: \"resolveAddressTableLookups\",\n    value: function resolveAddressTableLookups(addressLookupTableAccounts) {\n      var accountKeysFromLookups = {\n        writable: [],\n        readonly: []\n      };\n      var _iterator6 = _createForOfIteratorHelper(this.addressTableLookups),\n        _step6;\n      try {\n        var _loop2 = function _loop2() {\n          var tableLookup = _step6.value;\n          var tableAccount = addressLookupTableAccounts.find(function (account) {\n            return account.key.equals(tableLookup.accountKey);\n          });\n          if (!tableAccount) {\n            throw new Error(\"Failed to find address lookup table account for table key \".concat(tableLookup.accountKey.toBase58()));\n          }\n          var _iterator7 = _createForOfIteratorHelper(tableLookup.writableIndexes),\n            _step7;\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var index = _step7.value;\n              if (index < tableAccount.state.addresses.length) {\n                accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n              } else {\n                throw new Error(\"Failed to find address for index \".concat(index, \" in address lookup table \").concat(tableLookup.accountKey.toBase58()));\n              }\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n          var _iterator8 = _createForOfIteratorHelper(tableLookup.readonlyIndexes),\n            _step8;\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var _index = _step8.value;\n              if (_index < tableAccount.state.addresses.length) {\n                accountKeysFromLookups.readonly.push(tableAccount.state.addresses[_index]);\n              } else {\n                throw new Error(\"Failed to find address for index \".concat(_index, \" in address lookup table \").concat(tableLookup.accountKey.toBase58()));\n              }\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n        };\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          _loop2();\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      return accountKeysFromLookups;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var encodedStaticAccountKeysLength = Array();\n      encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n      var serializedInstructions = this.serializeInstructions();\n      var encodedInstructionsLength = Array();\n      encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n      var serializedAddressTableLookups = this.serializeAddressTableLookups();\n      var encodedAddressTableLookupsLength = Array();\n      encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n      var messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n      var serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n      var MESSAGE_VERSION_0_PREFIX = 1 << 7;\n      var serializedMessageLength = messageLayout.encode({\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(function (key) {\n          return key.toBytes();\n        }),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions: serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n        serializedAddressTableLookups: serializedAddressTableLookups\n      }, serializedMessage);\n      return serializedMessage.slice(0, serializedMessageLength);\n    }\n  }, {\n    key: \"serializeInstructions\",\n    value: function serializeInstructions() {\n      var serializedLength = 0;\n      var serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n      var _iterator9 = _createForOfIteratorHelper(this.compiledInstructions),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var instruction = _step9.value;\n          var encodedAccountKeyIndexesLength = Array();\n          encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n          var encodedDataLength = Array();\n          encodeLength(encodedDataLength, instruction.data.length);\n          var instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n          serializedLength += instructionLayout.encode({\n            programIdIndex: instruction.programIdIndex,\n            encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n            accountKeyIndexes: instruction.accountKeyIndexes,\n            encodedDataLength: new Uint8Array(encodedDataLength),\n            data: instruction.data\n          }, serializedInstructions, serializedLength);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      return serializedInstructions.slice(0, serializedLength);\n    }\n  }, {\n    key: \"serializeAddressTableLookups\",\n    value: function serializeAddressTableLookups() {\n      var serializedLength = 0;\n      var serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n      var _iterator10 = _createForOfIteratorHelper(this.addressTableLookups),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var lookup = _step10.value;\n          var encodedWritableIndexesLength = Array();\n          encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n          var encodedReadonlyIndexesLength = Array();\n          encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n          var addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n          serializedLength += addressTableLookupLayout.encode({\n            accountKey: lookup.accountKey.toBytes(),\n            encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n            writableIndexes: lookup.writableIndexes,\n            encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n            readonlyIndexes: lookup.readonlyIndexes\n          }, serializedAddressTableLookups, serializedLength);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      return serializedAddressTableLookups.slice(0, serializedLength);\n    }\n  }], [{\n    key: \"compile\",\n    value: function compile(args) {\n      var compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n      var addressTableLookups = new Array();\n      var accountKeysFromLookups = {\n        writable: new Array(),\n        readonly: new Array()\n      };\n      var lookupTableAccounts = args.addressLookupTableAccounts || [];\n      var _iterator11 = _createForOfIteratorHelper(lookupTableAccounts),\n        _step11;\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var lookupTable = _step11.value;\n          var extractResult = compiledKeys.extractTableLookup(lookupTable);\n          if (extractResult !== undefined) {\n            var _accountKeysFromLooku, _accountKeysFromLooku2;\n            var _extractResult = _slicedToArray(extractResult, 2),\n              addressTableLookup = _extractResult[0],\n              _extractResult$ = _extractResult[1],\n              writable = _extractResult$.writable,\n              readonly = _extractResult$.readonly;\n            addressTableLookups.push(addressTableLookup);\n            (_accountKeysFromLooku = accountKeysFromLookups.writable).push.apply(_accountKeysFromLooku, _toConsumableArray(writable));\n            (_accountKeysFromLooku2 = accountKeysFromLookups.readonly).push.apply(_accountKeysFromLooku2, _toConsumableArray(readonly));\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n      var _compiledKeys$getMess3 = compiledKeys.getMessageComponents(),\n        _compiledKeys$getMess4 = _slicedToArray(_compiledKeys$getMess3, 2),\n        header = _compiledKeys$getMess4[0],\n        staticAccountKeys = _compiledKeys$getMess4[1];\n      var accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n      var compiledInstructions = accountKeys.compileInstructions(args.instructions);\n      return new MessageV0({\n        header: header,\n        staticAccountKeys: staticAccountKeys,\n        recentBlockhash: args.recentBlockhash,\n        compiledInstructions: compiledInstructions,\n        addressTableLookups: addressTableLookups\n      });\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(serializedMessage) {\n      var byteArray = _toConsumableArray(serializedMessage);\n      var prefix = byteArray.shift();\n      var maskedPrefix = prefix & VERSION_PREFIX_MASK;\n      assert(prefix !== maskedPrefix, \"Expected versioned message but received legacy message\");\n      var version = maskedPrefix;\n      assert(version === 0, \"Expected versioned message with version 0 but found version \".concat(version));\n      var header = {\n        numRequiredSignatures: byteArray.shift(),\n        numReadonlySignedAccounts: byteArray.shift(),\n        numReadonlyUnsignedAccounts: byteArray.shift()\n      };\n      var staticAccountKeys = [];\n      var staticAccountKeysLength = decodeLength(byteArray);\n      for (var i = 0; i < staticAccountKeysLength; i++) {\n        staticAccountKeys.push(new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)));\n      }\n      var recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      var instructionCount = decodeLength(byteArray);\n      var compiledInstructions = [];\n      for (var _i2 = 0; _i2 < instructionCount; _i2++) {\n        var programIdIndex = byteArray.shift();\n        var accountKeyIndexesLength = decodeLength(byteArray);\n        var accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n        var dataLength = decodeLength(byteArray);\n        var data = new Uint8Array(byteArray.splice(0, dataLength));\n        compiledInstructions.push({\n          programIdIndex: programIdIndex,\n          accountKeyIndexes: accountKeyIndexes,\n          data: data\n        });\n      }\n      var addressTableLookupsCount = decodeLength(byteArray);\n      var addressTableLookups = [];\n      for (var _i3 = 0; _i3 < addressTableLookupsCount; _i3++) {\n        var accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n        var writableIndexesLength = decodeLength(byteArray);\n        var writableIndexes = byteArray.splice(0, writableIndexesLength);\n        var readonlyIndexesLength = decodeLength(byteArray);\n        var readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n        addressTableLookups.push({\n          accountKey: accountKey,\n          writableIndexes: writableIndexes,\n          readonlyIndexes: readonlyIndexes\n        });\n      }\n      return new MessageV0({\n        header: header,\n        staticAccountKeys: staticAccountKeys,\n        recentBlockhash: recentBlockhash,\n        compiledInstructions: compiledInstructions,\n        addressTableLookups: addressTableLookups\n      });\n    }\n  }]);\n  return MessageV0;\n}(); // eslint-disable-next-line no-redeclare\nvar VersionedMessage = {\n  deserializeMessageVersion: function deserializeMessageVersion(serializedMessage) {\n    var prefix = serializedMessage[0];\n    var maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n  deserialize: function deserialize(serializedMessage) {\n    var version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\"Transaction message version \".concat(version, \" deserialization is not supported\"));\n    }\n  }\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nvar TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n  return TransactionStatus;\n}({});\n\n/**\n * Default (empty) signature\n */\nvar DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\n\n/**\n * Configuration object for Transaction.serialize()\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction Instruction class\n */\nvar TransactionInstruction = /*#__PURE__*/function () {\n  function TransactionInstruction(opts) {\n    _classCallCheck(this, TransactionInstruction);\n    /**\n     * Public keys to include in this transaction\n     * Boolean represents whether this pubkey needs to sign the transaction\n     */\n    this.keys = void 0;\n    /**\n     * Program Id to execute\n     */\n    this.programId = void 0;\n    /**\n     * Program input\n     */\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _createClass(TransactionInstruction, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        keys: this.keys.map(function (_ref17) {\n          var pubkey = _ref17.pubkey,\n            isSigner = _ref17.isSigner,\n            isWritable = _ref17.isWritable;\n          return {\n            pubkey: pubkey.toJSON(),\n            isSigner: isSigner,\n            isWritable: isWritable\n          };\n        }),\n        programId: this.programId.toJSON(),\n        data: _toConsumableArray(this.data)\n      };\n    }\n  }]);\n  return TransactionInstruction;\n}();\n/**\n * Pair of signature and corresponding public key\n */\n/**\n * List of Transaction object fields that may be initialized at construction\n */\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\n/**\n * Use these options to construct a durable nonce transaction.\n */\n/**\n * Nonce information to be used to build an offline Transaction.\n */\n/**\n * @internal\n */\n/**\n * Transaction class\n */\nvar Transaction = /*#__PURE__*/function () {\n  /**\n   * The transaction fee payer\n   */\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n\n  // Construct a transaction using a durable nonce\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  function Transaction(opts) {\n    _classCallCheck(this, Transaction);\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n    this.signatures = [];\n    this.feePayer = void 0;\n    /**\n     * The instructions to atomically execute\n     */\n    this.instructions = [];\n    /**\n     * A recent transaction id. Must be populated by the caller\n     */\n    this.recentBlockhash = void 0;\n    /**\n     * the last block chain can advance to before tx is declared expired\n     * */\n    this.lastValidBlockHeight = void 0;\n    /**\n     * Optional Nonce information. If populated, transaction will use a durable\n     * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n     */\n    this.nonceInfo = void 0;\n    /**\n     * If this is a nonce transaction this represents the minimum slot from which\n     * to evaluate if the nonce has advanced when attempting to confirm the\n     * transaction. This protects against a case where the transaction confirmation\n     * logic loads the nonce account from an old slot and assumes the mismatch in\n     * nonce value implies that the nonce has been advanced.\n     */\n    this.minNonceContextSlot = void 0;\n    /**\n     * @internal\n     */\n    this._message = void 0;\n    /**\n     * @internal\n     */\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      var minContextSlot = opts.minContextSlot,\n        nonceInfo = opts.nonceInfo;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      var blockhash = opts.blockhash,\n        lastValidBlockHeight = opts.lastValidBlockHeight;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      var recentBlockhash = opts.recentBlockhash,\n        _nonceInfo = opts.nonceInfo;\n      if (_nonceInfo) {\n        this.nonceInfo = _nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _createClass(Transaction, [{\n    key: \"signature\",\n    get:\n    /**\n     * The first (payer) Transaction signature\n     *\n     * @returns {Buffer | null} Buffer of payer's signature\n     */\n    function get() {\n      if (this.signatures.length > 0) {\n        return this.signatures[0].signature;\n      }\n      return null;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        recentBlockhash: this.recentBlockhash || null,\n        feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n        nonceInfo: this.nonceInfo ? {\n          nonce: this.nonceInfo.nonce,\n          nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n        } : null,\n        instructions: this.instructions.map(function (instruction) {\n          return instruction.toJSON();\n        }),\n        signers: this.signatures.map(function (_ref18) {\n          var publicKey = _ref18.publicKey;\n          return publicKey.toJSON();\n        })\n      };\n    }\n\n    /**\n     * Add one or more instructions to this Transaction\n     *\n     * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n     */\n  }, {\n    key: \"add\",\n    value: function add() {\n      var _this9 = this;\n      for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n        items[_key] = arguments[_key];\n      }\n      if (items.length === 0) {\n        throw new Error('No instructions');\n      }\n      items.forEach(function (item) {\n        if ('instructions' in item) {\n          _this9.instructions = _this9.instructions.concat(item.instructions);\n        } else if ('data' in item && 'programId' in item && 'keys' in item) {\n          _this9.instructions.push(item);\n        } else {\n          _this9.instructions.push(new TransactionInstruction(item));\n        }\n      });\n      return this;\n    }\n\n    /**\n     * Compile transaction data\n     */\n  }, {\n    key: \"compileMessage\",\n    value: function compileMessage() {\n      if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n        return this._message;\n      }\n      var recentBlockhash;\n      var instructions;\n      if (this.nonceInfo) {\n        recentBlockhash = this.nonceInfo.nonce;\n        if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n          instructions = [this.nonceInfo.nonceInstruction].concat(_toConsumableArray(this.instructions));\n        } else {\n          instructions = this.instructions;\n        }\n      } else {\n        recentBlockhash = this.recentBlockhash;\n        instructions = this.instructions;\n      }\n      if (!recentBlockhash) {\n        throw new Error('Transaction recentBlockhash required');\n      }\n      if (instructions.length < 1) {\n        console.warn('No instructions provided');\n      }\n      var feePayer;\n      if (this.feePayer) {\n        feePayer = this.feePayer;\n      } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n        // Use implicit fee payer\n        feePayer = this.signatures[0].publicKey;\n      } else {\n        throw new Error('Transaction fee payer required');\n      }\n      for (var i = 0; i < instructions.length; i++) {\n        if (instructions[i].programId === undefined) {\n          throw new Error(\"Transaction instruction index \".concat(i, \" has undefined program id\"));\n        }\n      }\n      var programIds = [];\n      var accountMetas = [];\n      instructions.forEach(function (instruction) {\n        instruction.keys.forEach(function (accountMeta) {\n          accountMetas.push(_objectSpread({}, accountMeta));\n        });\n        var programId = instruction.programId.toString();\n        if (!programIds.includes(programId)) {\n          programIds.push(programId);\n        }\n      });\n\n      // Append programID account metas\n      programIds.forEach(function (programId) {\n        accountMetas.push({\n          pubkey: new PublicKey(programId),\n          isSigner: false,\n          isWritable: false\n        });\n      });\n\n      // Cull duplicate account metas\n      var uniqueMetas = [];\n      accountMetas.forEach(function (accountMeta) {\n        var pubkeyString = accountMeta.pubkey.toString();\n        var uniqueIndex = uniqueMetas.findIndex(function (x) {\n          return x.pubkey.toString() === pubkeyString;\n        });\n        if (uniqueIndex > -1) {\n          uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n          uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n        } else {\n          uniqueMetas.push(accountMeta);\n        }\n      });\n\n      // Sort. Prioritizing first by signer, then by writable\n      uniqueMetas.sort(function (x, y) {\n        if (x.isSigner !== y.isSigner) {\n          // Signers always come before non-signers\n          return x.isSigner ? -1 : 1;\n        }\n        if (x.isWritable !== y.isWritable) {\n          // Writable accounts always come before read-only accounts\n          return x.isWritable ? -1 : 1;\n        }\n        // Otherwise, sort by pubkey, stringwise.\n        var options = {\n          localeMatcher: 'best fit',\n          usage: 'sort',\n          sensitivity: 'variant',\n          ignorePunctuation: false,\n          numeric: false,\n          caseFirst: 'lower'\n        };\n        return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58(), 'en', options);\n      });\n\n      // Move fee payer to the front\n      var feePayerIndex = uniqueMetas.findIndex(function (x) {\n        return x.pubkey.equals(feePayer);\n      });\n      if (feePayerIndex > -1) {\n        var _uniqueMetas$splice = uniqueMetas.splice(feePayerIndex, 1),\n          _uniqueMetas$splice2 = _slicedToArray(_uniqueMetas$splice, 1),\n          payerMeta = _uniqueMetas$splice2[0];\n        payerMeta.isSigner = true;\n        payerMeta.isWritable = true;\n        uniqueMetas.unshift(payerMeta);\n      } else {\n        uniqueMetas.unshift({\n          pubkey: feePayer,\n          isSigner: true,\n          isWritable: true\n        });\n      }\n\n      // Disallow unknown signers\n      var _iterator12 = _createForOfIteratorHelper(this.signatures),\n        _step12;\n      try {\n        var _loop3 = function _loop3() {\n          var signature = _step12.value;\n          var uniqueIndex = uniqueMetas.findIndex(function (x) {\n            return x.pubkey.equals(signature.publicKey);\n          });\n          if (uniqueIndex > -1) {\n            if (!uniqueMetas[uniqueIndex].isSigner) {\n              uniqueMetas[uniqueIndex].isSigner = true;\n              console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n            }\n          } else {\n            throw new Error(\"unknown signer: \".concat(signature.publicKey.toString()));\n          }\n        };\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          _loop3();\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n      var numRequiredSignatures = 0;\n      var numReadonlySignedAccounts = 0;\n      var numReadonlyUnsignedAccounts = 0;\n\n      // Split out signing from non-signing keys and count header values\n      var signedKeys = [];\n      var unsignedKeys = [];\n      uniqueMetas.forEach(function (_ref19) {\n        var pubkey = _ref19.pubkey,\n          isSigner = _ref19.isSigner,\n          isWritable = _ref19.isWritable;\n        if (isSigner) {\n          signedKeys.push(pubkey.toString());\n          numRequiredSignatures += 1;\n          if (!isWritable) {\n            numReadonlySignedAccounts += 1;\n          }\n        } else {\n          unsignedKeys.push(pubkey.toString());\n          if (!isWritable) {\n            numReadonlyUnsignedAccounts += 1;\n          }\n        }\n      });\n      var accountKeys = signedKeys.concat(unsignedKeys);\n      var compiledInstructions = instructions.map(function (instruction) {\n        var data = instruction.data,\n          programId = instruction.programId;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(function (meta) {\n            return accountKeys.indexOf(meta.pubkey.toString());\n          }),\n          data: bs58.encode(data)\n        };\n      });\n      compiledInstructions.forEach(function (instruction) {\n        assert(instruction.programIdIndex >= 0);\n        instruction.accounts.forEach(function (keyIndex) {\n          return assert(keyIndex >= 0);\n        });\n      });\n      return new Message({\n        header: {\n          numRequiredSignatures: numRequiredSignatures,\n          numReadonlySignedAccounts: numReadonlySignedAccounts,\n          numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts\n        },\n        accountKeys: accountKeys,\n        recentBlockhash: recentBlockhash,\n        instructions: compiledInstructions\n      });\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_compile\",\n    value: function _compile() {\n      var message = this.compileMessage();\n      var signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n      if (this.signatures.length === signedKeys.length) {\n        var valid = this.signatures.every(function (pair, index) {\n          return signedKeys[index].equals(pair.publicKey);\n        });\n        if (valid) return message;\n      }\n      this.signatures = signedKeys.map(function (publicKey) {\n        return {\n          signature: null,\n          publicKey: publicKey\n        };\n      });\n      return message;\n    }\n\n    /**\n     * Get a buffer of the Transaction data that need to be covered by signatures\n     */\n  }, {\n    key: \"serializeMessage\",\n    value: function serializeMessage() {\n      return this._compile().serialize();\n    }\n\n    /**\n     * Get the estimated fee associated with a transaction\n     *\n     * @param {Connection} connection Connection to RPC Endpoint.\n     *\n     * @returns {Promise<number | null>} The estimated fee for the transaction\n     */\n  }, {\n    key: \"getEstimatedFee\",\n    value: function () {\n      var _getEstimatedFee = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(connection) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return connection.getFeeForMessage(this.compileMessage());\n            case 2:\n              return _context4.abrupt(\"return\", _context4.sent.value);\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function getEstimatedFee(_x8) {\n        return _getEstimatedFee.apply(this, arguments);\n      }\n      return getEstimatedFee;\n    }()\n    /**\n     * Specify the public keys which will be used to sign the Transaction.\n     * The first signer will be used as the transaction fee payer account.\n     *\n     * Signatures can be added with either `partialSign` or `addSignature`\n     *\n     * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n     * specified and it can be set in the Transaction constructor or with the\n     * `feePayer` property.\n     */\n  }, {\n    key: \"setSigners\",\n    value: function setSigners() {\n      for (var _len2 = arguments.length, signers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        signers[_key2] = arguments[_key2];\n      }\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      }\n      var seen = new Set();\n      this.signatures = signers.filter(function (publicKey) {\n        var key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      }).map(function (publicKey) {\n        return {\n          signature: null,\n          publicKey: publicKey\n        };\n      });\n    }\n\n    /**\n     * Sign the Transaction with the specified signers. Multiple signatures may\n     * be applied to a Transaction. The first signature is considered \"primary\"\n     * and is used identify and confirm transactions.\n     *\n     * If the Transaction `feePayer` is not set, the first signer will be used\n     * as the transaction fee payer account.\n     *\n     * Transaction fields should not be modified after the first call to `sign`,\n     * as doing so may invalidate the signature and cause the Transaction to be\n     * rejected.\n     *\n     * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n     *\n     * @param {Array<Signer>} signers Array of signers that will sign the transaction\n     */\n  }, {\n    key: \"sign\",\n    value: function sign() {\n      for (var _len3 = arguments.length, signers = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        signers[_key3] = arguments[_key3];\n      }\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      }\n\n      // Dedupe signers\n      var seen = new Set();\n      var uniqueSigners = [];\n      for (var _i4 = 0, _signers = signers; _i4 < _signers.length; _i4++) {\n        var signer = _signers[_i4];\n        var key = signer.publicKey.toString();\n        if (seen.has(key)) {\n          continue;\n        } else {\n          seen.add(key);\n          uniqueSigners.push(signer);\n        }\n      }\n      this.signatures = uniqueSigners.map(function (signer) {\n        return {\n          signature: null,\n          publicKey: signer.publicKey\n        };\n      });\n      var message = this._compile();\n      this._partialSign.apply(this, [message].concat(uniqueSigners));\n    }\n\n    /**\n     * Partially sign a transaction with the specified accounts. All accounts must\n     * correspond to either the fee payer or a signer account in the transaction\n     * instructions.\n     *\n     * All the caveats from the `sign` method apply to `partialSign`\n     *\n     * @param {Array<Signer>} signers Array of signers that will sign the transaction\n     */\n  }, {\n    key: \"partialSign\",\n    value: function partialSign() {\n      for (var _len4 = arguments.length, signers = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        signers[_key4] = arguments[_key4];\n      }\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      }\n\n      // Dedupe signers\n      var seen = new Set();\n      var uniqueSigners = [];\n      for (var _i5 = 0, _signers2 = signers; _i5 < _signers2.length; _i5++) {\n        var signer = _signers2[_i5];\n        var key = signer.publicKey.toString();\n        if (seen.has(key)) {\n          continue;\n        } else {\n          seen.add(key);\n          uniqueSigners.push(signer);\n        }\n      }\n      var message = this._compile();\n      this._partialSign.apply(this, [message].concat(uniqueSigners));\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_partialSign\",\n    value: function _partialSign(message) {\n      var _this10 = this;\n      var signData = message.serialize();\n      for (var _len5 = arguments.length, signers = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        signers[_key5 - 1] = arguments[_key5];\n      }\n      signers.forEach(function (signer) {\n        var signature = _sign(signData, signer.secretKey);\n        _this10._addSignature(signer.publicKey, toBuffer(signature));\n      });\n    }\n\n    /**\n     * Add an externally created signature to a transaction. The public key\n     * must correspond to either the fee payer or a signer account in the transaction\n     * instructions.\n     *\n     * @param {PublicKey} pubkey Public key that will be added to the transaction.\n     * @param {Buffer} signature An externally created signature to add to the transaction.\n     */\n  }, {\n    key: \"addSignature\",\n    value: function addSignature(pubkey, signature) {\n      this._compile(); // Ensure signatures array is populated\n      this._addSignature(pubkey, signature);\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_addSignature\",\n    value: function _addSignature(pubkey, signature) {\n      assert(signature.length === 64);\n      var index = this.signatures.findIndex(function (sigpair) {\n        return pubkey.equals(sigpair.publicKey);\n      });\n      if (index < 0) {\n        throw new Error(\"unknown signer: \".concat(pubkey.toString()));\n      }\n      this.signatures[index].signature = Buffer.from(signature);\n    }\n\n    /**\n     * Verify signatures of a Transaction\n     * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n     * If no boolean is provided, we expect a fully signed Transaction by default.\n     *\n     * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n     */\n  }, {\n    key: \"verifySignatures\",\n    value: function verifySignatures(requireAllSignatures) {\n      return this._verifySignatures(this.serializeMessage(), requireAllSignatures === undefined ? true : requireAllSignatures);\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_verifySignatures\",\n    value: function _verifySignatures(signData, requireAllSignatures) {\n      var _iterator13 = _createForOfIteratorHelper(this.signatures),\n        _step13;\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var _step13$value = _step13.value,\n            _signature = _step13$value.signature,\n            _publicKey = _step13$value.publicKey;\n          if (_signature === null) {\n            if (requireAllSignatures) {\n              return false;\n            }\n          } else {\n            if (!verify(_signature, signData, _publicKey.toBytes())) {\n              return false;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n      return true;\n    }\n\n    /**\n     * Serialize the Transaction in the wire format.\n     *\n     * @param {Buffer} [config] Config of transaction.\n     *\n     * @returns {Buffer} Signature of transaction in wire format.\n     */\n  }, {\n    key: \"serialize\",\n    value: function serialize(config) {\n      var _Object$assign = Object.assign({\n          requireAllSignatures: true,\n          verifySignatures: true\n        }, config),\n        requireAllSignatures = _Object$assign.requireAllSignatures,\n        verifySignatures = _Object$assign.verifySignatures;\n      var signData = this.serializeMessage();\n      if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n        throw new Error('Signature verification failed');\n      }\n      return this._serialize(signData);\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_serialize\",\n    value: function _serialize(signData) {\n      var signatures = this.signatures;\n      var signatureCount = [];\n      encodeLength(signatureCount, signatures.length);\n      var transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n      var wireTransaction = Buffer.alloc(transactionLength);\n      assert(signatures.length < 256);\n      Buffer.from(signatureCount).copy(wireTransaction, 0);\n      signatures.forEach(function (_ref20, index) {\n        var signature = _ref20.signature;\n        if (signature !== null) {\n          assert(signature.length === 64, \"signature has invalid length\");\n          Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n        }\n      });\n      signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n      assert(wireTransaction.length <= PACKET_DATA_SIZE, \"Transaction too large: \".concat(wireTransaction.length, \" > \").concat(PACKET_DATA_SIZE));\n      return wireTransaction;\n    }\n\n    /**\n     * Deprecated method\n     * @internal\n     */\n  }, {\n    key: \"keys\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].keys.map(function (keyObj) {\n        return keyObj.pubkey;\n      });\n    }\n\n    /**\n     * Deprecated method\n     * @internal\n     */\n  }, {\n    key: \"programId\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].programId;\n    }\n\n    /**\n     * Deprecated method\n     * @internal\n     */\n  }, {\n    key: \"data\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].data;\n    }\n\n    /**\n     * Parse a wire transaction into a Transaction object.\n     *\n     * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n     *\n     * @returns {Transaction} Transaction associated with the signature\n     */\n  }], [{\n    key: \"from\",\n    value: function from(buffer) {\n      // Slice up wire data\n      var byteArray = _toConsumableArray(buffer);\n      var signatureCount = decodeLength(byteArray);\n      var signatures = [];\n      for (var i = 0; i < signatureCount; i++) {\n        var _signature2 = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n        byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n        signatures.push(bs58.encode(Buffer.from(_signature2)));\n      }\n      return Transaction.populate(Message.from(byteArray), signatures);\n    }\n\n    /**\n     * Populate Transaction object from message and signatures\n     *\n     * @param {Message} message Message of transaction\n     * @param {Array<string>} signatures List of signatures to assign to the transaction\n     *\n     * @returns {Transaction} The populated Transaction\n     */\n  }, {\n    key: \"populate\",\n    value: function populate(message) {\n      var signatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var transaction = new Transaction();\n      transaction.recentBlockhash = message.recentBlockhash;\n      if (message.header.numRequiredSignatures > 0) {\n        transaction.feePayer = message.accountKeys[0];\n      }\n      signatures.forEach(function (signature, index) {\n        var sigPubkeyPair = {\n          signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n          publicKey: message.accountKeys[index]\n        };\n        transaction.signatures.push(sigPubkeyPair);\n      });\n      message.instructions.forEach(function (instruction) {\n        var keys = instruction.accounts.map(function (account) {\n          var pubkey = message.accountKeys[account];\n          return {\n            pubkey: pubkey,\n            isSigner: transaction.signatures.some(function (keyObj) {\n              return keyObj.publicKey.toString() === pubkey.toString();\n            }) || message.isAccountSigner(account),\n            isWritable: message.isAccountWritable(account)\n          };\n        });\n        transaction.instructions.push(new TransactionInstruction({\n          keys: keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data)\n        }));\n      });\n      transaction._message = message;\n      transaction._json = transaction.toJSON();\n      return transaction;\n    }\n  }]);\n  return Transaction;\n}();\nvar TransactionMessage = /*#__PURE__*/function () {\n  function TransactionMessage(args) {\n    _classCallCheck(this, TransactionMessage);\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n  _createClass(TransactionMessage, [{\n    key: \"compileToLegacyMessage\",\n    value: function compileToLegacyMessage() {\n      return Message.compile({\n        payerKey: this.payerKey,\n        recentBlockhash: this.recentBlockhash,\n        instructions: this.instructions\n      });\n    }\n  }, {\n    key: \"compileToV0Message\",\n    value: function compileToV0Message(addressLookupTableAccounts) {\n      return MessageV0.compile({\n        payerKey: this.payerKey,\n        recentBlockhash: this.recentBlockhash,\n        instructions: this.instructions,\n        addressLookupTableAccounts: addressLookupTableAccounts\n      });\n    }\n  }], [{\n    key: \"decompile\",\n    value: function decompile(message, args) {\n      var header = message.header,\n        compiledInstructions = message.compiledInstructions,\n        recentBlockhash = message.recentBlockhash;\n      var numRequiredSignatures = header.numRequiredSignatures,\n        numReadonlySignedAccounts = header.numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts = header.numReadonlyUnsignedAccounts;\n      var numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n      assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n      var numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n      assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n      var accountKeys = message.getAccountKeys(args);\n      var payerKey = accountKeys.get(0);\n      if (payerKey === undefined) {\n        throw new Error('Failed to decompile message because no account keys were found');\n      }\n      var instructions = [];\n      var _iterator14 = _createForOfIteratorHelper(compiledInstructions),\n        _step14;\n      try {\n        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n          var compiledIx = _step14.value;\n          var keys = [];\n          var _iterator15 = _createForOfIteratorHelper(compiledIx.accountKeyIndexes),\n            _step15;\n          try {\n            for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n              var keyIndex = _step15.value;\n              var pubkey = accountKeys.get(keyIndex);\n              if (pubkey === undefined) {\n                throw new Error(\"Failed to find key for account key index \".concat(keyIndex));\n              }\n              var isSigner = keyIndex < numRequiredSignatures;\n              var isWritable = void 0;\n              if (isSigner) {\n                isWritable = keyIndex < numWritableSignedAccounts;\n              } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n                isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n              } else {\n                isWritable = keyIndex - accountKeys.staticAccountKeys.length <\n                // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n                accountKeys.accountKeysFromLookups.writable.length;\n              }\n              keys.push({\n                pubkey: pubkey,\n                isSigner: keyIndex < header.numRequiredSignatures,\n                isWritable: isWritable\n              });\n            }\n          } catch (err) {\n            _iterator15.e(err);\n          } finally {\n            _iterator15.f();\n          }\n          var programId = accountKeys.get(compiledIx.programIdIndex);\n          if (programId === undefined) {\n            throw new Error(\"Failed to find program id for program id index \".concat(compiledIx.programIdIndex));\n          }\n          instructions.push(new TransactionInstruction({\n            programId: programId,\n            data: toBuffer(compiledIx.data),\n            keys: keys\n          }));\n        }\n      } catch (err) {\n        _iterator14.e(err);\n      } finally {\n        _iterator14.f();\n      }\n      return new TransactionMessage({\n        payerKey: payerKey,\n        instructions: instructions,\n        recentBlockhash: recentBlockhash\n      });\n    }\n  }]);\n  return TransactionMessage;\n}();\n/**\n * Versioned transaction class\n */\nvar VersionedTransaction = /*#__PURE__*/function () {\n  function VersionedTransaction(message, signatures) {\n    _classCallCheck(this, VersionedTransaction);\n    this.signatures = void 0;\n    this.message = void 0;\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      var defaultSignatures = [];\n      for (var i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n  _createClass(VersionedTransaction, [{\n    key: \"version\",\n    get: function get() {\n      return this.message.version;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var serializedMessage = this.message.serialize();\n      var encodedSignaturesLength = Array();\n      encodeLength(encodedSignaturesLength, this.signatures.length);\n      var transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n      var serializedTransaction = new Uint8Array(2048);\n      var serializedTransactionLength = transactionLayout.encode({\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage: serializedMessage\n      }, serializedTransaction);\n      return serializedTransaction.slice(0, serializedTransactionLength);\n    }\n  }, {\n    key: \"sign\",\n    value: function sign(signers) {\n      var _this11 = this;\n      var messageData = this.message.serialize();\n      var signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n      var _iterator16 = _createForOfIteratorHelper(signers),\n        _step16;\n      try {\n        var _loop4 = function _loop4() {\n          var signer = _step16.value;\n          var signerIndex = signerPubkeys.findIndex(function (pubkey) {\n            return pubkey.equals(signer.publicKey);\n          });\n          assert(signerIndex >= 0, \"Cannot sign with non signer key \".concat(signer.publicKey.toBase58()));\n          _this11.signatures[signerIndex] = _sign(messageData, signer.secretKey);\n        };\n        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n          _loop4();\n        }\n      } catch (err) {\n        _iterator16.e(err);\n      } finally {\n        _iterator16.f();\n      }\n    }\n  }, {\n    key: \"addSignature\",\n    value: function addSignature(publicKey, signature) {\n      assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n      var signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n      var signerIndex = signerPubkeys.findIndex(function (pubkey) {\n        return pubkey.equals(publicKey);\n      });\n      assert(signerIndex >= 0, \"Can not add signature; `\".concat(publicKey.toBase58(), \"` is not required to sign this transaction\"));\n      this.signatures[signerIndex] = signature;\n    }\n  }], [{\n    key: \"deserialize\",\n    value: function deserialize(serializedTransaction) {\n      var byteArray = _toConsumableArray(serializedTransaction);\n      var signatures = [];\n      var signaturesLength = decodeLength(byteArray);\n      for (var i = 0; i < signaturesLength; i++) {\n        signatures.push(new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)));\n      }\n      var message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n      return new VersionedTransaction(message, signatures);\n    }\n  }]);\n  return VersionedTransaction;\n}(); // TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n/**\n * @internal\n */\nvar NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nvar DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nvar NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nvar MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\nvar SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nvar SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nvar SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nvar SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nvar SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nvar SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nvar SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nvar SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nvar SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nfunction sendAndConfirmTransaction(_x9, _x10, _x11, _x12) {\n  return _sendAndConfirmTransaction.apply(this, arguments);\n} // zzz\nfunction _sendAndConfirmTransaction() {\n  _sendAndConfirmTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee109(connection, transaction, signers, options) {\n    var sendOptions, signature, status, nonceInstruction, nonceAccountPubkey;\n    return _regeneratorRuntime().wrap(function _callee109$(_context109) {\n      while (1) switch (_context109.prev = _context109.next) {\n        case 0:\n          sendOptions = options && {\n            skipPreflight: options.skipPreflight,\n            preflightCommitment: options.preflightCommitment || options.commitment,\n            maxRetries: options.maxRetries,\n            minContextSlot: options.minContextSlot\n          };\n          _context109.next = 3;\n          return connection.sendTransaction(transaction, signers, sendOptions);\n        case 3:\n          signature = _context109.sent;\n          if (!(transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null)) {\n            _context109.next = 10;\n            break;\n          }\n          _context109.next = 7;\n          return connection.confirmTransaction({\n            abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n            signature: signature,\n            blockhash: transaction.recentBlockhash,\n            lastValidBlockHeight: transaction.lastValidBlockHeight\n          }, options && options.commitment);\n        case 7:\n          status = _context109.sent.value;\n          _context109.next = 22;\n          break;\n        case 10:\n          if (!(transaction.minNonceContextSlot != null && transaction.nonceInfo != null)) {\n            _context109.next = 18;\n            break;\n          }\n          nonceInstruction = transaction.nonceInfo.nonceInstruction;\n          nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n          _context109.next = 15;\n          return connection.confirmTransaction({\n            abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n            minContextSlot: transaction.minNonceContextSlot,\n            nonceAccountPubkey: nonceAccountPubkey,\n            nonceValue: transaction.nonceInfo.nonce,\n            signature: signature\n          }, options && options.commitment);\n        case 15:\n          status = _context109.sent.value;\n          _context109.next = 22;\n          break;\n        case 18:\n          if ((options === null || options === void 0 ? void 0 : options.abortSignal) != null) {\n            console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n          }\n          _context109.next = 21;\n          return connection.confirmTransaction(signature, options && options.commitment);\n        case 21:\n          status = _context109.sent.value;\n        case 22:\n          if (!status.err) {\n            _context109.next = 24;\n            break;\n          }\n          throw new Error(\"Transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n        case 24:\n          return _context109.abrupt(\"return\", signature);\n        case 25:\n        case \"end\":\n          return _context109.stop();\n      }\n    }, _callee109);\n  }));\n  return _sendAndConfirmTransaction.apply(this, arguments);\n}\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\n\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  var allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  var data = Buffer.alloc(allocLength);\n  var layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nfunction decodeData$1(type, buffer) {\n  var data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(\"invalid instruction; instruction index mismatch \".concat(data.instruction, \" != \").concat(type.index));\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nvar FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nvar NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nvar NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nvar NonceAccount = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function NonceAccount(args) {\n    _classCallCheck(this, NonceAccount);\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  _createClass(NonceAccount, null, [{\n    key: \"fromAccountData\",\n    value: function fromAccountData(buffer) {\n      var nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n      return new NonceAccount({\n        authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n        nonce: new PublicKey(nonceAccount.nonce).toString(),\n        feeCalculator: nonceAccount.feeCalculator\n      });\n    }\n  }]);\n  return NonceAccount;\n}();\nvar encodeDecode = function encodeDecode(layout) {\n  var decode = layout.decode.bind(layout);\n  var encode = layout.encode.bind(layout);\n  return {\n    decode: decode,\n    encode: encode\n  };\n};\nvar bigInt = function bigInt(length) {\n  return function (property) {\n    var layout = blob(length, property);\n    var _encodeDecode = encodeDecode(layout),\n      encode = _encodeDecode.encode,\n      decode = _encodeDecode.decode;\n    var bigIntLayout = layout;\n    bigIntLayout.decode = function (buffer, offset) {\n      var src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n    bigIntLayout.encode = function (bigInt, buffer, offset) {\n      var src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n  };\n};\nvar u64 = bigInt(8);\n\n/**\n * Create account system transaction params\n */\n\n/**\n * Transfer system transaction params\n */\n\n/**\n * Assign system transaction params\n */\n\n/**\n * Create account with seed system transaction params\n */\n\n/**\n * Create nonce account system transaction params\n */\n\n/**\n * Create nonce account with seed system transaction params\n */\n\n/**\n * Initialize nonce account system instruction params\n */\n\n/**\n * Advance nonce account system instruction params\n */\n\n/**\n * Withdraw nonce account system transaction params\n */\n\n/**\n * Authorize nonce account system transaction params\n */\n\n/**\n * Allocate account system transaction params\n */\n\n/**\n * Allocate account with seed system transaction params\n */\n\n/**\n * Assign account with seed system transaction params\n */\n\n/**\n * Transfer with seed system transaction params\n */\n\n/** Decoded transfer system transaction instruction */\n\n/** Decoded transferWithSeed system transaction instruction */\n\n/**\n * System Instruction class\n */\nvar SystemInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function SystemInstruction() {\n    _classCallCheck(this, SystemInstruction);\n  }\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  _createClass(SystemInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n      for (var _i6 = 0, _Object$entries = Object.entries(SYSTEM_INSTRUCTION_LAYOUTS); _i6 < _Object$entries.length; _i6++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i6], 2),\n          ixType = _Object$entries$_i[0],\n          layout = _Object$entries$_i[1];\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a SystemInstruction');\n      }\n      return type;\n    }\n\n    /**\n     * Decode a create account system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeCreateAccount\",\n    value: function decodeCreateAccount(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n      var _decodeData$ = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data),\n        lamports = _decodeData$.lamports,\n        space = _decodeData$.space,\n        programId = _decodeData$.programId;\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        newAccountPubkey: instruction.keys[1].pubkey,\n        lamports: lamports,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n\n    /**\n     * Decode a transfer system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeTransfer\",\n    value: function decodeTransfer(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n      var _decodeData$2 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data),\n        lamports = _decodeData$2.lamports;\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        lamports: lamports\n      };\n    }\n\n    /**\n     * Decode a transfer with seed system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeTransferWithSeed\",\n    value: function decodeTransferWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData$3 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data),\n        lamports = _decodeData$3.lamports,\n        seed = _decodeData$3.seed,\n        programId = _decodeData$3.programId;\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        basePubkey: instruction.keys[1].pubkey,\n        toPubkey: instruction.keys[2].pubkey,\n        lamports: lamports,\n        seed: seed,\n        programId: new PublicKey(programId)\n      };\n    }\n\n    /**\n     * Decode an allocate system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAllocate\",\n    value: function decodeAllocate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n      var _decodeData$4 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data),\n        space = _decodeData$4.space;\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        space: space\n      };\n    }\n\n    /**\n     * Decode an allocate with seed system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAllocateWithSeed\",\n    value: function decodeAllocateWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n      var _decodeData$5 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data),\n        base = _decodeData$5.base,\n        seed = _decodeData$5.seed,\n        space = _decodeData$5.space,\n        programId = _decodeData$5.programId;\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n\n    /**\n     * Decode an assign system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAssign\",\n    value: function decodeAssign(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n      var _decodeData$6 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data),\n        programId = _decodeData$6.programId;\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        programId: new PublicKey(programId)\n      };\n    }\n\n    /**\n     * Decode an assign with seed system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAssignWithSeed\",\n    value: function decodeAssignWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n      var _decodeData$7 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data),\n        base = _decodeData$7.base,\n        seed = _decodeData$7.seed,\n        programId = _decodeData$7.programId;\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        programId: new PublicKey(programId)\n      };\n    }\n\n    /**\n     * Decode a create account with seed system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeCreateWithSeed\",\n    value: function decodeCreateWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n      var _decodeData$8 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data),\n        base = _decodeData$8.base,\n        seed = _decodeData$8.seed,\n        lamports = _decodeData$8.lamports,\n        space = _decodeData$8.space,\n        programId = _decodeData$8.programId;\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        newAccountPubkey: instruction.keys[1].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        lamports: lamports,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n\n    /**\n     * Decode a nonce initialize system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeNonceInitialize\",\n    value: function decodeNonceInitialize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData$9 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data),\n        authorized = _decodeData$9.authorized;\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: new PublicKey(authorized)\n      };\n    }\n\n    /**\n     * Decode a nonce advance system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeNonceAdvance\",\n    value: function decodeNonceAdvance(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey\n      };\n    }\n\n    /**\n     * Decode a nonce withdraw system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeNonceWithdraw\",\n    value: function decodeNonceWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 5);\n      var _decodeData$10 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data),\n        lamports = _decodeData$10.lamports;\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey,\n        lamports: lamports\n      };\n    }\n\n    /**\n     * Decode a nonce authorize system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeNonceAuthorize\",\n    value: function decodeNonceAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n      var _decodeData$11 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data),\n        authorized = _decodeData$11.authorized;\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[1].pubkey,\n        newAuthorizedPubkey: new PublicKey(authorized)\n      };\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(SystemProgram.programId)) {\n        throw new Error('invalid instruction; programId is not SystemProgram');\n      }\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n  return SystemInstruction;\n}();\n/**\n * An enumeration of valid SystemInstructionType's\n */\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nvar SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nvar SystemProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function SystemProgram() {\n    _classCallCheck(this, SystemProgram);\n  }\n\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  _createClass(SystemProgram, null, [{\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n      var data = encodeData(type, {\n        lamports: params.lamports,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.fromPubkey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: params.newAccountPubkey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a transaction instruction that transfers lamports from one account to another\n     */\n  }, {\n    key: \"transfer\",\n    value: function transfer(params) {\n      var data;\n      var keys;\n      if ('basePubkey' in params) {\n        var _type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n        data = encodeData(_type, {\n          lamports: BigInt(params.lamports),\n          seed: params.seed,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.fromPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }];\n      } else {\n        var _type2 = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n        data = encodeData(_type2, {\n          lamports: BigInt(params.lamports)\n        });\n        keys = [{\n          pubkey: params.fromPubkey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }];\n      }\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a transaction instruction that assigns an account to a program\n     */\n  }, {\n    key: \"assign\",\n    value: function assign(params) {\n      var data;\n      var keys;\n      if ('basePubkey' in params) {\n        var _type3 = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n        data = encodeData(_type3, {\n          base: toBuffer(params.basePubkey.toBuffer()),\n          seed: params.seed,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }];\n      } else {\n        var _type4 = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n        data = encodeData(_type4, {\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: true,\n          isWritable: true\n        }];\n      }\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a transaction instruction that creates a new account at\n     *   an address generated with `from`, a seed, and programId\n     */\n  }, {\n    key: \"createAccountWithSeed\",\n    value: function createAccountWithSeed(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n      var data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        lamports: params.lamports,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      var keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n      if (params.basePubkey != params.fromPubkey) {\n        keys.push({\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        });\n      }\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a transaction that creates a new Nonce account\n     */\n  }, {\n    key: \"createNonceAccount\",\n    value: function createNonceAccount(params) {\n      var transaction = new Transaction();\n      if ('basePubkey' in params && 'seed' in params) {\n        transaction.add(SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId\n        }));\n      } else {\n        transaction.add(SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId\n        }));\n      }\n      var initParams = {\n        noncePubkey: params.noncePubkey,\n        authorizedPubkey: params.authorizedPubkey\n      };\n      transaction.add(this.nonceInitialize(initParams));\n      return transaction;\n    }\n\n    /**\n     * Generate an instruction to initialize a Nonce account\n     */\n  }, {\n    key: \"nonceInitialize\",\n    value: function nonceInitialize(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n      var data = encodeData(type, {\n        authorized: toBuffer(params.authorizedPubkey.toBuffer())\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n\n    /**\n     * Generate an instruction to advance the nonce in a Nonce account\n     */\n  }, {\n    key: \"nonceAdvance\",\n    value: function nonceAdvance(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n      var data = encodeData(type);\n      var instructionData = {\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n\n    /**\n     * Generate a transaction instruction that withdraws lamports from a Nonce account\n     */\n  }, {\n    key: \"nonceWithdraw\",\n    value: function nonceWithdraw(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n      var data = encodeData(type, {\n        lamports: params.lamports\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a transaction instruction that authorizes a new PublicKey as the authority\n     * on a Nonce account.\n     */\n  }, {\n    key: \"nonceAuthorize\",\n    value: function nonceAuthorize(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n      var data = encodeData(type, {\n        authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a transaction instruction that allocates space in an account without funding\n     */\n  }, {\n    key: \"allocate\",\n    value: function allocate(params) {\n      var data;\n      var keys;\n      if ('basePubkey' in params) {\n        var _type5 = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n        data = encodeData(_type5, {\n          base: toBuffer(params.basePubkey.toBuffer()),\n          seed: params.seed,\n          space: params.space,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }];\n      } else {\n        var _type6 = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n        data = encodeData(_type6, {\n          space: params.space\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: true,\n          isWritable: true\n        }];\n      }\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n  return SystemProgram;\n}();\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nvar CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nvar Loader = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Loader() {\n    _classCallCheck(this, Loader);\n  }\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  _createClass(Loader, null, [{\n    key: \"getMinNumSignatures\",\n    value: function getMinNumSignatures(dataLength) {\n      return 2 * (\n      // Every transaction requires two signatures (payer + program)\n      Math.ceil(dataLength / Loader.chunkSize) + 1 +\n      // Add one for Create transaction\n      1) // Add one for Finalize transaction\n      ;\n    }\n\n    /**\n     * Loads a generic program\n     *\n     * @param connection The connection to use\n     * @param payer System account that pays to load the program\n     * @param program Account to load the program into\n     * @param programId Public key that identifies the loader\n     * @param data Program octets\n     * @return true if program was loaded successfully, false if program was already loaded\n     */\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(connection, payer, program, programId, data) {\n        var balanceNeeded, programInfo, transaction, dataLayout, chunkSize, offset, array, transactions, bytes, _data, _transaction, REQUESTS_PER_SECOND, _dataLayout, _data2, _transaction2, deployCommitment, finalizeSignature, _yield$connection$con, context, value, currentSlot;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return connection.getMinimumBalanceForRentExemption(data.length);\n            case 2:\n              balanceNeeded = _context5.sent;\n              _context5.next = 5;\n              return connection.getAccountInfo(program.publicKey, 'confirmed');\n            case 5:\n              programInfo = _context5.sent;\n              transaction = null;\n              if (!(programInfo !== null)) {\n                _context5.next = 16;\n                break;\n              }\n              if (!programInfo.executable) {\n                _context5.next = 11;\n                break;\n              }\n              console.error('Program load failed, account is already executable');\n              return _context5.abrupt(\"return\", false);\n            case 11:\n              if (programInfo.data.length !== data.length) {\n                transaction = transaction || new Transaction();\n                transaction.add(SystemProgram.allocate({\n                  accountPubkey: program.publicKey,\n                  space: data.length\n                }));\n              }\n              if (!programInfo.owner.equals(programId)) {\n                transaction = transaction || new Transaction();\n                transaction.add(SystemProgram.assign({\n                  accountPubkey: program.publicKey,\n                  programId: programId\n                }));\n              }\n              if (programInfo.lamports < balanceNeeded) {\n                transaction = transaction || new Transaction();\n                transaction.add(SystemProgram.transfer({\n                  fromPubkey: payer.publicKey,\n                  toPubkey: program.publicKey,\n                  lamports: balanceNeeded - programInfo.lamports\n                }));\n              }\n              _context5.next = 17;\n              break;\n            case 16:\n              transaction = new Transaction().add(SystemProgram.createAccount({\n                fromPubkey: payer.publicKey,\n                newAccountPubkey: program.publicKey,\n                lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n                space: data.length,\n                programId: programId\n              }));\n            case 17:\n              if (!(transaction !== null)) {\n                _context5.next = 20;\n                break;\n              }\n              _context5.next = 20;\n              return sendAndConfirmTransaction(connection, transaction, [payer, program], {\n                commitment: 'confirmed'\n              });\n            case 20:\n              dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n              chunkSize = Loader.chunkSize;\n              offset = 0;\n              array = data;\n              transactions = [];\n            case 25:\n              if (!(array.length > 0)) {\n                _context5.next = 39;\n                break;\n              }\n              bytes = array.slice(0, chunkSize);\n              _data = Buffer.alloc(chunkSize + 16);\n              dataLayout.encode({\n                instruction: 0,\n                // Load instruction\n                offset: offset,\n                bytes: bytes,\n                bytesLength: 0,\n                bytesLengthPadding: 0\n              }, _data);\n              _transaction = new Transaction().add({\n                keys: [{\n                  pubkey: program.publicKey,\n                  isSigner: true,\n                  isWritable: true\n                }],\n                programId: programId,\n                data: _data\n              });\n              transactions.push(sendAndConfirmTransaction(connection, _transaction, [payer, program], {\n                commitment: 'confirmed'\n              }));\n\n              // Delay between sends in an attempt to reduce rate limit errors\n              if (!connection._rpcEndpoint.includes('solana.com')) {\n                _context5.next = 35;\n                break;\n              }\n              REQUESTS_PER_SECOND = 4;\n              _context5.next = 35;\n              return sleep(1000 / REQUESTS_PER_SECOND);\n            case 35:\n              offset += chunkSize;\n              array = array.slice(chunkSize);\n              _context5.next = 25;\n              break;\n            case 39:\n              _context5.next = 41;\n              return Promise.all(transactions);\n            case 41:\n              _dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n              _data2 = Buffer.alloc(_dataLayout.span);\n              _dataLayout.encode({\n                instruction: 1 // Finalize instruction\n              }, _data2);\n              _transaction2 = new Transaction().add({\n                keys: [{\n                  pubkey: program.publicKey,\n                  isSigner: true,\n                  isWritable: true\n                }, {\n                  pubkey: SYSVAR_RENT_PUBKEY,\n                  isSigner: false,\n                  isWritable: false\n                }],\n                programId: programId,\n                data: _data2\n              });\n              deployCommitment = 'processed';\n              _context5.next = 48;\n              return connection.sendTransaction(_transaction2, [payer, program], {\n                preflightCommitment: deployCommitment\n              });\n            case 48:\n              finalizeSignature = _context5.sent;\n              _context5.next = 51;\n              return connection.confirmTransaction({\n                signature: finalizeSignature,\n                lastValidBlockHeight: _transaction2.lastValidBlockHeight,\n                blockhash: _transaction2.recentBlockhash\n              }, deployCommitment);\n            case 51:\n              _yield$connection$con = _context5.sent;\n              context = _yield$connection$con.context;\n              value = _yield$connection$con.value;\n              if (!value.err) {\n                _context5.next = 56;\n                break;\n              }\n              throw new Error(\"Transaction \".concat(finalizeSignature, \" failed (\").concat(JSON.stringify(value), \")\"));\n            case 56:\n              if (!true // eslint-disable-line no-constant-condition\n              ) {\n                _context5.next = 71;\n                break;\n              }\n              _context5.prev = 57;\n              _context5.next = 60;\n              return connection.getSlot({\n                commitment: deployCommitment\n              });\n            case 60:\n              currentSlot = _context5.sent;\n              if (!(currentSlot > context.slot)) {\n                _context5.next = 63;\n                break;\n              }\n              return _context5.abrupt(\"break\", 71);\n            case 63:\n              _context5.next = 67;\n              break;\n            case 65:\n              _context5.prev = 65;\n              _context5.t0 = _context5[\"catch\"](57);\n            case 67:\n              _context5.next = 69;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, Math.round(MS_PER_SLOT / 2));\n              });\n            case 69:\n              _context5.next = 56;\n              break;\n            case 71:\n              return _context5.abrupt(\"return\", true);\n            case 72:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, null, [[57, 65]]);\n      }));\n      function load(_x13, _x14, _x15, _x16, _x17) {\n        return _load.apply(this, arguments);\n      }\n      return load;\n    }()\n  }]);\n  return Loader;\n}();\nLoader.chunkSize = CHUNK_SIZE;\nvar BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nvar BpfLoader = /*#__PURE__*/function () {\n  function BpfLoader() {\n    _classCallCheck(this, BpfLoader);\n  }\n  _createClass(BpfLoader, null, [{\n    key: \"getMinNumSignatures\",\n    value:\n    /**\n     * Minimum number of signatures required to load a program not including\n     * retries\n     *\n     * Can be used to calculate transaction fees\n     */\n    function getMinNumSignatures(dataLength) {\n      return Loader.getMinNumSignatures(dataLength);\n    }\n\n    /**\n     * Load a SBF program\n     *\n     * @param connection The connection to use\n     * @param payer Account that will pay program loading fees\n     * @param program Account to load the program into\n     * @param elf The entire ELF containing the SBF program\n     * @param loaderProgramId The program id of the BPF loader to use\n     * @return true if program was loaded successfully, false if program was already loaded\n     */\n  }, {\n    key: \"load\",\n    value: function load(connection, payer, program, elf, loaderProgramId) {\n      return Loader.load(connection, payer, program, loaderProgramId, elf);\n    }\n  }]);\n  return BpfLoader;\n}();\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\nvar objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var name in obj) {\n    keys.push(name);\n  }\n  return keys;\n};\nfunction stringify(val, isArrayProp) {\n  var i, max, str, keys, key, propVal, toStr;\n  if (val === true) {\n    return \"true\";\n  }\n  if (val === false) {\n    return \"false\";\n  }\n  switch (typeof val) {\n    case \"object\":\n      if (val === null) {\n        return null;\n      } else if (val.toJSON && typeof val.toJSON === \"function\") {\n        return stringify(val.toJSON(), isArrayProp);\n      } else {\n        toStr = objToString.call(val);\n        if (toStr === \"[object Array]\") {\n          str = '[';\n          max = val.length - 1;\n          for (i = 0; i < max; i++) {\n            str += stringify(val[i], true) + ',';\n          }\n          if (max > -1) {\n            str += stringify(val[i], true);\n          }\n          return str + ']';\n        } else if (toStr === \"[object Object]\") {\n          // only object is left\n          keys = objKeys(val).sort();\n          max = keys.length;\n          str = \"\";\n          i = 0;\n          while (i < max) {\n            key = keys[i];\n            propVal = stringify(val[key], false);\n            if (propVal !== undefined) {\n              if (str) {\n                str += ',';\n              }\n              str += JSON.stringify(key) + ':' + propVal;\n            }\n            i++;\n          }\n          return '{' + str + '}';\n        } else {\n          return JSON.stringify(val);\n        }\n      }\n    case \"function\":\n    case \"undefined\":\n      return isArrayProp ? null : undefined;\n    case \"string\":\n      return JSON.stringify(val);\n    default:\n      return isFinite(val) ? val : null;\n  }\n}\nvar fastStableStringify = function fastStableStringify(val) {\n  var returnVal = stringify(val, false);\n  if (returnVal !== undefined) {\n    return '' + returnVal;\n  }\n};\nvar fastStableStringify$1 = /*@__PURE__*/getDefaultExportFromCjs(fastStableStringify);\nvar MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n) {\n  var trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nvar EpochSchedule = /*#__PURE__*/function () {\n  function EpochSchedule(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    _classCallCheck(this, EpochSchedule);\n    /** The maximum number of slots in each epoch */\n    this.slotsPerEpoch = void 0;\n    /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n    this.leaderScheduleSlotOffset = void 0;\n    /** Indicates whether epochs start short and grow */\n    this.warmup = void 0;\n    /** The first epoch with `slotsPerEpoch` slots */\n    this.firstNormalEpoch = void 0;\n    /** The first slot of `firstNormalEpoch` */\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  _createClass(EpochSchedule, [{\n    key: \"getEpoch\",\n    value: function getEpoch(slot) {\n      return this.getEpochAndSlotIndex(slot)[0];\n    }\n  }, {\n    key: \"getEpochAndSlotIndex\",\n    value: function getEpochAndSlotIndex(slot) {\n      if (slot < this.firstNormalSlot) {\n        var epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n        var epochLen = this.getSlotsInEpoch(epoch);\n        var slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n        return [epoch, slotIndex];\n      } else {\n        var normalSlotIndex = slot - this.firstNormalSlot;\n        var normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n        var _epoch = this.firstNormalEpoch + normalEpochIndex;\n        var _slotIndex = normalSlotIndex % this.slotsPerEpoch;\n        return [_epoch, _slotIndex];\n      }\n    }\n  }, {\n    key: \"getFirstSlotInEpoch\",\n    value: function getFirstSlotInEpoch(epoch) {\n      if (epoch <= this.firstNormalEpoch) {\n        return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n      } else {\n        return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n      }\n    }\n  }, {\n    key: \"getLastSlotInEpoch\",\n    value: function getLastSlotInEpoch(epoch) {\n      return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n    }\n  }, {\n    key: \"getSlotsInEpoch\",\n    value: function getSlotsInEpoch(epoch) {\n      if (epoch < this.firstNormalEpoch) {\n        return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n      } else {\n        return this.slotsPerEpoch;\n      }\n    }\n  }]);\n  return EpochSchedule;\n}();\nvar SendTransactionError = /*#__PURE__*/function (_Error4) {\n  _inherits(SendTransactionError, _Error4);\n  var _super6 = _createSuper(SendTransactionError);\n  function SendTransactionError(message, logs) {\n    var _this12;\n    _classCallCheck(this, SendTransactionError);\n    _this12 = _super6.call(this, message);\n    _this12.logs = void 0;\n    _this12.logs = logs;\n    return _this12;\n  }\n  return _createClass(SendTransactionError);\n}( /*#__PURE__*/_wrapNativeSuper(Error)); // Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nvar SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nvar SolanaJSONRPCError = /*#__PURE__*/function (_Error5) {\n  _inherits(SolanaJSONRPCError, _Error5);\n  var _super7 = _createSuper(SolanaJSONRPCError);\n  function SolanaJSONRPCError(_ref21, customMessage) {\n    var _this13;\n    var code = _ref21.code,\n      message = _ref21.message,\n      data = _ref21.data;\n    _classCallCheck(this, SolanaJSONRPCError);\n    _this13 = _super7.call(this, customMessage != null ? \"\".concat(customMessage, \": \").concat(message) : message);\n    _this13.code = void 0;\n    _this13.data = void 0;\n    _this13.code = code;\n    _this13.data = data;\n    _this13.name = 'SolanaJSONRPCError';\n    return _this13;\n  }\n  return _createClass(SolanaJSONRPCError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar fetchImpl = globalThis.fetch;\nvar RpcWebSocketClient = /*#__PURE__*/function (_RpcWebSocketCommonCl) {\n  _inherits(RpcWebSocketClient, _RpcWebSocketCommonCl);\n  var _super8 = _createSuper(RpcWebSocketClient);\n  function RpcWebSocketClient(address, options, generate_request_id) {\n    var _this14;\n    _classCallCheck(this, RpcWebSocketClient);\n    var webSocketFactory = function webSocketFactory(url) {\n      var rpc = createRpc(url, _objectSpread({\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000\n      }, options));\n      if ('socket' in rpc) {\n        _this14.underlyingSocket = rpc.socket;\n      } else {\n        _this14.underlyingSocket = rpc;\n      }\n      return rpc;\n    };\n    _this14 = _super8.call(this, webSocketFactory, address, options, generate_request_id);\n    _this14.underlyingSocket = void 0;\n    return _this14;\n  }\n  _createClass(RpcWebSocketClient, [{\n    key: \"call\",\n    value: function call() {\n      var _this$underlyingSocke;\n      var readyState = (_this$underlyingSocke = this.underlyingSocket) === null || _this$underlyingSocke === void 0 ? void 0 : _this$underlyingSocke.readyState;\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      if (readyState === 1 /* WebSocket.OPEN */) {\n        var _get2;\n        return (_get2 = _get(_getPrototypeOf(RpcWebSocketClient.prototype), \"call\", this)).call.apply(_get2, [this].concat(args));\n      }\n      return Promise.reject(new Error('Tried to call a JSON-RPC method `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n    }\n  }, {\n    key: \"notify\",\n    value: function notify() {\n      var _this$underlyingSocke2;\n      var readyState = (_this$underlyingSocke2 = this.underlyingSocket) === null || _this$underlyingSocke2 === void 0 ? void 0 : _this$underlyingSocke2.readyState;\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n      if (readyState === 1 /* WebSocket.OPEN */) {\n        var _get3;\n        return (_get3 = _get(_getPrototypeOf(RpcWebSocketClient.prototype), \"notify\", this)).call.apply(_get3, [this].concat(args));\n      }\n      return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n    }\n  }]);\n  return RpcWebSocketClient;\n}(RpcWebSocketCommonClient);\n/**\n * @internal\n */\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  var decoded;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\"invalid account data; account type mismatch \".concat(decoded.typeIndex, \" != \").concat(type.index));\n  }\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nvar LOOKUP_TABLE_META_SIZE = 56;\nvar AddressLookupTableAccount = /*#__PURE__*/function () {\n  function AddressLookupTableAccount(args) {\n    _classCallCheck(this, AddressLookupTableAccount);\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n  _createClass(AddressLookupTableAccount, [{\n    key: \"isActive\",\n    value: function isActive() {\n      var U64_MAX = BigInt('0xffffffffffffffff');\n      return this.state.deactivationSlot === U64_MAX;\n    }\n  }], [{\n    key: \"deserialize\",\n    value: function deserialize(accountData) {\n      var meta = decodeData(LookupTableMetaLayout, accountData);\n      var serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n      assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n      assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n      var numSerializedAddresses = serializedAddressesLen / 32;\n      var _BufferLayout$struct$ = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE)),\n        addresses = _BufferLayout$struct$.addresses;\n      return {\n        deactivationSlot: meta.deactivationSlot,\n        lastExtendedSlot: meta.lastExtendedSlot,\n        lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n        authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n        addresses: addresses.map(function (address) {\n          return new PublicKey(address);\n        })\n      };\n    }\n  }]);\n  return AddressLookupTableAccount;\n}();\nvar LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(),\n  // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\nvar URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  var matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(\"Failed to validate endpoint URL `\".concat(endpoint, \"`\"));\n  }\n  var _matches = _slicedToArray(matches, 4),\n    _ = _matches[0],\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish = _matches[1],\n    portWithColon = _matches[2],\n    rest = _matches[3];\n  var protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  var startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  var websocketPort =\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : \":\".concat(startPort + 1);\n  return \"\".concat(protocol, \"//\").concat(hostish).concat(websocketPort).concat(rest);\n}\nvar PublicKeyFromString = coerce(instance(PublicKey), string(), function (value) {\n  return new PublicKey(value);\n});\nvar RawAccountDataResult = tuple([string(), literal('base64')]);\nvar BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, function (value) {\n  return Buffer.from(value[0], 'base64');\n});\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nvar BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/** @internal */\n/** @internal */\n/** @internal */\n/** @internal */\n\n/** @internal */\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\n\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\n\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\n\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\n\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\n\n/**\n * @internal\n */\n\n/**\n * Extra contextual information for RPC responses\n */\n\n/**\n * Options for sending transactions\n */\n\n/**\n * Options for confirming transactions\n */\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\n\n/**\n * Options for getSignaturesForAddress\n */\n\n/**\n * RPC Response with extra contextual information\n */\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\n\n/**\n * This type represents all transaction confirmation strategies\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  var commitment;\n  var config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    var specifiedCommitment = commitmentOrConfig.commitment,\n      specifiedConfig = _objectWithoutProperties(commitmentOrConfig, _excluded);\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment: commitment,\n    config: config\n  };\n}\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result: result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nvar UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, function (value) {\n    if ('error' in value) {\n      return value;\n    } else {\n      return _objectSpread(_objectSpread({}, value), {}, {\n        result: create(value.result, schema)\n      });\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value: value\n  }));\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value: value\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(function (accountKey) {\n        return new PublicKey(accountKey);\n      }),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(function (ix) {\n        return {\n          programIdIndex: ix.programIdIndex,\n          accountKeyIndexes: ix.accounts,\n          data: bs58.decode(ix.data)\n        };\n      }),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n// Deprecated as of v1.5.5\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\n/**\n * Configuration object for changing `getBalance` query behavior\n */\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\n/**\n * Configuration object for changing `getSlot` query behavior\n */\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\n/**\n * Configuration object for changing `getSupply` request behavior\n */\n/**\n * Configuration object for changing query behavior\n */\n/**\n * Information describing a cluster node\n */\n/**\n * Information describing a vote account\n */\n/**\n * A collection of cluster vote accounts\n */\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nvar GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nvar GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number(),\n  commission: optional(nullable(number()))\n}))));\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nvar GetRecentPrioritizationFeesResult = array(type({\n  slot: number(),\n  prioritizationFee: number()\n}));\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nvar GetInflationRateResult = type({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number()\n});\n\n/**\n * Information about the current epoch\n */\n\nvar GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nvar GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nvar GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nvar TransactionErrorResult = nullable(union([type({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nvar SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n\n/**\n * Transaction signature received notification\n */\nvar SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\n\nvar VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nvar SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  })))\n}));\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction message from the RPC API\n */\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * A partially decoded transaction instruction\n */\n\n/**\n * A parsed transaction message account\n */\n\n/**\n * A parsed transaction instruction\n */\n\n/**\n * A parsed address table lookup\n */\n\n/**\n * A parsed transaction message\n */\n\n/**\n * A parsed transaction\n */\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\n\n/**\n * A parsed transaction on the ledger with meta\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A block with parsed transactions\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * A Block on the ledger with signatures only\n */\n\n/**\n * recent block production information\n */\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nvar BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  var fetch = customFetch ? customFetch : fetchImpl;\n  var agent;\n  {\n    if (httpAgent != null) {\n      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');\n    }\n  }\n  var fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = /*#__PURE__*/function () {\n      var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(info, init) {\n        var modifiedFetchArgs;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return new Promise(function (resolve, reject) {\n                try {\n                  fetchMiddleware(info, init, function (modifiedInfo, modifiedInit) {\n                    return resolve([modifiedInfo, modifiedInit]);\n                  });\n                } catch (error) {\n                  reject(error);\n                }\n              });\n            case 2:\n              modifiedFetchArgs = _context6.sent;\n              _context6.next = 5;\n              return fetch.apply(void 0, _toConsumableArray(modifiedFetchArgs));\n            case 5:\n              return _context6.abrupt(\"return\", _context6.sent);\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6);\n      }));\n      return function fetchWithMiddleware(_x18, _x19) {\n        return _ref22.apply(this, arguments);\n      };\n    }();\n  }\n  var clientBrowser = new RpcClient( /*#__PURE__*/function () {\n    var _ref23 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(request, callback) {\n      var options, too_many_requests_retries, res, waitTime, text;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            options = {\n              method: 'POST',\n              body: request,\n              agent: agent,\n              headers: Object.assign({\n                'Content-Type': 'application/json'\n              }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n            };\n            _context7.prev = 1;\n            too_many_requests_retries = 5;\n            waitTime = 500;\n          case 4:\n            if (!fetchWithMiddleware) {\n              _context7.next = 10;\n              break;\n            }\n            _context7.next = 7;\n            return fetchWithMiddleware(url, options);\n          case 7:\n            res = _context7.sent;\n            _context7.next = 13;\n            break;\n          case 10:\n            _context7.next = 12;\n            return fetch(url, options);\n          case 12:\n            res = _context7.sent;\n          case 13:\n            if (!(res.status !== 429 /* Too many requests */)) {\n              _context7.next = 15;\n              break;\n            }\n            return _context7.abrupt(\"break\", 26);\n          case 15:\n            if (!(disableRetryOnRateLimit === true)) {\n              _context7.next = 17;\n              break;\n            }\n            return _context7.abrupt(\"break\", 26);\n          case 17:\n            too_many_requests_retries -= 1;\n            if (!(too_many_requests_retries === 0)) {\n              _context7.next = 20;\n              break;\n            }\n            return _context7.abrupt(\"break\", 26);\n          case 20:\n            console.log(\"Server responded with \".concat(res.status, \" \").concat(res.statusText, \".  Retrying after \").concat(waitTime, \"ms delay...\"));\n            _context7.next = 23;\n            return sleep(waitTime);\n          case 23:\n            waitTime *= 2;\n          case 24:\n            _context7.next = 4;\n            break;\n          case 26:\n            _context7.next = 28;\n            return res.text();\n          case 28:\n            text = _context7.sent;\n            if (res.ok) {\n              callback(null, text);\n            } else {\n              callback(new Error(\"\".concat(res.status, \" \").concat(res.statusText, \": \").concat(text)));\n            }\n            _context7.next = 35;\n            break;\n          case 32:\n            _context7.prev = 32;\n            _context7.t0 = _context7[\"catch\"](1);\n            if (_context7.t0 instanceof Error) callback(_context7.t0);\n          case 35:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee7, null, [[1, 32]]);\n    }));\n    return function (_x20, _x21) {\n      return _ref23.apply(this, arguments);\n    };\n  }(), {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return function (method, args) {\n    return new Promise(function (resolve, reject) {\n      client.request(method, args, function (err, response) {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return function (requests) {\n    return new Promise(function (resolve, reject) {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      var batch = requests.map(function (params) {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, function (err, response) {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nvar GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nvar GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nvar GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nvar GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nvar GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nvar GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nvar SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nvar GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nvar TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nvar GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nvar GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nvar ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nvar GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nvar GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n\n/**\n * @internal\n */\nvar AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n\n/**\n * @internal\n */\nvar KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nvar ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), function (value) {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n\n/**\n * @internal\n */\nvar ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nvar KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n\n/**\n * @internal\n */\nvar StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nvar GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nvar GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nvar AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n\n/**\n * @internal\n */\nvar ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nvar ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n\n/**\n * @internal\n */\nvar SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nvar SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nvar SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nvar SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nvar SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nvar RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nvar ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nvar VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nvar GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nvar ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nvar SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nvar GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nvar GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nvar AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nvar ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nvar AnnotatedAccountKey = type({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')]))\n});\nvar ConfirmedTransactionAccountsModeResult = type({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string())\n});\nvar ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nvar RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nvar InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nvar UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nvar ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, function (value) {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n\n/**\n * @internal\n */\nvar ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nvar TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nvar LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n\n/**\n * @internal\n */\nvar ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n\n/**\n * @internal\n */\nvar ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nvar TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nvar RewardsResult = type({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number()))\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nvar GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nvar GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nvar GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nvar GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nvar GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nvar GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nvar GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nvar GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nvar GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nvar GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nvar GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nvar GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nvar IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\nvar PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nvar GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nvar GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nvar RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nvar SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * Parsed account data\n */\n\n/**\n * Stake Activation data\n */\n\n/**\n * Data slice argument for getProgramAccounts\n */\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\n\n/**\n * A filter object for getProgramAccounts\n */\n\n/**\n * Configuration object for getProgramAccounts requests\n */\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\n\n/**\n * Configuration object for getMultipleAccounts\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getNonce`\n */\n\n/**\n * Configuration object for `getNonceAndContext`\n */\n\n/**\n * Information describing an account\n */\n\n/**\n * Account information identified by pubkey\n */\n\n/**\n * Callback function for account change notifications\n */\n\n/**\n * Callback function for program account change notifications\n */\n\n/**\n * Callback function for slot change notifications\n */\n\n/**\n * Callback function for slot update notifications\n */\n\n/**\n * Callback function for signature status notifications\n */\n\n/**\n * Signature status notification with transaction result\n */\n\n/**\n * Signature received notification\n */\n\n/**\n * Callback function for signature notifications\n */\n\n/**\n * Signature subscription options\n */\n\n/**\n * Callback function for root change notifications\n */\n\n/**\n * @internal\n */\nvar LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nvar LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * Callback function for log notifications.\n */\n\n/**\n * Signature result\n */\n\n/**\n * Transaction error\n */\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Signature status\n */\n\n/**\n * A confirmed signature with its status\n */\n\n/**\n * An object defining headers to be passed to the RPC server\n */\n\n/**\n * The type of the JavaScript `fetch()` API\n */\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\n\n/**\n * Configuration for instantiating a Connection\n */\n\n/** @internal */\nvar COMMON_HTTP_HEADERS = {\n  'solana-client': \"js/\".concat(\"0.0.0-development\")\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nvar Connection = /*#__PURE__*/function () {\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  function Connection(endpoint, _commitmentOrConfig) {\n    var _this15 = this;\n    _classCallCheck(this, Connection);\n    /** @internal */\n    this._commitment = void 0;\n    /** @internal */\n    this._confirmTransactionInitialTimeout = void 0;\n    /** @internal */\n    this._rpcEndpoint = void 0;\n    /** @internal */\n    this._rpcWsEndpoint = void 0;\n    /** @internal */\n    this._rpcClient = void 0;\n    /** @internal */\n    this._rpcRequest = void 0;\n    /** @internal */\n    this._rpcBatchRequest = void 0;\n    /** @internal */\n    this._rpcWebSocket = void 0;\n    /** @internal */\n    this._rpcWebSocketConnected = false;\n    /** @internal */\n    this._rpcWebSocketHeartbeat = null;\n    /** @internal */\n    this._rpcWebSocketIdleTimeout = null;\n    /** @internal\n     * A number that we increment every time an active connection closes.\n     * Used to determine whether the same socket connection that was open\n     * when an async operation started is the same one that's active when\n     * its continuation fires.\n     *\n     */\n    this._rpcWebSocketGeneration = 0;\n    /** @internal */\n    this._disableBlockhashCaching = false;\n    /** @internal */\n    this._pollingBlockhash = false;\n    /** @internal */\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    /** @internal */\n    this._nextClientSubscriptionId = 0;\n    /** @internal */\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionHashByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionStateChangeCallbacksByHash = {};\n    /** @internal */\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    /** @internal */\n    this._subscriptionsByHash = {};\n    /**\n     * Special case.\n     * After a signature is processed, RPCs automatically dispose of the\n     * subscription on the server side. We need to track which of these\n     * subscriptions have been disposed in such a way, so that we know\n     * whether the client is dealing with a not-yet-processed signature\n     * (in which case we must tear down the server subscription) or an\n     * already-processed signature (in which case the client can simply\n     * clear out the subscription locally without telling the server).\n     *\n     * NOTE: There is a proposal to eliminate this special case, here:\n     * https://github.com/solana-labs/solana/issues/18892\n     */\n    /** @internal */\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    /*\n     * Returns the current block height of the node\n     */\n    this.getBlockHeight = function () {\n      var requestPromises = {};\n      return /*#__PURE__*/function () {\n        var _ref24 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(commitmentOrConfig) {\n          var _requestPromises$requ;\n          var _extractCommitmentFro, commitment, config, args, requestHash;\n          return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n            while (1) switch (_context9.prev = _context9.next) {\n              case 0:\n                _extractCommitmentFro = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro.commitment, config = _extractCommitmentFro.config;\n                args = _this15._buildArgs([], commitment, undefined /* encoding */, config);\n                requestHash = fastStableStringify$1(args);\n                requestPromises[requestHash] = (_requestPromises$requ = requestPromises[requestHash]) !== null && _requestPromises$requ !== void 0 ? _requestPromises$requ : _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n                  var unsafeRes, res;\n                  return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n                    while (1) switch (_context8.prev = _context8.next) {\n                      case 0:\n                        _context8.prev = 0;\n                        _context8.next = 3;\n                        return _this15._rpcRequest('getBlockHeight', args);\n                      case 3:\n                        unsafeRes = _context8.sent;\n                        res = create(unsafeRes, jsonRpcResult(number()));\n                        if (!('error' in res)) {\n                          _context8.next = 7;\n                          break;\n                        }\n                        throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n                      case 7:\n                        return _context8.abrupt(\"return\", res.result);\n                      case 8:\n                        _context8.prev = 8;\n                        delete requestPromises[requestHash];\n                        return _context8.finish(8);\n                      case 11:\n                      case \"end\":\n                        return _context8.stop();\n                    }\n                  }, _callee8, null, [[0,, 8, 11]]);\n                }))();\n                _context9.next = 6;\n                return requestPromises[requestHash];\n              case 6:\n                return _context9.abrupt(\"return\", _context9.sent);\n              case 7:\n              case \"end\":\n                return _context9.stop();\n            }\n          }, _callee9);\n        }));\n        return function (_x22) {\n          return _ref24.apply(this, arguments);\n        };\n      }();\n    }();\n    var wsEndpoint;\n    var httpHeaders;\n    var fetch;\n    var fetchMiddleware;\n    var disableRetryOnRateLimit;\n    var httpAgent;\n    if (_commitmentOrConfig && typeof _commitmentOrConfig === 'string') {\n      this._commitment = _commitmentOrConfig;\n    } else if (_commitmentOrConfig) {\n      this._commitment = _commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = _commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = _commitmentOrConfig.wsEndpoint;\n      httpHeaders = _commitmentOrConfig.httpHeaders;\n      fetch = _commitmentOrConfig.fetch;\n      fetchMiddleware = _commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = _commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = _commitmentOrConfig.httpAgent;\n    }\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  _createClass(Connection, [{\n    key: \"commitment\",\n    get: function get() {\n      return this._commitment;\n    }\n\n    /**\n     * The RPC endpoint\n     */\n  }, {\n    key: \"rpcEndpoint\",\n    get: function get() {\n      return this._rpcEndpoint;\n    }\n\n    /**\n     * Fetch the balance for the specified public key, return with context\n     */\n  }, {\n    key: \"getBalanceAndContext\",\n    value: function () {\n      var _getBalanceAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(publicKey, commitmentOrConfig) {\n        var _extractCommitmentFro2, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              /** @internal */\n              _extractCommitmentFro2 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro2.commitment, config = _extractCommitmentFro2.config;\n              args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, config);\n              _context10.next = 4;\n              return this._rpcRequest('getBalance', args);\n            case 4:\n              unsafeRes = _context10.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(number()));\n              if (!('error' in res)) {\n                _context10.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get balance for \".concat(publicKey.toBase58()));\n            case 8:\n              return _context10.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function getBalanceAndContext(_x23, _x24) {\n        return _getBalanceAndContext.apply(this, arguments);\n      }\n      return getBalanceAndContext;\n    }()\n    /**\n     * Fetch the balance for the specified public key\n     */\n  }, {\n    key: \"getBalance\",\n    value: function () {\n      var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(publicKey, commitmentOrConfig) {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return this.getBalanceAndContext(publicKey, commitmentOrConfig).then(function (x) {\n                return x.value;\n              }).catch(function (e) {\n                throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n              });\n            case 2:\n              return _context11.abrupt(\"return\", _context11.sent);\n            case 3:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function getBalance(_x25, _x26) {\n        return _getBalance.apply(this, arguments);\n      }\n      return getBalance;\n    }()\n    /**\n     * Fetch the estimated production time of a block\n     */\n  }, {\n    key: \"getBlockTime\",\n    value: function () {\n      var _getBlockTime = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(slot) {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return this._rpcRequest('getBlockTime', [slot]);\n            case 2:\n              unsafeRes = _context12.sent;\n              res = create(unsafeRes, jsonRpcResult(nullable(number())));\n              if (!('error' in res)) {\n                _context12.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get block time for slot \".concat(slot));\n            case 6:\n              return _context12.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n      function getBlockTime(_x27) {\n        return _getBlockTime.apply(this, arguments);\n      }\n      return getBlockTime;\n    }()\n    /**\n     * Fetch the lowest slot that the node has information about in its ledger.\n     * This value may increase over time if the node is configured to purge older ledger data\n     */\n  }, {\n    key: \"getMinimumLedgerSlot\",\n    value: function () {\n      var _getMinimumLedgerSlot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return this._rpcRequest('minimumLedgerSlot', []);\n            case 2:\n              unsafeRes = _context13.sent;\n              res = create(unsafeRes, jsonRpcResult(number()));\n              if (!('error' in res)) {\n                _context13.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n            case 6:\n              return _context13.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n      function getMinimumLedgerSlot() {\n        return _getMinimumLedgerSlot.apply(this, arguments);\n      }\n      return getMinimumLedgerSlot;\n    }()\n    /**\n     * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n     */\n  }, {\n    key: \"getFirstAvailableBlock\",\n    value: function () {\n      var _getFirstAvailableBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return this._rpcRequest('getFirstAvailableBlock', []);\n            case 2:\n              unsafeRes = _context14.sent;\n              res = create(unsafeRes, SlotRpcResult);\n              if (!('error' in res)) {\n                _context14.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n            case 6:\n              return _context14.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14, this);\n      }));\n      function getFirstAvailableBlock() {\n        return _getFirstAvailableBlock.apply(this, arguments);\n      }\n      return getFirstAvailableBlock;\n    }()\n    /**\n     * Fetch information about the current supply\n     */\n  }, {\n    key: \"getSupply\",\n    value: function () {\n      var _getSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(config) {\n        var configArg, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              configArg = {};\n              if (typeof config === 'string') {\n                configArg = {\n                  commitment: config\n                };\n              } else if (config) {\n                configArg = _objectSpread(_objectSpread({}, config), {}, {\n                  commitment: config && config.commitment || this.commitment\n                });\n              } else {\n                configArg = {\n                  commitment: this.commitment\n                };\n              }\n              _context15.next = 4;\n              return this._rpcRequest('getSupply', [configArg]);\n            case 4:\n              unsafeRes = _context15.sent;\n              res = create(unsafeRes, GetSupplyRpcResult);\n              if (!('error' in res)) {\n                _context15.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n            case 8:\n              return _context15.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context15.stop();\n          }\n        }, _callee15, this);\n      }));\n      function getSupply(_x28) {\n        return _getSupply.apply(this, arguments);\n      }\n      return getSupply;\n    }()\n    /**\n     * Fetch the current supply of a token mint\n     */\n  }, {\n    key: \"getTokenSupply\",\n    value: function () {\n      var _getTokenSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(tokenMintAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n              _context16.next = 3;\n              return this._rpcRequest('getTokenSupply', args);\n            case 3:\n              unsafeRes = _context16.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n              if (!('error' in res)) {\n                _context16.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n            case 7:\n              return _context16.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context16.stop();\n          }\n        }, _callee16, this);\n      }));\n      function getTokenSupply(_x29, _x30) {\n        return _getTokenSupply.apply(this, arguments);\n      }\n      return getTokenSupply;\n    }()\n    /**\n     * Fetch the current balance of a token account\n     */\n  }, {\n    key: \"getTokenAccountBalance\",\n    value: function () {\n      var _getTokenAccountBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(tokenAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) switch (_context17.prev = _context17.next) {\n            case 0:\n              args = this._buildArgs([tokenAddress.toBase58()], commitment);\n              _context17.next = 3;\n              return this._rpcRequest('getTokenAccountBalance', args);\n            case 3:\n              unsafeRes = _context17.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n              if (!('error' in res)) {\n                _context17.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n            case 7:\n              return _context17.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context17.stop();\n          }\n        }, _callee17, this);\n      }));\n      function getTokenAccountBalance(_x31, _x32) {\n        return _getTokenAccountBalance.apply(this, arguments);\n      }\n      return getTokenAccountBalance;\n    }()\n    /**\n     * Fetch all the token accounts owned by the specified account\n     *\n     * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n     */\n  }, {\n    key: \"getTokenAccountsByOwner\",\n    value: function () {\n      var _getTokenAccountsByOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(ownerAddress, filter, commitmentOrConfig) {\n        var _extractCommitmentFro3, commitment, config, _args, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) switch (_context18.prev = _context18.next) {\n            case 0:\n              _extractCommitmentFro3 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro3.commitment, config = _extractCommitmentFro3.config;\n              _args = [ownerAddress.toBase58()];\n              if ('mint' in filter) {\n                _args.push({\n                  mint: filter.mint.toBase58()\n                });\n              } else {\n                _args.push({\n                  programId: filter.programId.toBase58()\n                });\n              }\n              args = this._buildArgs(_args, commitment, 'base64', config);\n              _context18.next = 6;\n              return this._rpcRequest('getTokenAccountsByOwner', args);\n            case 6:\n              unsafeRes = _context18.sent;\n              res = create(unsafeRes, GetTokenAccountsByOwner);\n              if (!('error' in res)) {\n                _context18.next = 10;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get token accounts owned by account \".concat(ownerAddress.toBase58()));\n            case 10:\n              return _context18.abrupt(\"return\", res.result);\n            case 11:\n            case \"end\":\n              return _context18.stop();\n          }\n        }, _callee18, this);\n      }));\n      function getTokenAccountsByOwner(_x33, _x34, _x35) {\n        return _getTokenAccountsByOwner.apply(this, arguments);\n      }\n      return getTokenAccountsByOwner;\n    }()\n    /**\n     * Fetch parsed token accounts owned by the specified account\n     *\n     * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n     */\n  }, {\n    key: \"getParsedTokenAccountsByOwner\",\n    value: function () {\n      var _getParsedTokenAccountsByOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(ownerAddress, filter, commitment) {\n        var _args, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) switch (_context19.prev = _context19.next) {\n            case 0:\n              _args = [ownerAddress.toBase58()];\n              if ('mint' in filter) {\n                _args.push({\n                  mint: filter.mint.toBase58()\n                });\n              } else {\n                _args.push({\n                  programId: filter.programId.toBase58()\n                });\n              }\n              args = this._buildArgs(_args, commitment, 'jsonParsed');\n              _context19.next = 5;\n              return this._rpcRequest('getTokenAccountsByOwner', args);\n            case 5:\n              unsafeRes = _context19.sent;\n              res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n              if (!('error' in res)) {\n                _context19.next = 9;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get token accounts owned by account \".concat(ownerAddress.toBase58()));\n            case 9:\n              return _context19.abrupt(\"return\", res.result);\n            case 10:\n            case \"end\":\n              return _context19.stop();\n          }\n        }, _callee19, this);\n      }));\n      function getParsedTokenAccountsByOwner(_x36, _x37, _x38) {\n        return _getParsedTokenAccountsByOwner.apply(this, arguments);\n      }\n      return getParsedTokenAccountsByOwner;\n    }()\n    /**\n     * Fetch the 20 largest accounts with their current balances\n     */\n  }, {\n    key: \"getLargestAccounts\",\n    value: function () {\n      var _getLargestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(config) {\n        var arg, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) switch (_context20.prev = _context20.next) {\n            case 0:\n              arg = _objectSpread(_objectSpread({}, config), {}, {\n                commitment: config && config.commitment || this.commitment\n              });\n              args = arg.filter || arg.commitment ? [arg] : [];\n              _context20.next = 4;\n              return this._rpcRequest('getLargestAccounts', args);\n            case 4:\n              unsafeRes = _context20.sent;\n              res = create(unsafeRes, GetLargestAccountsRpcResult);\n              if (!('error' in res)) {\n                _context20.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n            case 8:\n              return _context20.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context20.stop();\n          }\n        }, _callee20, this);\n      }));\n      function getLargestAccounts(_x39) {\n        return _getLargestAccounts.apply(this, arguments);\n      }\n      return getLargestAccounts;\n    }()\n    /**\n     * Fetch the 20 largest token accounts with their current balances\n     * for a given mint.\n     */\n  }, {\n    key: \"getTokenLargestAccounts\",\n    value: function () {\n      var _getTokenLargestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(mintAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) switch (_context21.prev = _context21.next) {\n            case 0:\n              args = this._buildArgs([mintAddress.toBase58()], commitment);\n              _context21.next = 3;\n              return this._rpcRequest('getTokenLargestAccounts', args);\n            case 3:\n              unsafeRes = _context21.sent;\n              res = create(unsafeRes, GetTokenLargestAccountsResult);\n              if (!('error' in res)) {\n                _context21.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n            case 7:\n              return _context21.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context21.stop();\n          }\n        }, _callee21, this);\n      }));\n      function getTokenLargestAccounts(_x40, _x41) {\n        return _getTokenLargestAccounts.apply(this, arguments);\n      }\n      return getTokenLargestAccounts;\n    }()\n    /**\n     * Fetch all the account info for the specified public key, return with context\n     */\n  }, {\n    key: \"getAccountInfoAndContext\",\n    value: function () {\n      var _getAccountInfoAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(publicKey, commitmentOrConfig) {\n        var _extractCommitmentFro4, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) switch (_context22.prev = _context22.next) {\n            case 0:\n              _extractCommitmentFro4 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro4.commitment, config = _extractCommitmentFro4.config;\n              args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n              _context22.next = 4;\n              return this._rpcRequest('getAccountInfo', args);\n            case 4:\n              unsafeRes = _context22.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n              if (!('error' in res)) {\n                _context22.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get info about account \".concat(publicKey.toBase58()));\n            case 8:\n              return _context22.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context22.stop();\n          }\n        }, _callee22, this);\n      }));\n      function getAccountInfoAndContext(_x42, _x43) {\n        return _getAccountInfoAndContext.apply(this, arguments);\n      }\n      return getAccountInfoAndContext;\n    }()\n    /**\n     * Fetch parsed account info for the specified public key\n     */\n  }, {\n    key: \"getParsedAccountInfo\",\n    value: function () {\n      var _getParsedAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(publicKey, commitmentOrConfig) {\n        var _extractCommitmentFro5, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n          while (1) switch (_context23.prev = _context23.next) {\n            case 0:\n              _extractCommitmentFro5 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro5.commitment, config = _extractCommitmentFro5.config;\n              args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n              _context23.next = 4;\n              return this._rpcRequest('getAccountInfo', args);\n            case 4:\n              unsafeRes = _context23.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n              if (!('error' in res)) {\n                _context23.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get info about account \".concat(publicKey.toBase58()));\n            case 8:\n              return _context23.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context23.stop();\n          }\n        }, _callee23, this);\n      }));\n      function getParsedAccountInfo(_x44, _x45) {\n        return _getParsedAccountInfo.apply(this, arguments);\n      }\n      return getParsedAccountInfo;\n    }()\n    /**\n     * Fetch all the account info for the specified public key\n     */\n  }, {\n    key: \"getAccountInfo\",\n    value: function () {\n      var _getAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(publicKey, commitmentOrConfig) {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) switch (_context24.prev = _context24.next) {\n            case 0:\n              _context24.prev = 0;\n              _context24.next = 3;\n              return this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n            case 3:\n              res = _context24.sent;\n              return _context24.abrupt(\"return\", res.value);\n            case 7:\n              _context24.prev = 7;\n              _context24.t0 = _context24[\"catch\"](0);\n              throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + _context24.t0);\n            case 10:\n            case \"end\":\n              return _context24.stop();\n          }\n        }, _callee24, this, [[0, 7]]);\n      }));\n      function getAccountInfo(_x46, _x47) {\n        return _getAccountInfo.apply(this, arguments);\n      }\n      return getAccountInfo;\n    }()\n    /**\n     * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n     */\n  }, {\n    key: \"getMultipleParsedAccounts\",\n    value: function () {\n      var _getMultipleParsedAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(publicKeys, rawConfig) {\n        var _extractCommitmentFro6, commitment, config, keys, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n          while (1) switch (_context25.prev = _context25.next) {\n            case 0:\n              _extractCommitmentFro6 = extractCommitmentFromConfig(rawConfig), commitment = _extractCommitmentFro6.commitment, config = _extractCommitmentFro6.config;\n              keys = publicKeys.map(function (key) {\n                return key.toBase58();\n              });\n              args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n              _context25.next = 5;\n              return this._rpcRequest('getMultipleAccounts', args);\n            case 5:\n              unsafeRes = _context25.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n              if (!('error' in res)) {\n                _context25.next = 9;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get info for accounts \".concat(keys));\n            case 9:\n              return _context25.abrupt(\"return\", res.result);\n            case 10:\n            case \"end\":\n              return _context25.stop();\n          }\n        }, _callee25, this);\n      }));\n      function getMultipleParsedAccounts(_x48, _x49) {\n        return _getMultipleParsedAccounts.apply(this, arguments);\n      }\n      return getMultipleParsedAccounts;\n    }()\n    /**\n     * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n     */\n  }, {\n    key: \"getMultipleAccountsInfoAndContext\",\n    value: function () {\n      var _getMultipleAccountsInfoAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26(publicKeys, commitmentOrConfig) {\n        var _extractCommitmentFro7, commitment, config, keys, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n          while (1) switch (_context26.prev = _context26.next) {\n            case 0:\n              _extractCommitmentFro7 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro7.commitment, config = _extractCommitmentFro7.config;\n              keys = publicKeys.map(function (key) {\n                return key.toBase58();\n              });\n              args = this._buildArgs([keys], commitment, 'base64', config);\n              _context26.next = 5;\n              return this._rpcRequest('getMultipleAccounts', args);\n            case 5:\n              unsafeRes = _context26.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n              if (!('error' in res)) {\n                _context26.next = 9;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get info for accounts \".concat(keys));\n            case 9:\n              return _context26.abrupt(\"return\", res.result);\n            case 10:\n            case \"end\":\n              return _context26.stop();\n          }\n        }, _callee26, this);\n      }));\n      function getMultipleAccountsInfoAndContext(_x50, _x51) {\n        return _getMultipleAccountsInfoAndContext.apply(this, arguments);\n      }\n      return getMultipleAccountsInfoAndContext;\n    }()\n    /**\n     * Fetch all the account info for multiple accounts specified by an array of public keys\n     */\n  }, {\n    key: \"getMultipleAccountsInfo\",\n    value: function () {\n      var _getMultipleAccountsInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27(publicKeys, commitmentOrConfig) {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n          while (1) switch (_context27.prev = _context27.next) {\n            case 0:\n              _context27.next = 2;\n              return this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n            case 2:\n              res = _context27.sent;\n              return _context27.abrupt(\"return\", res.value);\n            case 4:\n            case \"end\":\n              return _context27.stop();\n          }\n        }, _callee27, this);\n      }));\n      function getMultipleAccountsInfo(_x52, _x53) {\n        return _getMultipleAccountsInfo.apply(this, arguments);\n      }\n      return getMultipleAccountsInfo;\n    }()\n    /**\n     * Returns epoch activation information for a stake account that has been delegated\n     */\n  }, {\n    key: \"getStakeActivation\",\n    value: function () {\n      var _getStakeActivation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28(publicKey, commitmentOrConfig, epoch) {\n        var _extractCommitmentFro8, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n          while (1) switch (_context28.prev = _context28.next) {\n            case 0:\n              _extractCommitmentFro8 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro8.commitment, config = _extractCommitmentFro8.config;\n              args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, _objectSpread(_objectSpread({}, config), {}, {\n                epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n              }));\n              _context28.next = 4;\n              return this._rpcRequest('getStakeActivation', args);\n            case 4:\n              unsafeRes = _context28.sent;\n              res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n              if (!('error' in res)) {\n                _context28.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get Stake Activation \".concat(publicKey.toBase58()));\n            case 8:\n              return _context28.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context28.stop();\n          }\n        }, _callee28, this);\n      }));\n      function getStakeActivation(_x54, _x55, _x56) {\n        return _getStakeActivation.apply(this, arguments);\n      }\n      return getStakeActivation;\n    }()\n    /**\n     * Fetch all the accounts owned by the specified program id\n     *\n     * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n     */\n    // eslint-disable-next-line no-dupe-class-members\n    // eslint-disable-next-line no-dupe-class-members\n  }, {\n    key: \"getProgramAccounts\",\n    value: function () {\n      var _getProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee29(programId, configOrCommitment) {\n        var _extractCommitmentFro9, commitment, config, _ref26, encoding, configWithoutEncoding, args, unsafeRes, baseSchema, res;\n        return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n          while (1) switch (_context29.prev = _context29.next) {\n            case 0:\n              _extractCommitmentFro9 = extractCommitmentFromConfig(configOrCommitment), commitment = _extractCommitmentFro9.commitment, config = _extractCommitmentFro9.config;\n              _ref26 = config || {}, encoding = _ref26.encoding, configWithoutEncoding = _objectWithoutProperties(_ref26, _excluded2);\n              args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', configWithoutEncoding);\n              _context29.next = 5;\n              return this._rpcRequest('getProgramAccounts', args);\n            case 5:\n              unsafeRes = _context29.sent;\n              baseSchema = array(KeyedAccountInfoResult);\n              res = configWithoutEncoding.withContext === true ? create(unsafeRes, jsonRpcResultAndContext(baseSchema)) : create(unsafeRes, jsonRpcResult(baseSchema));\n              if (!('error' in res)) {\n                _context29.next = 10;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get accounts owned by program \".concat(programId.toBase58()));\n            case 10:\n              return _context29.abrupt(\"return\", res.result);\n            case 11:\n            case \"end\":\n              return _context29.stop();\n          }\n        }, _callee29, this);\n      }));\n      function getProgramAccounts(_x57, _x58) {\n        return _getProgramAccounts.apply(this, arguments);\n      }\n      return getProgramAccounts;\n    }()\n    /**\n     * Fetch and parse all the accounts owned by the specified program id\n     *\n     * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n     */\n  }, {\n    key: \"getParsedProgramAccounts\",\n    value: function () {\n      var _getParsedProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee30(programId, configOrCommitment) {\n        var _extractCommitmentFro10, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee30$(_context30) {\n          while (1) switch (_context30.prev = _context30.next) {\n            case 0:\n              _extractCommitmentFro10 = extractCommitmentFromConfig(configOrCommitment), commitment = _extractCommitmentFro10.commitment, config = _extractCommitmentFro10.config;\n              args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n              _context30.next = 4;\n              return this._rpcRequest('getProgramAccounts', args);\n            case 4:\n              unsafeRes = _context30.sent;\n              res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n              if (!('error' in res)) {\n                _context30.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get accounts owned by program \".concat(programId.toBase58()));\n            case 8:\n              return _context30.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context30.stop();\n          }\n        }, _callee30, this);\n      }));\n      function getParsedProgramAccounts(_x59, _x60) {\n        return _getParsedProgramAccounts.apply(this, arguments);\n      }\n      return getParsedProgramAccounts;\n    }()\n    /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n    // eslint-disable-next-line no-dupe-class-members\n    // eslint-disable-next-line no-dupe-class-members\n  }, {\n    key: \"confirmTransaction\",\n    value: function () {\n      var _confirmTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee31(strategy, commitment) {\n        var rawSignature, _config$abortSignal, config, decodedSignature;\n        return _regeneratorRuntime().wrap(function _callee31$(_context31) {\n          while (1) switch (_context31.prev = _context31.next) {\n            case 0:\n              if (!(typeof strategy == 'string')) {\n                _context31.next = 4;\n                break;\n              }\n              rawSignature = strategy;\n              _context31.next = 8;\n              break;\n            case 4:\n              config = strategy;\n              if (!((_config$abortSignal = config.abortSignal) !== null && _config$abortSignal !== void 0 && _config$abortSignal.aborted)) {\n                _context31.next = 7;\n                break;\n              }\n              return _context31.abrupt(\"return\", Promise.reject(config.abortSignal.reason));\n            case 7:\n              rawSignature = config.signature;\n            case 8:\n              _context31.prev = 8;\n              decodedSignature = bs58.decode(rawSignature);\n              _context31.next = 15;\n              break;\n            case 12:\n              _context31.prev = 12;\n              _context31.t0 = _context31[\"catch\"](8);\n              throw new Error('signature must be base58 encoded: ' + rawSignature);\n            case 15:\n              assert(decodedSignature.length === 64, 'signature has invalid length');\n              if (!(typeof strategy === 'string')) {\n                _context31.next = 22;\n                break;\n              }\n              _context31.next = 19;\n              return this.confirmTransactionUsingLegacyTimeoutStrategy({\n                commitment: commitment || this.commitment,\n                signature: rawSignature\n              });\n            case 19:\n              return _context31.abrupt(\"return\", _context31.sent);\n            case 22:\n              if (!('lastValidBlockHeight' in strategy)) {\n                _context31.next = 28;\n                break;\n              }\n              _context31.next = 25;\n              return this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n                commitment: commitment || this.commitment,\n                strategy: strategy\n              });\n            case 25:\n              return _context31.abrupt(\"return\", _context31.sent);\n            case 28:\n              _context31.next = 30;\n              return this.confirmTransactionUsingDurableNonceStrategy({\n                commitment: commitment || this.commitment,\n                strategy: strategy\n              });\n            case 30:\n              return _context31.abrupt(\"return\", _context31.sent);\n            case 31:\n            case \"end\":\n              return _context31.stop();\n          }\n        }, _callee31, this, [[8, 12]]);\n      }));\n      function confirmTransaction(_x61, _x62) {\n        return _confirmTransaction.apply(this, arguments);\n      }\n      return confirmTransaction;\n    }()\n  }, {\n    key: \"getCancellationPromise\",\n    value: function getCancellationPromise(signal) {\n      return new Promise(function (_, reject) {\n        if (signal == null) {\n          return;\n        }\n        if (signal.aborted) {\n          reject(signal.reason);\n        } else {\n          signal.addEventListener('abort', function () {\n            reject(signal.reason);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"getTransactionConfirmationPromise\",\n    value: function getTransactionConfirmationPromise(_ref27) {\n      var _this16 = this;\n      var commitment = _ref27.commitment,\n        signature = _ref27.signature;\n      var signatureSubscriptionId;\n      var disposeSignatureSubscriptionStateChangeObserver;\n      var done = false;\n      var confirmationPromise = new Promise(function (resolve, reject) {\n        try {\n          signatureSubscriptionId = _this16.onSignature(signature, function (result, context) {\n            signatureSubscriptionId = undefined;\n            var response = {\n              context: context,\n              value: result\n            };\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: response\n            });\n          }, commitment);\n          var subscriptionSetupPromise = new Promise(function (resolveSubscriptionSetup) {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver = _this16._onSubscriptionStateChange(signatureSubscriptionId, function (nextState) {\n                if (nextState === 'subscribed') {\n                  resolveSubscriptionSetup();\n                }\n              });\n            }\n          });\n          _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {\n            var response, context, value;\n            return _regeneratorRuntime().wrap(function _callee32$(_context32) {\n              while (1) switch (_context32.prev = _context32.next) {\n                case 0:\n                  _context32.next = 2;\n                  return subscriptionSetupPromise;\n                case 2:\n                  if (!done) {\n                    _context32.next = 4;\n                    break;\n                  }\n                  return _context32.abrupt(\"return\");\n                case 4:\n                  _context32.next = 6;\n                  return _this16.getSignatureStatus(signature);\n                case 6:\n                  response = _context32.sent;\n                  if (!done) {\n                    _context32.next = 9;\n                    break;\n                  }\n                  return _context32.abrupt(\"return\");\n                case 9:\n                  if (!(response == null)) {\n                    _context32.next = 11;\n                    break;\n                  }\n                  return _context32.abrupt(\"return\");\n                case 11:\n                  context = response.context, value = response.value;\n                  if (!(value == null)) {\n                    _context32.next = 14;\n                    break;\n                  }\n                  return _context32.abrupt(\"return\");\n                case 14:\n                  if (!(value !== null && value !== void 0 && value.err)) {\n                    _context32.next = 18;\n                    break;\n                  }\n                  reject(value.err);\n                  _context32.next = 29;\n                  break;\n                case 18:\n                  _context32.t0 = commitment;\n                  _context32.next = _context32.t0 === 'confirmed' ? 21 : _context32.t0 === 'single' ? 21 : _context32.t0 === 'singleGossip' ? 21 : _context32.t0 === 'finalized' ? 24 : _context32.t0 === 'max' ? 24 : _context32.t0 === 'root' ? 24 : _context32.t0 === 'processed' ? 27 : _context32.t0 === 'recent' ? 27 : 27;\n                  break;\n                case 21:\n                  if (!(value.confirmationStatus === 'processed')) {\n                    _context32.next = 23;\n                    break;\n                  }\n                  return _context32.abrupt(\"return\");\n                case 23:\n                  return _context32.abrupt(\"break\", 27);\n                case 24:\n                  if (!(value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed')) {\n                    _context32.next = 26;\n                    break;\n                  }\n                  return _context32.abrupt(\"return\");\n                case 26:\n                  return _context32.abrupt(\"break\", 27);\n                case 27:\n                  done = true;\n                  resolve({\n                    __type: TransactionStatus.PROCESSED,\n                    response: {\n                      context: context,\n                      value: value\n                    }\n                  });\n                case 29:\n                case \"end\":\n                  return _context32.stop();\n              }\n            }, _callee32);\n          }))();\n        } catch (err) {\n          reject(err);\n        }\n      });\n      var abortConfirmation = function abortConfirmation() {\n        if (disposeSignatureSubscriptionStateChangeObserver) {\n          disposeSignatureSubscriptionStateChangeObserver();\n          disposeSignatureSubscriptionStateChangeObserver = undefined;\n        }\n        if (signatureSubscriptionId != null) {\n          _this16.removeSignatureListener(signatureSubscriptionId);\n          signatureSubscriptionId = undefined;\n        }\n      };\n      return {\n        abortConfirmation: abortConfirmation,\n        confirmationPromise: confirmationPromise\n      };\n    }\n  }, {\n    key: \"confirmTransactionUsingBlockHeightExceedanceStrategy\",\n    value: function () {\n      var _confirmTransactionUsingBlockHeightExceedanceStrategy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee35(_ref29) {\n        var _this17 = this;\n        var commitment, _ref29$strategy, abortSignal, lastValidBlockHeight, signature, done, expiryPromise, _this$getTransactionC, abortConfirmation, confirmationPromise, cancellationPromise, result, outcome;\n        return _regeneratorRuntime().wrap(function _callee35$(_context35) {\n          while (1) switch (_context35.prev = _context35.next) {\n            case 0:\n              commitment = _ref29.commitment, _ref29$strategy = _ref29.strategy, abortSignal = _ref29$strategy.abortSignal, lastValidBlockHeight = _ref29$strategy.lastValidBlockHeight, signature = _ref29$strategy.signature;\n              done = false;\n              expiryPromise = new Promise(function (resolve) {\n                var checkBlockHeight = /*#__PURE__*/function () {\n                  var _ref30 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {\n                    var blockHeight;\n                    return _regeneratorRuntime().wrap(function _callee33$(_context33) {\n                      while (1) switch (_context33.prev = _context33.next) {\n                        case 0:\n                          _context33.prev = 0;\n                          _context33.next = 3;\n                          return _this17.getBlockHeight(commitment);\n                        case 3:\n                          blockHeight = _context33.sent;\n                          return _context33.abrupt(\"return\", blockHeight);\n                        case 7:\n                          _context33.prev = 7;\n                          _context33.t0 = _context33[\"catch\"](0);\n                          return _context33.abrupt(\"return\", -1);\n                        case 10:\n                        case \"end\":\n                          return _context33.stop();\n                      }\n                    }, _callee33, null, [[0, 7]]);\n                  }));\n                  return function checkBlockHeight() {\n                    return _ref30.apply(this, arguments);\n                  };\n                }();\n                _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {\n                  var currentBlockHeight;\n                  return _regeneratorRuntime().wrap(function _callee34$(_context34) {\n                    while (1) switch (_context34.prev = _context34.next) {\n                      case 0:\n                        _context34.next = 2;\n                        return checkBlockHeight();\n                      case 2:\n                        currentBlockHeight = _context34.sent;\n                        if (!done) {\n                          _context34.next = 5;\n                          break;\n                        }\n                        return _context34.abrupt(\"return\");\n                      case 5:\n                        if (!(currentBlockHeight <= lastValidBlockHeight)) {\n                          _context34.next = 17;\n                          break;\n                        }\n                        _context34.next = 8;\n                        return sleep(1000);\n                      case 8:\n                        if (!done) {\n                          _context34.next = 10;\n                          break;\n                        }\n                        return _context34.abrupt(\"return\");\n                      case 10:\n                        _context34.next = 12;\n                        return checkBlockHeight();\n                      case 12:\n                        currentBlockHeight = _context34.sent;\n                        if (!done) {\n                          _context34.next = 15;\n                          break;\n                        }\n                        return _context34.abrupt(\"return\");\n                      case 15:\n                        _context34.next = 5;\n                        break;\n                      case 17:\n                        resolve({\n                          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n                        });\n                      case 18:\n                      case \"end\":\n                        return _context34.stop();\n                    }\n                  }, _callee34);\n                }))();\n              });\n              _this$getTransactionC = this.getTransactionConfirmationPromise({\n                commitment: commitment,\n                signature: signature\n              }), abortConfirmation = _this$getTransactionC.abortConfirmation, confirmationPromise = _this$getTransactionC.confirmationPromise;\n              cancellationPromise = this.getCancellationPromise(abortSignal);\n              _context35.prev = 5;\n              _context35.next = 8;\n              return Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n            case 8:\n              outcome = _context35.sent;\n              if (!(outcome.__type === TransactionStatus.PROCESSED)) {\n                _context35.next = 13;\n                break;\n              }\n              result = outcome.response;\n              _context35.next = 14;\n              break;\n            case 13:\n              throw new TransactionExpiredBlockheightExceededError(signature);\n            case 14:\n              _context35.prev = 14;\n              done = true;\n              abortConfirmation();\n              return _context35.finish(14);\n            case 18:\n              return _context35.abrupt(\"return\", result);\n            case 19:\n            case \"end\":\n              return _context35.stop();\n          }\n        }, _callee35, this, [[5,, 14, 18]]);\n      }));\n      function confirmTransactionUsingBlockHeightExceedanceStrategy(_x63) {\n        return _confirmTransactionUsingBlockHeightExceedanceStrategy.apply(this, arguments);\n      }\n      return confirmTransactionUsingBlockHeightExceedanceStrategy;\n    }()\n  }, {\n    key: \"confirmTransactionUsingDurableNonceStrategy\",\n    value: function () {\n      var _confirmTransactionUsingDurableNonceStrategy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee38(_ref32) {\n        var _this18 = this;\n        var commitment, _ref32$strategy, abortSignal, minContextSlot, nonceAccountPubkey, nonceValue, signature, done, expiryPromise, _this$getTransactionC2, abortConfirmation, confirmationPromise, cancellationPromise, result, outcome, _signatureStatus, signatureStatus, _outcome$slotInWhichN, status, commitmentForStatus, confirmationStatus;\n        return _regeneratorRuntime().wrap(function _callee38$(_context38) {\n          while (1) switch (_context38.prev = _context38.next) {\n            case 0:\n              commitment = _ref32.commitment, _ref32$strategy = _ref32.strategy, abortSignal = _ref32$strategy.abortSignal, minContextSlot = _ref32$strategy.minContextSlot, nonceAccountPubkey = _ref32$strategy.nonceAccountPubkey, nonceValue = _ref32$strategy.nonceValue, signature = _ref32$strategy.signature;\n              done = false;\n              expiryPromise = new Promise(function (resolve) {\n                var currentNonceValue = nonceValue;\n                var lastCheckedSlot = null;\n                var getCurrentNonceValue = /*#__PURE__*/function () {\n                  var _ref33 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee36() {\n                    var _yield$_this18$getNon, context, nonceAccount;\n                    return _regeneratorRuntime().wrap(function _callee36$(_context36) {\n                      while (1) switch (_context36.prev = _context36.next) {\n                        case 0:\n                          _context36.prev = 0;\n                          _context36.next = 3;\n                          return _this18.getNonceAndContext(nonceAccountPubkey, {\n                            commitment: commitment,\n                            minContextSlot: minContextSlot\n                          });\n                        case 3:\n                          _yield$_this18$getNon = _context36.sent;\n                          context = _yield$_this18$getNon.context;\n                          nonceAccount = _yield$_this18$getNon.value;\n                          lastCheckedSlot = context.slot;\n                          return _context36.abrupt(\"return\", nonceAccount === null || nonceAccount === void 0 ? void 0 : nonceAccount.nonce);\n                        case 10:\n                          _context36.prev = 10;\n                          _context36.t0 = _context36[\"catch\"](0);\n                          return _context36.abrupt(\"return\", currentNonceValue);\n                        case 13:\n                        case \"end\":\n                          return _context36.stop();\n                      }\n                    }, _callee36, null, [[0, 10]]);\n                  }));\n                  return function getCurrentNonceValue() {\n                    return _ref33.apply(this, arguments);\n                  };\n                }();\n                _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {\n                  return _regeneratorRuntime().wrap(function _callee37$(_context37) {\n                    while (1) switch (_context37.prev = _context37.next) {\n                      case 0:\n                        _context37.next = 2;\n                        return getCurrentNonceValue();\n                      case 2:\n                        currentNonceValue = _context37.sent;\n                        if (!done) {\n                          _context37.next = 5;\n                          break;\n                        }\n                        return _context37.abrupt(\"return\");\n                      case 5:\n                        if (!true // eslint-disable-line no-constant-condition\n                        ) {\n                          _context37.next = 20;\n                          break;\n                        }\n                        if (!(nonceValue !== currentNonceValue)) {\n                          _context37.next = 9;\n                          break;\n                        }\n                        resolve({\n                          __type: TransactionStatus.NONCE_INVALID,\n                          slotInWhichNonceDidAdvance: lastCheckedSlot\n                        });\n                        return _context37.abrupt(\"return\");\n                      case 9:\n                        _context37.next = 11;\n                        return sleep(2000);\n                      case 11:\n                        if (!done) {\n                          _context37.next = 13;\n                          break;\n                        }\n                        return _context37.abrupt(\"return\");\n                      case 13:\n                        _context37.next = 15;\n                        return getCurrentNonceValue();\n                      case 15:\n                        currentNonceValue = _context37.sent;\n                        if (!done) {\n                          _context37.next = 18;\n                          break;\n                        }\n                        return _context37.abrupt(\"return\");\n                      case 18:\n                        _context37.next = 5;\n                        break;\n                      case 20:\n                      case \"end\":\n                        return _context37.stop();\n                    }\n                  }, _callee37);\n                }))();\n              });\n              _this$getTransactionC2 = this.getTransactionConfirmationPromise({\n                commitment: commitment,\n                signature: signature\n              }), abortConfirmation = _this$getTransactionC2.abortConfirmation, confirmationPromise = _this$getTransactionC2.confirmationPromise;\n              cancellationPromise = this.getCancellationPromise(abortSignal);\n              _context38.prev = 5;\n              _context38.next = 8;\n              return Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n            case 8:\n              outcome = _context38.sent;\n              if (!(outcome.__type === TransactionStatus.PROCESSED)) {\n                _context38.next = 13;\n                break;\n              }\n              result = outcome.response;\n              _context38.next = 47;\n              break;\n            case 13:\n              if (!true // eslint-disable-line no-constant-condition\n              ) {\n                _context38.next = 27;\n                break;\n              }\n              _context38.next = 16;\n              return this.getSignatureStatus(signature);\n            case 16:\n              status = _context38.sent;\n              if (!(status == null)) {\n                _context38.next = 19;\n                break;\n              }\n              return _context38.abrupt(\"break\", 27);\n            case 19:\n              if (!(status.context.slot < ((_outcome$slotInWhichN = outcome.slotInWhichNonceDidAdvance) !== null && _outcome$slotInWhichN !== void 0 ? _outcome$slotInWhichN : minContextSlot))) {\n                _context38.next = 23;\n                break;\n              }\n              _context38.next = 22;\n              return sleep(400);\n            case 22:\n              return _context38.abrupt(\"continue\", 13);\n            case 23:\n              signatureStatus = status;\n              return _context38.abrupt(\"break\", 27);\n            case 27:\n              if (!((_signatureStatus = signatureStatus) !== null && _signatureStatus !== void 0 && _signatureStatus.value)) {\n                _context38.next = 46;\n                break;\n              }\n              commitmentForStatus = commitment || 'finalized';\n              confirmationStatus = signatureStatus.value.confirmationStatus;\n              _context38.t0 = commitmentForStatus;\n              _context38.next = _context38.t0 === 'processed' ? 33 : _context38.t0 === 'recent' ? 33 : _context38.t0 === 'confirmed' ? 36 : _context38.t0 === 'single' ? 36 : _context38.t0 === 'singleGossip' ? 36 : _context38.t0 === 'finalized' ? 39 : _context38.t0 === 'max' ? 39 : _context38.t0 === 'root' ? 39 : 42;\n              break;\n            case 33:\n              if (!(confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized')) {\n                _context38.next = 35;\n                break;\n              }\n              throw new TransactionExpiredNonceInvalidError(signature);\n            case 35:\n              return _context38.abrupt(\"break\", 43);\n            case 36:\n              if (!(confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized')) {\n                _context38.next = 38;\n                break;\n              }\n              throw new TransactionExpiredNonceInvalidError(signature);\n            case 38:\n              return _context38.abrupt(\"break\", 43);\n            case 39:\n              if (!(confirmationStatus !== 'finalized')) {\n                _context38.next = 41;\n                break;\n              }\n              throw new TransactionExpiredNonceInvalidError(signature);\n            case 41:\n              return _context38.abrupt(\"break\", 43);\n            case 42:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (function (_) {})(commitmentForStatus);\n            case 43:\n              result = {\n                context: signatureStatus.context,\n                value: {\n                  err: signatureStatus.value.err\n                }\n              };\n              _context38.next = 47;\n              break;\n            case 46:\n              throw new TransactionExpiredNonceInvalidError(signature);\n            case 47:\n              _context38.prev = 47;\n              done = true;\n              abortConfirmation();\n              return _context38.finish(47);\n            case 51:\n              return _context38.abrupt(\"return\", result);\n            case 52:\n            case \"end\":\n              return _context38.stop();\n          }\n        }, _callee38, this, [[5,, 47, 51]]);\n      }));\n      function confirmTransactionUsingDurableNonceStrategy(_x64) {\n        return _confirmTransactionUsingDurableNonceStrategy.apply(this, arguments);\n      }\n      return confirmTransactionUsingDurableNonceStrategy;\n    }()\n  }, {\n    key: \"confirmTransactionUsingLegacyTimeoutStrategy\",\n    value: function () {\n      var _confirmTransactionUsingLegacyTimeoutStrategy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee39(_ref35) {\n        var _this19 = this;\n        var commitment, signature, timeoutId, expiryPromise, _this$getTransactionC3, abortConfirmation, confirmationPromise, result, outcome;\n        return _regeneratorRuntime().wrap(function _callee39$(_context39) {\n          while (1) switch (_context39.prev = _context39.next) {\n            case 0:\n              commitment = _ref35.commitment, signature = _ref35.signature;\n              expiryPromise = new Promise(function (resolve) {\n                var timeoutMs = _this19._confirmTransactionInitialTimeout || 60 * 1000;\n                switch (commitment) {\n                  case 'processed':\n                  case 'recent':\n                  case 'single':\n                  case 'confirmed':\n                  case 'singleGossip':\n                    {\n                      timeoutMs = _this19._confirmTransactionInitialTimeout || 30 * 1000;\n                      break;\n                    }\n                }\n                timeoutId = setTimeout(function () {\n                  return resolve({\n                    __type: TransactionStatus.TIMED_OUT,\n                    timeoutMs: timeoutMs\n                  });\n                }, timeoutMs);\n              });\n              _this$getTransactionC3 = this.getTransactionConfirmationPromise({\n                commitment: commitment,\n                signature: signature\n              }), abortConfirmation = _this$getTransactionC3.abortConfirmation, confirmationPromise = _this$getTransactionC3.confirmationPromise;\n              _context39.prev = 3;\n              _context39.next = 6;\n              return Promise.race([confirmationPromise, expiryPromise]);\n            case 6:\n              outcome = _context39.sent;\n              if (!(outcome.__type === TransactionStatus.PROCESSED)) {\n                _context39.next = 11;\n                break;\n              }\n              result = outcome.response;\n              _context39.next = 12;\n              break;\n            case 11:\n              throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n            case 12:\n              _context39.prev = 12;\n              clearTimeout(timeoutId);\n              abortConfirmation();\n              return _context39.finish(12);\n            case 16:\n              return _context39.abrupt(\"return\", result);\n            case 17:\n            case \"end\":\n              return _context39.stop();\n          }\n        }, _callee39, this, [[3,, 12, 16]]);\n      }));\n      function confirmTransactionUsingLegacyTimeoutStrategy(_x65) {\n        return _confirmTransactionUsingLegacyTimeoutStrategy.apply(this, arguments);\n      }\n      return confirmTransactionUsingLegacyTimeoutStrategy;\n    }()\n    /**\n     * Return the list of nodes that are currently participating in the cluster\n     */\n  }, {\n    key: \"getClusterNodes\",\n    value: function () {\n      var _getClusterNodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee40() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee40$(_context40) {\n          while (1) switch (_context40.prev = _context40.next) {\n            case 0:\n              _context40.next = 2;\n              return this._rpcRequest('getClusterNodes', []);\n            case 2:\n              unsafeRes = _context40.sent;\n              res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n              if (!('error' in res)) {\n                _context40.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n            case 6:\n              return _context40.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context40.stop();\n          }\n        }, _callee40, this);\n      }));\n      function getClusterNodes() {\n        return _getClusterNodes.apply(this, arguments);\n      }\n      return getClusterNodes;\n    }()\n    /**\n     * Return the list of nodes that are currently participating in the cluster\n     */\n  }, {\n    key: \"getVoteAccounts\",\n    value: function () {\n      var _getVoteAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee41(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee41$(_context41) {\n          while (1) switch (_context41.prev = _context41.next) {\n            case 0:\n              args = this._buildArgs([], commitment);\n              _context41.next = 3;\n              return this._rpcRequest('getVoteAccounts', args);\n            case 3:\n              unsafeRes = _context41.sent;\n              res = create(unsafeRes, GetVoteAccounts);\n              if (!('error' in res)) {\n                _context41.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n            case 7:\n              return _context41.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context41.stop();\n          }\n        }, _callee41, this);\n      }));\n      function getVoteAccounts(_x66) {\n        return _getVoteAccounts.apply(this, arguments);\n      }\n      return getVoteAccounts;\n    }()\n    /**\n     * Fetch the current slot that the node is processing\n     */\n  }, {\n    key: \"getSlot\",\n    value: function () {\n      var _getSlot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee42(commitmentOrConfig) {\n        var _extractCommitmentFro11, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee42$(_context42) {\n          while (1) switch (_context42.prev = _context42.next) {\n            case 0:\n              _extractCommitmentFro11 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro11.commitment, config = _extractCommitmentFro11.config;\n              args = this._buildArgs([], commitment, undefined /* encoding */, config);\n              _context42.next = 4;\n              return this._rpcRequest('getSlot', args);\n            case 4:\n              unsafeRes = _context42.sent;\n              res = create(unsafeRes, jsonRpcResult(number()));\n              if (!('error' in res)) {\n                _context42.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n            case 8:\n              return _context42.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context42.stop();\n          }\n        }, _callee42, this);\n      }));\n      function getSlot(_x67) {\n        return _getSlot.apply(this, arguments);\n      }\n      return getSlot;\n    }()\n    /**\n     * Fetch the current slot leader of the cluster\n     */\n  }, {\n    key: \"getSlotLeader\",\n    value: function () {\n      var _getSlotLeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee43(commitmentOrConfig) {\n        var _extractCommitmentFro12, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee43$(_context43) {\n          while (1) switch (_context43.prev = _context43.next) {\n            case 0:\n              _extractCommitmentFro12 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro12.commitment, config = _extractCommitmentFro12.config;\n              args = this._buildArgs([], commitment, undefined /* encoding */, config);\n              _context43.next = 4;\n              return this._rpcRequest('getSlotLeader', args);\n            case 4:\n              unsafeRes = _context43.sent;\n              res = create(unsafeRes, jsonRpcResult(string()));\n              if (!('error' in res)) {\n                _context43.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n            case 8:\n              return _context43.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context43.stop();\n          }\n        }, _callee43, this);\n      }));\n      function getSlotLeader(_x68) {\n        return _getSlotLeader.apply(this, arguments);\n      }\n      return getSlotLeader;\n    }()\n    /**\n     * Fetch `limit` number of slot leaders starting from `startSlot`\n     *\n     * @param startSlot fetch slot leaders starting from this slot\n     * @param limit number of slot leaders to return\n     */\n  }, {\n    key: \"getSlotLeaders\",\n    value: function () {\n      var _getSlotLeaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee44(startSlot, limit) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee44$(_context44) {\n          while (1) switch (_context44.prev = _context44.next) {\n            case 0:\n              args = [startSlot, limit];\n              _context44.next = 3;\n              return this._rpcRequest('getSlotLeaders', args);\n            case 3:\n              unsafeRes = _context44.sent;\n              res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n              if (!('error' in res)) {\n                _context44.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n            case 7:\n              return _context44.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context44.stop();\n          }\n        }, _callee44, this);\n      }));\n      function getSlotLeaders(_x69, _x70) {\n        return _getSlotLeaders.apply(this, arguments);\n      }\n      return getSlotLeaders;\n    }()\n    /**\n     * Fetch the current status of a signature\n     */\n  }, {\n    key: \"getSignatureStatus\",\n    value: function () {\n      var _getSignatureStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee45(signature, config) {\n        var _yield$this$getSignat, context, values, value;\n        return _regeneratorRuntime().wrap(function _callee45$(_context45) {\n          while (1) switch (_context45.prev = _context45.next) {\n            case 0:\n              _context45.next = 2;\n              return this.getSignatureStatuses([signature], config);\n            case 2:\n              _yield$this$getSignat = _context45.sent;\n              context = _yield$this$getSignat.context;\n              values = _yield$this$getSignat.value;\n              assert(values.length === 1);\n              value = values[0];\n              return _context45.abrupt(\"return\", {\n                context: context,\n                value: value\n              });\n            case 8:\n            case \"end\":\n              return _context45.stop();\n          }\n        }, _callee45, this);\n      }));\n      function getSignatureStatus(_x71, _x72) {\n        return _getSignatureStatus.apply(this, arguments);\n      }\n      return getSignatureStatus;\n    }()\n    /**\n     * Fetch the current statuses of a batch of signatures\n     */\n  }, {\n    key: \"getSignatureStatuses\",\n    value: function () {\n      var _getSignatureStatuses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee46(signatures, config) {\n        var params, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee46$(_context46) {\n          while (1) switch (_context46.prev = _context46.next) {\n            case 0:\n              params = [signatures];\n              if (config) {\n                params.push(config);\n              }\n              _context46.next = 4;\n              return this._rpcRequest('getSignatureStatuses', params);\n            case 4:\n              unsafeRes = _context46.sent;\n              res = create(unsafeRes, GetSignatureStatusesRpcResult);\n              if (!('error' in res)) {\n                _context46.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n            case 8:\n              return _context46.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context46.stop();\n          }\n        }, _callee46, this);\n      }));\n      function getSignatureStatuses(_x73, _x74) {\n        return _getSignatureStatuses.apply(this, arguments);\n      }\n      return getSignatureStatuses;\n    }()\n    /**\n     * Fetch the current transaction count of the cluster\n     */\n  }, {\n    key: \"getTransactionCount\",\n    value: function () {\n      var _getTransactionCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee47(commitmentOrConfig) {\n        var _extractCommitmentFro13, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee47$(_context47) {\n          while (1) switch (_context47.prev = _context47.next) {\n            case 0:\n              _extractCommitmentFro13 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro13.commitment, config = _extractCommitmentFro13.config;\n              args = this._buildArgs([], commitment, undefined /* encoding */, config);\n              _context47.next = 4;\n              return this._rpcRequest('getTransactionCount', args);\n            case 4:\n              unsafeRes = _context47.sent;\n              res = create(unsafeRes, jsonRpcResult(number()));\n              if (!('error' in res)) {\n                _context47.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n            case 8:\n              return _context47.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context47.stop();\n          }\n        }, _callee47, this);\n      }));\n      function getTransactionCount(_x75) {\n        return _getTransactionCount.apply(this, arguments);\n      }\n      return getTransactionCount;\n    }()\n    /**\n     * Fetch the current total currency supply of the cluster in lamports\n     *\n     * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n     */\n  }, {\n    key: \"getTotalSupply\",\n    value: function () {\n      var _getTotalSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee48(commitment) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee48$(_context48) {\n          while (1) switch (_context48.prev = _context48.next) {\n            case 0:\n              _context48.next = 2;\n              return this.getSupply({\n                commitment: commitment,\n                excludeNonCirculatingAccountsList: true\n              });\n            case 2:\n              result = _context48.sent;\n              return _context48.abrupt(\"return\", result.value.total);\n            case 4:\n            case \"end\":\n              return _context48.stop();\n          }\n        }, _callee48, this);\n      }));\n      function getTotalSupply(_x76) {\n        return _getTotalSupply.apply(this, arguments);\n      }\n      return getTotalSupply;\n    }()\n    /**\n     * Fetch the cluster InflationGovernor parameters\n     */\n  }, {\n    key: \"getInflationGovernor\",\n    value: function () {\n      var _getInflationGovernor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee49(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee49$(_context49) {\n          while (1) switch (_context49.prev = _context49.next) {\n            case 0:\n              args = this._buildArgs([], commitment);\n              _context49.next = 3;\n              return this._rpcRequest('getInflationGovernor', args);\n            case 3:\n              unsafeRes = _context49.sent;\n              res = create(unsafeRes, GetInflationGovernorRpcResult);\n              if (!('error' in res)) {\n                _context49.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n            case 7:\n              return _context49.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context49.stop();\n          }\n        }, _callee49, this);\n      }));\n      function getInflationGovernor(_x77) {\n        return _getInflationGovernor.apply(this, arguments);\n      }\n      return getInflationGovernor;\n    }()\n    /**\n     * Fetch the inflation reward for a list of addresses for an epoch\n     */\n  }, {\n    key: \"getInflationReward\",\n    value: function () {\n      var _getInflationReward = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee50(addresses, epoch, commitmentOrConfig) {\n        var _extractCommitmentFro14, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee50$(_context50) {\n          while (1) switch (_context50.prev = _context50.next) {\n            case 0:\n              _extractCommitmentFro14 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro14.commitment, config = _extractCommitmentFro14.config;\n              args = this._buildArgs([addresses.map(function (pubkey) {\n                return pubkey.toBase58();\n              })], commitment, undefined /* encoding */, _objectSpread(_objectSpread({}, config), {}, {\n                epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n              }));\n              _context50.next = 4;\n              return this._rpcRequest('getInflationReward', args);\n            case 4:\n              unsafeRes = _context50.sent;\n              res = create(unsafeRes, GetInflationRewardResult);\n              if (!('error' in res)) {\n                _context50.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n            case 8:\n              return _context50.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context50.stop();\n          }\n        }, _callee50, this);\n      }));\n      function getInflationReward(_x78, _x79, _x80) {\n        return _getInflationReward.apply(this, arguments);\n      }\n      return getInflationReward;\n    }()\n    /**\n     * Fetch the specific inflation values for the current epoch\n     */\n  }, {\n    key: \"getInflationRate\",\n    value: function () {\n      var _getInflationRate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee51() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee51$(_context51) {\n          while (1) switch (_context51.prev = _context51.next) {\n            case 0:\n              _context51.next = 2;\n              return this._rpcRequest('getInflationRate', []);\n            case 2:\n              unsafeRes = _context51.sent;\n              res = create(unsafeRes, GetInflationRateRpcResult);\n              if (!('error' in res)) {\n                _context51.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n            case 6:\n              return _context51.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context51.stop();\n          }\n        }, _callee51, this);\n      }));\n      function getInflationRate() {\n        return _getInflationRate.apply(this, arguments);\n      }\n      return getInflationRate;\n    }()\n    /**\n     * Fetch the Epoch Info parameters\n     */\n  }, {\n    key: \"getEpochInfo\",\n    value: function () {\n      var _getEpochInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee52(commitmentOrConfig) {\n        var _extractCommitmentFro15, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee52$(_context52) {\n          while (1) switch (_context52.prev = _context52.next) {\n            case 0:\n              _extractCommitmentFro15 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro15.commitment, config = _extractCommitmentFro15.config;\n              args = this._buildArgs([], commitment, undefined /* encoding */, config);\n              _context52.next = 4;\n              return this._rpcRequest('getEpochInfo', args);\n            case 4:\n              unsafeRes = _context52.sent;\n              res = create(unsafeRes, GetEpochInfoRpcResult);\n              if (!('error' in res)) {\n                _context52.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n            case 8:\n              return _context52.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context52.stop();\n          }\n        }, _callee52, this);\n      }));\n      function getEpochInfo(_x81) {\n        return _getEpochInfo.apply(this, arguments);\n      }\n      return getEpochInfo;\n    }()\n    /**\n     * Fetch the Epoch Schedule parameters\n     */\n  }, {\n    key: \"getEpochSchedule\",\n    value: function () {\n      var _getEpochSchedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee53() {\n        var unsafeRes, res, epochSchedule;\n        return _regeneratorRuntime().wrap(function _callee53$(_context53) {\n          while (1) switch (_context53.prev = _context53.next) {\n            case 0:\n              _context53.next = 2;\n              return this._rpcRequest('getEpochSchedule', []);\n            case 2:\n              unsafeRes = _context53.sent;\n              res = create(unsafeRes, GetEpochScheduleRpcResult);\n              if (!('error' in res)) {\n                _context53.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n            case 6:\n              epochSchedule = res.result;\n              return _context53.abrupt(\"return\", new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot));\n            case 8:\n            case \"end\":\n              return _context53.stop();\n          }\n        }, _callee53, this);\n      }));\n      function getEpochSchedule() {\n        return _getEpochSchedule.apply(this, arguments);\n      }\n      return getEpochSchedule;\n    }()\n    /**\n     * Fetch the leader schedule for the current epoch\n     * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n     */\n  }, {\n    key: \"getLeaderSchedule\",\n    value: function () {\n      var _getLeaderSchedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee54() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee54$(_context54) {\n          while (1) switch (_context54.prev = _context54.next) {\n            case 0:\n              _context54.next = 2;\n              return this._rpcRequest('getLeaderSchedule', []);\n            case 2:\n              unsafeRes = _context54.sent;\n              res = create(unsafeRes, GetLeaderScheduleRpcResult);\n              if (!('error' in res)) {\n                _context54.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n            case 6:\n              return _context54.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context54.stop();\n          }\n        }, _callee54, this);\n      }));\n      function getLeaderSchedule() {\n        return _getLeaderSchedule.apply(this, arguments);\n      }\n      return getLeaderSchedule;\n    }()\n    /**\n     * Fetch the minimum balance needed to exempt an account of `dataLength`\n     * size from rent\n     */\n  }, {\n    key: \"getMinimumBalanceForRentExemption\",\n    value: function () {\n      var _getMinimumBalanceForRentExemption = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee55(dataLength, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee55$(_context55) {\n          while (1) switch (_context55.prev = _context55.next) {\n            case 0:\n              args = this._buildArgs([dataLength], commitment);\n              _context55.next = 3;\n              return this._rpcRequest('getMinimumBalanceForRentExemption', args);\n            case 3:\n              unsafeRes = _context55.sent;\n              res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n              if (!('error' in res)) {\n                _context55.next = 8;\n                break;\n              }\n              console.warn('Unable to fetch minimum balance for rent exemption');\n              return _context55.abrupt(\"return\", 0);\n            case 8:\n              return _context55.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context55.stop();\n          }\n        }, _callee55, this);\n      }));\n      function getMinimumBalanceForRentExemption(_x82, _x83) {\n        return _getMinimumBalanceForRentExemption.apply(this, arguments);\n      }\n      return getMinimumBalanceForRentExemption;\n    }()\n    /**\n     * Fetch a recent blockhash from the cluster, return with context\n     * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n     */\n  }, {\n    key: \"getRecentBlockhashAndContext\",\n    value: function () {\n      var _getRecentBlockhashAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee56(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee56$(_context56) {\n          while (1) switch (_context56.prev = _context56.next) {\n            case 0:\n              args = this._buildArgs([], commitment);\n              _context56.next = 3;\n              return this._rpcRequest('getRecentBlockhash', args);\n            case 3:\n              unsafeRes = _context56.sent;\n              res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n              if (!('error' in res)) {\n                _context56.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n            case 7:\n              return _context56.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context56.stop();\n          }\n        }, _callee56, this);\n      }));\n      function getRecentBlockhashAndContext(_x84) {\n        return _getRecentBlockhashAndContext.apply(this, arguments);\n      }\n      return getRecentBlockhashAndContext;\n    }()\n    /**\n     * Fetch recent performance samples\n     * @return {Promise<Array<PerfSample>>}\n     */\n  }, {\n    key: \"getRecentPerformanceSamples\",\n    value: function () {\n      var _getRecentPerformanceSamples = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee57(limit) {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee57$(_context57) {\n          while (1) switch (_context57.prev = _context57.next) {\n            case 0:\n              _context57.next = 2;\n              return this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n            case 2:\n              unsafeRes = _context57.sent;\n              res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n              if (!('error' in res)) {\n                _context57.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n            case 6:\n              return _context57.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context57.stop();\n          }\n        }, _callee57, this);\n      }));\n      function getRecentPerformanceSamples(_x85) {\n        return _getRecentPerformanceSamples.apply(this, arguments);\n      }\n      return getRecentPerformanceSamples;\n    }()\n    /**\n     * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n     */\n  }, {\n    key: \"getFeeCalculatorForBlockhash\",\n    value: function () {\n      var _getFeeCalculatorForBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee58(blockhash, commitment) {\n        var args, unsafeRes, res, _res$result, context, value;\n        return _regeneratorRuntime().wrap(function _callee58$(_context58) {\n          while (1) switch (_context58.prev = _context58.next) {\n            case 0:\n              args = this._buildArgs([blockhash], commitment);\n              _context58.next = 3;\n              return this._rpcRequest('getFeeCalculatorForBlockhash', args);\n            case 3:\n              unsafeRes = _context58.sent;\n              res = create(unsafeRes, GetFeeCalculatorRpcResult);\n              if (!('error' in res)) {\n                _context58.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n            case 7:\n              _res$result = res.result, context = _res$result.context, value = _res$result.value;\n              return _context58.abrupt(\"return\", {\n                context: context,\n                value: value !== null ? value.feeCalculator : null\n              });\n            case 9:\n            case \"end\":\n              return _context58.stop();\n          }\n        }, _callee58, this);\n      }));\n      function getFeeCalculatorForBlockhash(_x86, _x87) {\n        return _getFeeCalculatorForBlockhash.apply(this, arguments);\n      }\n      return getFeeCalculatorForBlockhash;\n    }()\n    /**\n     * Fetch the fee for a message from the cluster, return with context\n     */\n  }, {\n    key: \"getFeeForMessage\",\n    value: function () {\n      var _getFeeForMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee59(message, commitment) {\n        var wireMessage, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee59$(_context59) {\n          while (1) switch (_context59.prev = _context59.next) {\n            case 0:\n              wireMessage = toBuffer(message.serialize()).toString('base64');\n              args = this._buildArgs([wireMessage], commitment);\n              _context59.next = 4;\n              return this._rpcRequest('getFeeForMessage', args);\n            case 4:\n              unsafeRes = _context59.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n              if (!('error' in res)) {\n                _context59.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n            case 8:\n              if (!(res.result === null)) {\n                _context59.next = 10;\n                break;\n              }\n              throw new Error('invalid blockhash');\n            case 10:\n              return _context59.abrupt(\"return\", res.result);\n            case 11:\n            case \"end\":\n              return _context59.stop();\n          }\n        }, _callee59, this);\n      }));\n      function getFeeForMessage(_x88, _x89) {\n        return _getFeeForMessage.apply(this, arguments);\n      }\n      return getFeeForMessage;\n    }()\n    /**\n     * Fetch a list of prioritization fees from recent blocks.\n     */\n  }, {\n    key: \"getRecentPrioritizationFees\",\n    value: function () {\n      var _getRecentPrioritizationFees = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee60(config) {\n        var _config$lockedWritabl;\n        var accounts, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee60$(_context60) {\n          while (1) switch (_context60.prev = _context60.next) {\n            case 0:\n              accounts = config === null || config === void 0 || (_config$lockedWritabl = config.lockedWritableAccounts) === null || _config$lockedWritabl === void 0 ? void 0 : _config$lockedWritabl.map(function (key) {\n                return key.toBase58();\n              });\n              args = accounts !== null && accounts !== void 0 && accounts.length ? [accounts] : [];\n              _context60.next = 4;\n              return this._rpcRequest('getRecentPrioritizationFees', args);\n            case 4:\n              unsafeRes = _context60.sent;\n              res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n              if (!('error' in res)) {\n                _context60.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get recent prioritization fees');\n            case 8:\n              return _context60.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context60.stop();\n          }\n        }, _callee60, this);\n      }));\n      function getRecentPrioritizationFees(_x90) {\n        return _getRecentPrioritizationFees.apply(this, arguments);\n      }\n      return getRecentPrioritizationFees;\n    }()\n    /**\n     * Fetch a recent blockhash from the cluster\n     * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n     */\n  }, {\n    key: \"getRecentBlockhash\",\n    value: function () {\n      var _getRecentBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee61(commitment) {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee61$(_context61) {\n          while (1) switch (_context61.prev = _context61.next) {\n            case 0:\n              _context61.prev = 0;\n              _context61.next = 3;\n              return this.getRecentBlockhashAndContext(commitment);\n            case 3:\n              res = _context61.sent;\n              return _context61.abrupt(\"return\", res.value);\n            case 7:\n              _context61.prev = 7;\n              _context61.t0 = _context61[\"catch\"](0);\n              throw new Error('failed to get recent blockhash: ' + _context61.t0);\n            case 10:\n            case \"end\":\n              return _context61.stop();\n          }\n        }, _callee61, this, [[0, 7]]);\n      }));\n      function getRecentBlockhash(_x91) {\n        return _getRecentBlockhash.apply(this, arguments);\n      }\n      return getRecentBlockhash;\n    }()\n    /**\n     * Fetch the latest blockhash from the cluster\n     * @return {Promise<BlockhashWithExpiryBlockHeight>}\n     */\n  }, {\n    key: \"getLatestBlockhash\",\n    value: function () {\n      var _getLatestBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee62(commitmentOrConfig) {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee62$(_context62) {\n          while (1) switch (_context62.prev = _context62.next) {\n            case 0:\n              _context62.prev = 0;\n              _context62.next = 3;\n              return this.getLatestBlockhashAndContext(commitmentOrConfig);\n            case 3:\n              res = _context62.sent;\n              return _context62.abrupt(\"return\", res.value);\n            case 7:\n              _context62.prev = 7;\n              _context62.t0 = _context62[\"catch\"](0);\n              throw new Error('failed to get recent blockhash: ' + _context62.t0);\n            case 10:\n            case \"end\":\n              return _context62.stop();\n          }\n        }, _callee62, this, [[0, 7]]);\n      }));\n      function getLatestBlockhash(_x92) {\n        return _getLatestBlockhash.apply(this, arguments);\n      }\n      return getLatestBlockhash;\n    }()\n    /**\n     * Fetch the latest blockhash from the cluster\n     * @return {Promise<BlockhashWithExpiryBlockHeight>}\n     */\n  }, {\n    key: \"getLatestBlockhashAndContext\",\n    value: function () {\n      var _getLatestBlockhashAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee63(commitmentOrConfig) {\n        var _extractCommitmentFro16, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee63$(_context63) {\n          while (1) switch (_context63.prev = _context63.next) {\n            case 0:\n              _extractCommitmentFro16 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro16.commitment, config = _extractCommitmentFro16.config;\n              args = this._buildArgs([], commitment, undefined /* encoding */, config);\n              _context63.next = 4;\n              return this._rpcRequest('getLatestBlockhash', args);\n            case 4:\n              unsafeRes = _context63.sent;\n              res = create(unsafeRes, GetLatestBlockhashRpcResult);\n              if (!('error' in res)) {\n                _context63.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n            case 8:\n              return _context63.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context63.stop();\n          }\n        }, _callee63, this);\n      }));\n      function getLatestBlockhashAndContext(_x93) {\n        return _getLatestBlockhashAndContext.apply(this, arguments);\n      }\n      return getLatestBlockhashAndContext;\n    }()\n    /**\n     * Returns whether a blockhash is still valid or not\n     */\n  }, {\n    key: \"isBlockhashValid\",\n    value: function () {\n      var _isBlockhashValid = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee64(blockhash, rawConfig) {\n        var _extractCommitmentFro17, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee64$(_context64) {\n          while (1) switch (_context64.prev = _context64.next) {\n            case 0:\n              _extractCommitmentFro17 = extractCommitmentFromConfig(rawConfig), commitment = _extractCommitmentFro17.commitment, config = _extractCommitmentFro17.config;\n              args = this._buildArgs([blockhash], commitment, undefined /* encoding */, config);\n              _context64.next = 4;\n              return this._rpcRequest('isBlockhashValid', args);\n            case 4:\n              unsafeRes = _context64.sent;\n              res = create(unsafeRes, IsBlockhashValidRpcResult);\n              if (!('error' in res)) {\n                _context64.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to determine if the blockhash `' + blockhash + '`is valid');\n            case 8:\n              return _context64.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context64.stop();\n          }\n        }, _callee64, this);\n      }));\n      function isBlockhashValid(_x94, _x95) {\n        return _isBlockhashValid.apply(this, arguments);\n      }\n      return isBlockhashValid;\n    }()\n    /**\n     * Fetch the node version\n     */\n  }, {\n    key: \"getVersion\",\n    value: function () {\n      var _getVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee65() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee65$(_context65) {\n          while (1) switch (_context65.prev = _context65.next) {\n            case 0:\n              _context65.next = 2;\n              return this._rpcRequest('getVersion', []);\n            case 2:\n              unsafeRes = _context65.sent;\n              res = create(unsafeRes, jsonRpcResult(VersionResult));\n              if (!('error' in res)) {\n                _context65.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get version');\n            case 6:\n              return _context65.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context65.stop();\n          }\n        }, _callee65, this);\n      }));\n      function getVersion() {\n        return _getVersion.apply(this, arguments);\n      }\n      return getVersion;\n    }()\n    /**\n     * Fetch the genesis hash\n     */\n  }, {\n    key: \"getGenesisHash\",\n    value: function () {\n      var _getGenesisHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee66() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee66$(_context66) {\n          while (1) switch (_context66.prev = _context66.next) {\n            case 0:\n              _context66.next = 2;\n              return this._rpcRequest('getGenesisHash', []);\n            case 2:\n              unsafeRes = _context66.sent;\n              res = create(unsafeRes, jsonRpcResult(string()));\n              if (!('error' in res)) {\n                _context66.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n            case 6:\n              return _context66.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context66.stop();\n          }\n        }, _callee66, this);\n      }));\n      function getGenesisHash() {\n        return _getGenesisHash.apply(this, arguments);\n      }\n      return getGenesisHash;\n    }()\n    /**\n     * Fetch a processed block from the cluster.\n     *\n     * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n     * setting the `maxSupportedTransactionVersion` property.\n     */\n    /**\n     * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n     * setting the `maxSupportedTransactionVersion` property.\n     */\n    // eslint-disable-next-line no-dupe-class-members\n    /**\n     * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n     * setting the `maxSupportedTransactionVersion` property.\n     */\n    // eslint-disable-next-line no-dupe-class-members\n    /**\n     * Fetch a processed block from the cluster.\n     */\n    // eslint-disable-next-line no-dupe-class-members\n    // eslint-disable-next-line no-dupe-class-members\n    // eslint-disable-next-line no-dupe-class-members\n    /**\n     * Fetch a processed block from the cluster.\n     */\n    // eslint-disable-next-line no-dupe-class-members\n  }, {\n    key: \"getBlock\",\n    value: function () {\n      var _getBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee67(slot, rawConfig) {\n        var _extractCommitmentFro18, commitment, config, args, unsafeRes, res, _res, _res2, result;\n        return _regeneratorRuntime().wrap(function _callee67$(_context67) {\n          while (1) switch (_context67.prev = _context67.next) {\n            case 0:\n              _extractCommitmentFro18 = extractCommitmentFromConfig(rawConfig), commitment = _extractCommitmentFro18.commitment, config = _extractCommitmentFro18.config;\n              args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined /* encoding */, config);\n              _context67.next = 4;\n              return this._rpcRequest('getBlock', args);\n            case 4:\n              unsafeRes = _context67.sent;\n              _context67.prev = 5;\n              _context67.t0 = config === null || config === void 0 ? void 0 : config.transactionDetails;\n              _context67.next = _context67.t0 === 'accounts' ? 9 : _context67.t0 === 'none' ? 13 : 17;\n              break;\n            case 9:\n              res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n              if (!('error' in res)) {\n                _context67.next = 12;\n                break;\n              }\n              throw res.error;\n            case 12:\n              return _context67.abrupt(\"return\", res.result);\n            case 13:\n              _res = create(unsafeRes, GetNoneModeBlockRpcResult);\n              if (!('error' in _res)) {\n                _context67.next = 16;\n                break;\n              }\n              throw _res.error;\n            case 16:\n              return _context67.abrupt(\"return\", _res.result);\n            case 17:\n              _res2 = create(unsafeRes, GetBlockRpcResult);\n              if (!('error' in _res2)) {\n                _context67.next = 20;\n                break;\n              }\n              throw _res2.error;\n            case 20:\n              result = _res2.result;\n              return _context67.abrupt(\"return\", result ? _objectSpread(_objectSpread({}, result), {}, {\n                transactions: result.transactions.map(function (_ref36) {\n                  var transaction = _ref36.transaction,\n                    meta = _ref36.meta,\n                    version = _ref36.version;\n                  return {\n                    meta: meta,\n                    transaction: _objectSpread(_objectSpread({}, transaction), {}, {\n                      message: versionedMessageFromResponse(version, transaction.message)\n                    }),\n                    version: version\n                  };\n                })\n              }) : null);\n            case 22:\n              _context67.next = 27;\n              break;\n            case 24:\n              _context67.prev = 24;\n              _context67.t1 = _context67[\"catch\"](5);\n              throw new SolanaJSONRPCError(_context67.t1, 'failed to get confirmed block');\n            case 27:\n            case \"end\":\n              return _context67.stop();\n          }\n        }, _callee67, this, [[5, 24]]);\n      }));\n      function getBlock(_x96, _x97) {\n        return _getBlock.apply(this, arguments);\n      }\n      return getBlock;\n    }()\n    /**\n     * Fetch parsed transaction details for a confirmed or finalized block\n     */\n    // eslint-disable-next-line no-dupe-class-members\n    // eslint-disable-next-line no-dupe-class-members\n    // eslint-disable-next-line no-dupe-class-members\n  }, {\n    key: \"getParsedBlock\",\n    value: function () {\n      var _getParsedBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee68(slot, rawConfig) {\n        var _extractCommitmentFro19, commitment, config, args, unsafeRes, res, _res3, _res4;\n        return _regeneratorRuntime().wrap(function _callee68$(_context68) {\n          while (1) switch (_context68.prev = _context68.next) {\n            case 0:\n              _extractCommitmentFro19 = extractCommitmentFromConfig(rawConfig), commitment = _extractCommitmentFro19.commitment, config = _extractCommitmentFro19.config;\n              args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n              _context68.next = 4;\n              return this._rpcRequest('getBlock', args);\n            case 4:\n              unsafeRes = _context68.sent;\n              _context68.prev = 5;\n              _context68.t0 = config === null || config === void 0 ? void 0 : config.transactionDetails;\n              _context68.next = _context68.t0 === 'accounts' ? 9 : _context68.t0 === 'none' ? 13 : 17;\n              break;\n            case 9:\n              res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n              if (!('error' in res)) {\n                _context68.next = 12;\n                break;\n              }\n              throw res.error;\n            case 12:\n              return _context68.abrupt(\"return\", res.result);\n            case 13:\n              _res3 = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n              if (!('error' in _res3)) {\n                _context68.next = 16;\n                break;\n              }\n              throw _res3.error;\n            case 16:\n              return _context68.abrupt(\"return\", _res3.result);\n            case 17:\n              _res4 = create(unsafeRes, GetParsedBlockRpcResult);\n              if (!('error' in _res4)) {\n                _context68.next = 20;\n                break;\n              }\n              throw _res4.error;\n            case 20:\n              return _context68.abrupt(\"return\", _res4.result);\n            case 21:\n              _context68.next = 26;\n              break;\n            case 23:\n              _context68.prev = 23;\n              _context68.t1 = _context68[\"catch\"](5);\n              throw new SolanaJSONRPCError(_context68.t1, 'failed to get block');\n            case 26:\n            case \"end\":\n              return _context68.stop();\n          }\n        }, _callee68, this, [[5, 23]]);\n      }));\n      function getParsedBlock(_x98, _x99) {\n        return _getParsedBlock.apply(this, arguments);\n      }\n      return getParsedBlock;\n    }()\n    /*\n     * Returns recent block production information from the current or previous epoch\n     */\n  }, {\n    key: \"getBlockProduction\",\n    value: function () {\n      var _getBlockProduction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee69(configOrCommitment) {\n        var extra, commitment, c, rest, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee69$(_context69) {\n          while (1) switch (_context69.prev = _context69.next) {\n            case 0:\n              if (typeof configOrCommitment === 'string') {\n                commitment = configOrCommitment;\n              } else if (configOrCommitment) {\n                c = configOrCommitment.commitment, rest = _objectWithoutProperties(configOrCommitment, _excluded3);\n                commitment = c;\n                extra = rest;\n              }\n              args = this._buildArgs([], commitment, 'base64', extra);\n              _context69.next = 4;\n              return this._rpcRequest('getBlockProduction', args);\n            case 4:\n              unsafeRes = _context69.sent;\n              res = create(unsafeRes, BlockProductionResponseStruct);\n              if (!('error' in res)) {\n                _context69.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n            case 8:\n              return _context69.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context69.stop();\n          }\n        }, _callee69, this);\n      }));\n      function getBlockProduction(_x100) {\n        return _getBlockProduction.apply(this, arguments);\n      }\n      return getBlockProduction;\n    }()\n    /**\n     * Fetch a confirmed or finalized transaction from the cluster.\n     *\n     * @deprecated Instead, call `getTransaction` using a\n     * `GetVersionedTransactionConfig` by setting the\n     * `maxSupportedTransactionVersion` property.\n     */\n    /**\n     * Fetch a confirmed or finalized transaction from the cluster.\n     */\n    // eslint-disable-next-line no-dupe-class-members\n    /**\n     * Fetch a confirmed or finalized transaction from the cluster.\n     */\n    // eslint-disable-next-line no-dupe-class-members\n  }, {\n    key: \"getTransaction\",\n    value: function () {\n      var _getTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee70(signature, rawConfig) {\n        var _extractCommitmentFro20, commitment, config, args, unsafeRes, res, result;\n        return _regeneratorRuntime().wrap(function _callee70$(_context70) {\n          while (1) switch (_context70.prev = _context70.next) {\n            case 0:\n              _extractCommitmentFro20 = extractCommitmentFromConfig(rawConfig), commitment = _extractCommitmentFro20.commitment, config = _extractCommitmentFro20.config;\n              args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n              _context70.next = 4;\n              return this._rpcRequest('getTransaction', args);\n            case 4:\n              unsafeRes = _context70.sent;\n              res = create(unsafeRes, GetTransactionRpcResult);\n              if (!('error' in res)) {\n                _context70.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n            case 8:\n              result = res.result;\n              if (result) {\n                _context70.next = 11;\n                break;\n              }\n              return _context70.abrupt(\"return\", result);\n            case 11:\n              return _context70.abrupt(\"return\", _objectSpread(_objectSpread({}, result), {}, {\n                transaction: _objectSpread(_objectSpread({}, result.transaction), {}, {\n                  message: versionedMessageFromResponse(result.version, result.transaction.message)\n                })\n              }));\n            case 12:\n            case \"end\":\n              return _context70.stop();\n          }\n        }, _callee70, this);\n      }));\n      function getTransaction(_x101, _x102) {\n        return _getTransaction.apply(this, arguments);\n      }\n      return getTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a confirmed or finalized transaction\n     */\n  }, {\n    key: \"getParsedTransaction\",\n    value: function () {\n      var _getParsedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee71(signature, commitmentOrConfig) {\n        var _extractCommitmentFro21, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee71$(_context71) {\n          while (1) switch (_context71.prev = _context71.next) {\n            case 0:\n              _extractCommitmentFro21 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro21.commitment, config = _extractCommitmentFro21.config;\n              args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n              _context71.next = 4;\n              return this._rpcRequest('getTransaction', args);\n            case 4:\n              unsafeRes = _context71.sent;\n              res = create(unsafeRes, GetParsedTransactionRpcResult);\n              if (!('error' in res)) {\n                _context71.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n            case 8:\n              return _context71.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context71.stop();\n          }\n        }, _callee71, this);\n      }));\n      function getParsedTransaction(_x103, _x104) {\n        return _getParsedTransaction.apply(this, arguments);\n      }\n      return getParsedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a batch of confirmed transactions\n     */\n  }, {\n    key: \"getParsedTransactions\",\n    value: function () {\n      var _getParsedTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee72(signatures, commitmentOrConfig) {\n        var _this20 = this;\n        var _extractCommitmentFro22, commitment, config, batch, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee72$(_context72) {\n          while (1) switch (_context72.prev = _context72.next) {\n            case 0:\n              _extractCommitmentFro22 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro22.commitment, config = _extractCommitmentFro22.config;\n              batch = signatures.map(function (signature) {\n                var args = _this20._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n                return {\n                  methodName: 'getTransaction',\n                  args: args\n                };\n              });\n              _context72.next = 4;\n              return this._rpcBatchRequest(batch);\n            case 4:\n              unsafeRes = _context72.sent;\n              res = unsafeRes.map(function (unsafeRes) {\n                var res = create(unsafeRes, GetParsedTransactionRpcResult);\n                if ('error' in res) {\n                  throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n                }\n                return res.result;\n              });\n              return _context72.abrupt(\"return\", res);\n            case 7:\n            case \"end\":\n              return _context72.stop();\n          }\n        }, _callee72, this);\n      }));\n      function getParsedTransactions(_x105, _x106) {\n        return _getParsedTransactions.apply(this, arguments);\n      }\n      return getParsedTransactions;\n    }()\n    /**\n     * Fetch transaction details for a batch of confirmed transactions.\n     * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n     *\n     * @deprecated Instead, call `getTransactions` using a\n     * `GetVersionedTransactionConfig` by setting the\n     * `maxSupportedTransactionVersion` property.\n     */\n    /**\n     * Fetch transaction details for a batch of confirmed transactions.\n     * Similar to {@link getParsedTransactions} but returns a {@link\n     * VersionedTransactionResponse}.\n     */\n    // eslint-disable-next-line no-dupe-class-members\n    /**\n     * Fetch transaction details for a batch of confirmed transactions.\n     * Similar to {@link getParsedTransactions} but returns a {@link\n     * VersionedTransactionResponse}.\n     */\n    // eslint-disable-next-line no-dupe-class-members\n  }, {\n    key: \"getTransactions\",\n    value: function () {\n      var _getTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee73(signatures, commitmentOrConfig) {\n        var _this21 = this;\n        var _extractCommitmentFro23, commitment, config, batch, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee73$(_context73) {\n          while (1) switch (_context73.prev = _context73.next) {\n            case 0:\n              _extractCommitmentFro23 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro23.commitment, config = _extractCommitmentFro23.config;\n              batch = signatures.map(function (signature) {\n                var args = _this21._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n                return {\n                  methodName: 'getTransaction',\n                  args: args\n                };\n              });\n              _context73.next = 4;\n              return this._rpcBatchRequest(batch);\n            case 4:\n              unsafeRes = _context73.sent;\n              res = unsafeRes.map(function (unsafeRes) {\n                var res = create(unsafeRes, GetTransactionRpcResult);\n                if ('error' in res) {\n                  throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n                }\n                var result = res.result;\n                if (!result) return result;\n                return _objectSpread(_objectSpread({}, result), {}, {\n                  transaction: _objectSpread(_objectSpread({}, result.transaction), {}, {\n                    message: versionedMessageFromResponse(result.version, result.transaction.message)\n                  })\n                });\n              });\n              return _context73.abrupt(\"return\", res);\n            case 7:\n            case \"end\":\n              return _context73.stop();\n          }\n        }, _callee73, this);\n      }));\n      function getTransactions(_x107, _x108) {\n        return _getTransactions.apply(this, arguments);\n      }\n      return getTransactions;\n    }()\n    /**\n     * Fetch a list of Transactions and transaction statuses from the cluster\n     * for a confirmed block.\n     *\n     * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n     */\n  }, {\n    key: \"getConfirmedBlock\",\n    value: function () {\n      var _getConfirmedBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee74(slot, commitment) {\n        var args, unsafeRes, res, result, block;\n        return _regeneratorRuntime().wrap(function _callee74$(_context74) {\n          while (1) switch (_context74.prev = _context74.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([slot], commitment);\n              _context74.next = 3;\n              return this._rpcRequest('getConfirmedBlock', args);\n            case 3:\n              unsafeRes = _context74.sent;\n              res = create(unsafeRes, GetConfirmedBlockRpcResult);\n              if (!('error' in res)) {\n                _context74.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n            case 7:\n              result = res.result;\n              if (result) {\n                _context74.next = 10;\n                break;\n              }\n              throw new Error('Confirmed block ' + slot + ' not found');\n            case 10:\n              block = _objectSpread(_objectSpread({}, result), {}, {\n                transactions: result.transactions.map(function (_ref37) {\n                  var transaction = _ref37.transaction,\n                    meta = _ref37.meta;\n                  var message = new Message(transaction.message);\n                  return {\n                    meta: meta,\n                    transaction: _objectSpread(_objectSpread({}, transaction), {}, {\n                      message: message\n                    })\n                  };\n                })\n              });\n              return _context74.abrupt(\"return\", _objectSpread(_objectSpread({}, block), {}, {\n                transactions: block.transactions.map(function (_ref38) {\n                  var transaction = _ref38.transaction,\n                    meta = _ref38.meta;\n                  return {\n                    meta: meta,\n                    transaction: Transaction.populate(transaction.message, transaction.signatures)\n                  };\n                })\n              }));\n            case 12:\n            case \"end\":\n              return _context74.stop();\n          }\n        }, _callee74, this);\n      }));\n      function getConfirmedBlock(_x109, _x110) {\n        return _getConfirmedBlock.apply(this, arguments);\n      }\n      return getConfirmedBlock;\n    }()\n    /**\n     * Fetch confirmed blocks between two slots\n     */\n  }, {\n    key: \"getBlocks\",\n    value: function () {\n      var _getBlocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee75(startSlot, endSlot, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee75$(_context75) {\n          while (1) switch (_context75.prev = _context75.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n              _context75.next = 3;\n              return this._rpcRequest('getBlocks', args);\n            case 3:\n              unsafeRes = _context75.sent;\n              res = create(unsafeRes, jsonRpcResult(array(number())));\n              if (!('error' in res)) {\n                _context75.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n            case 7:\n              return _context75.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context75.stop();\n          }\n        }, _callee75, this);\n      }));\n      function getBlocks(_x111, _x112, _x113) {\n        return _getBlocks.apply(this, arguments);\n      }\n      return getBlocks;\n    }()\n    /**\n     * Fetch a list of Signatures from the cluster for a block, excluding rewards\n     */\n  }, {\n    key: \"getBlockSignatures\",\n    value: function () {\n      var _getBlockSignatures = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee76(slot, commitment) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime().wrap(function _callee76$(_context76) {\n          while (1) switch (_context76.prev = _context76.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n                transactionDetails: 'signatures',\n                rewards: false\n              });\n              _context76.next = 3;\n              return this._rpcRequest('getBlock', args);\n            case 3:\n              unsafeRes = _context76.sent;\n              res = create(unsafeRes, GetBlockSignaturesRpcResult);\n              if (!('error' in res)) {\n                _context76.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get block');\n            case 7:\n              result = res.result;\n              if (result) {\n                _context76.next = 10;\n                break;\n              }\n              throw new Error('Block ' + slot + ' not found');\n            case 10:\n              return _context76.abrupt(\"return\", result);\n            case 11:\n            case \"end\":\n              return _context76.stop();\n          }\n        }, _callee76, this);\n      }));\n      function getBlockSignatures(_x114, _x115) {\n        return _getBlockSignatures.apply(this, arguments);\n      }\n      return getBlockSignatures;\n    }()\n    /**\n     * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n     */\n  }, {\n    key: \"getConfirmedBlockSignatures\",\n    value: function () {\n      var _getConfirmedBlockSignatures = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee77(slot, commitment) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime().wrap(function _callee77$(_context77) {\n          while (1) switch (_context77.prev = _context77.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n                transactionDetails: 'signatures',\n                rewards: false\n              });\n              _context77.next = 3;\n              return this._rpcRequest('getConfirmedBlock', args);\n            case 3:\n              unsafeRes = _context77.sent;\n              res = create(unsafeRes, GetBlockSignaturesRpcResult);\n              if (!('error' in res)) {\n                _context77.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n            case 7:\n              result = res.result;\n              if (result) {\n                _context77.next = 10;\n                break;\n              }\n              throw new Error('Confirmed block ' + slot + ' not found');\n            case 10:\n              return _context77.abrupt(\"return\", result);\n            case 11:\n            case \"end\":\n              return _context77.stop();\n          }\n        }, _callee77, this);\n      }));\n      function getConfirmedBlockSignatures(_x116, _x117) {\n        return _getConfirmedBlockSignatures.apply(this, arguments);\n      }\n      return getConfirmedBlockSignatures;\n    }()\n    /**\n     * Fetch a transaction details for a confirmed transaction\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n     */\n  }, {\n    key: \"getConfirmedTransaction\",\n    value: function () {\n      var _getConfirmedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee78(signature, commitment) {\n        var args, unsafeRes, res, result, message, signatures;\n        return _regeneratorRuntime().wrap(function _callee78$(_context78) {\n          while (1) switch (_context78.prev = _context78.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([signature], commitment);\n              _context78.next = 3;\n              return this._rpcRequest('getConfirmedTransaction', args);\n            case 3:\n              unsafeRes = _context78.sent;\n              res = create(unsafeRes, GetTransactionRpcResult);\n              if (!('error' in res)) {\n                _context78.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n            case 7:\n              result = res.result;\n              if (result) {\n                _context78.next = 10;\n                break;\n              }\n              return _context78.abrupt(\"return\", result);\n            case 10:\n              message = new Message(result.transaction.message);\n              signatures = result.transaction.signatures;\n              return _context78.abrupt(\"return\", _objectSpread(_objectSpread({}, result), {}, {\n                transaction: Transaction.populate(message, signatures)\n              }));\n            case 13:\n            case \"end\":\n              return _context78.stop();\n          }\n        }, _callee78, this);\n      }));\n      function getConfirmedTransaction(_x118, _x119) {\n        return _getConfirmedTransaction.apply(this, arguments);\n      }\n      return getConfirmedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a confirmed transaction\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n     */\n  }, {\n    key: \"getParsedConfirmedTransaction\",\n    value: function () {\n      var _getParsedConfirmedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee79(signature, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee79$(_context79) {\n          while (1) switch (_context79.prev = _context79.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n              _context79.next = 3;\n              return this._rpcRequest('getConfirmedTransaction', args);\n            case 3:\n              unsafeRes = _context79.sent;\n              res = create(unsafeRes, GetParsedTransactionRpcResult);\n              if (!('error' in res)) {\n                _context79.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n            case 7:\n              return _context79.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context79.stop();\n          }\n        }, _callee79, this);\n      }));\n      function getParsedConfirmedTransaction(_x120, _x121) {\n        return _getParsedConfirmedTransaction.apply(this, arguments);\n      }\n      return getParsedConfirmedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a batch of confirmed transactions\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n     */\n  }, {\n    key: \"getParsedConfirmedTransactions\",\n    value: function () {\n      var _getParsedConfirmedTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee80(signatures, commitment) {\n        var _this22 = this;\n        var batch, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee80$(_context80) {\n          while (1) switch (_context80.prev = _context80.next) {\n            case 0:\n              batch = signatures.map(function (signature) {\n                var args = _this22._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n                return {\n                  methodName: 'getConfirmedTransaction',\n                  args: args\n                };\n              });\n              _context80.next = 3;\n              return this._rpcBatchRequest(batch);\n            case 3:\n              unsafeRes = _context80.sent;\n              res = unsafeRes.map(function (unsafeRes) {\n                var res = create(unsafeRes, GetParsedTransactionRpcResult);\n                if ('error' in res) {\n                  throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n                }\n                return res.result;\n              });\n              return _context80.abrupt(\"return\", res);\n            case 6:\n            case \"end\":\n              return _context80.stop();\n          }\n        }, _callee80, this);\n      }));\n      function getParsedConfirmedTransactions(_x122, _x123) {\n        return _getParsedConfirmedTransactions.apply(this, arguments);\n      }\n      return getParsedConfirmedTransactions;\n    }()\n    /**\n     * Fetch a list of all the confirmed signatures for transactions involving an address\n     * within a specified slot range. Max range allowed is 10,000 slots.\n     *\n     * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n     *\n     * @param address queried address\n     * @param startSlot start slot, inclusive\n     * @param endSlot end slot, inclusive\n     */\n  }, {\n    key: \"getConfirmedSignaturesForAddress\",\n    value: function () {\n      var _getConfirmedSignaturesForAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee81(address, startSlot, endSlot) {\n        var options, firstAvailableBlock, block, highestConfirmedRoot, _block, confirmedSignatureInfo;\n        return _regeneratorRuntime().wrap(function _callee81$(_context81) {\n          while (1) switch (_context81.prev = _context81.next) {\n            case 0:\n              options = {};\n              _context81.next = 3;\n              return this.getFirstAvailableBlock();\n            case 3:\n              firstAvailableBlock = _context81.sent;\n            case 4:\n              if ('until' in options) {\n                _context81.next = 24;\n                break;\n              }\n              startSlot--;\n              if (!(startSlot <= 0 || startSlot < firstAvailableBlock)) {\n                _context81.next = 8;\n                break;\n              }\n              return _context81.abrupt(\"break\", 24);\n            case 8:\n              _context81.prev = 8;\n              _context81.next = 11;\n              return this.getConfirmedBlockSignatures(startSlot, 'finalized');\n            case 11:\n              block = _context81.sent;\n              if (block.signatures.length > 0) {\n                options.until = block.signatures[block.signatures.length - 1].toString();\n              }\n              _context81.next = 22;\n              break;\n            case 15:\n              _context81.prev = 15;\n              _context81.t0 = _context81[\"catch\"](8);\n              if (!(_context81.t0 instanceof Error && _context81.t0.message.includes('skipped'))) {\n                _context81.next = 21;\n                break;\n              }\n              return _context81.abrupt(\"continue\", 4);\n            case 21:\n              throw _context81.t0;\n            case 22:\n              _context81.next = 4;\n              break;\n            case 24:\n              _context81.next = 26;\n              return this.getSlot('finalized');\n            case 26:\n              highestConfirmedRoot = _context81.sent;\n            case 27:\n              if ('before' in options) {\n                _context81.next = 47;\n                break;\n              }\n              endSlot++;\n              if (!(endSlot > highestConfirmedRoot)) {\n                _context81.next = 31;\n                break;\n              }\n              return _context81.abrupt(\"break\", 47);\n            case 31:\n              _context81.prev = 31;\n              _context81.next = 34;\n              return this.getConfirmedBlockSignatures(endSlot);\n            case 34:\n              _block = _context81.sent;\n              if (_block.signatures.length > 0) {\n                options.before = _block.signatures[_block.signatures.length - 1].toString();\n              }\n              _context81.next = 45;\n              break;\n            case 38:\n              _context81.prev = 38;\n              _context81.t1 = _context81[\"catch\"](31);\n              if (!(_context81.t1 instanceof Error && _context81.t1.message.includes('skipped'))) {\n                _context81.next = 44;\n                break;\n              }\n              return _context81.abrupt(\"continue\", 27);\n            case 44:\n              throw _context81.t1;\n            case 45:\n              _context81.next = 27;\n              break;\n            case 47:\n              _context81.next = 49;\n              return this.getConfirmedSignaturesForAddress2(address, options);\n            case 49:\n              confirmedSignatureInfo = _context81.sent;\n              return _context81.abrupt(\"return\", confirmedSignatureInfo.map(function (info) {\n                return info.signature;\n              }));\n            case 51:\n            case \"end\":\n              return _context81.stop();\n          }\n        }, _callee81, this, [[8, 15], [31, 38]]);\n      }));\n      function getConfirmedSignaturesForAddress(_x124, _x125, _x126) {\n        return _getConfirmedSignaturesForAddress.apply(this, arguments);\n      }\n      return getConfirmedSignaturesForAddress;\n    }()\n    /**\n     * Returns confirmed signatures for transactions involving an\n     * address backwards in time from the provided signature or most recent confirmed block\n     *\n     *\n     * @param address queried address\n     * @param options\n     */\n  }, {\n    key: \"getConfirmedSignaturesForAddress2\",\n    value: function () {\n      var _getConfirmedSignaturesForAddress2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee82(address, options, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee82$(_context82) {\n          while (1) switch (_context82.prev = _context82.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n              _context82.next = 3;\n              return this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n            case 3:\n              unsafeRes = _context82.sent;\n              res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n              if (!('error' in res)) {\n                _context82.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n            case 7:\n              return _context82.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context82.stop();\n          }\n        }, _callee82, this);\n      }));\n      function getConfirmedSignaturesForAddress2(_x127, _x128, _x129) {\n        return _getConfirmedSignaturesForAddress2.apply(this, arguments);\n      }\n      return getConfirmedSignaturesForAddress2;\n    }()\n    /**\n     * Returns confirmed signatures for transactions involving an\n     * address backwards in time from the provided signature or most recent confirmed block\n     *\n     *\n     * @param address queried address\n     * @param options\n     */\n  }, {\n    key: \"getSignaturesForAddress\",\n    value: function () {\n      var _getSignaturesForAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee83(address, options, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee83$(_context83) {\n          while (1) switch (_context83.prev = _context83.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n              _context83.next = 3;\n              return this._rpcRequest('getSignaturesForAddress', args);\n            case 3:\n              unsafeRes = _context83.sent;\n              res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n              if (!('error' in res)) {\n                _context83.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n            case 7:\n              return _context83.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context83.stop();\n          }\n        }, _callee83, this);\n      }));\n      function getSignaturesForAddress(_x130, _x131, _x132) {\n        return _getSignaturesForAddress.apply(this, arguments);\n      }\n      return getSignaturesForAddress;\n    }()\n  }, {\n    key: \"getAddressLookupTable\",\n    value: function () {\n      var _getAddressLookupTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee84(accountKey, config) {\n        var _yield$this$getAccoun, context, accountInfo, value;\n        return _regeneratorRuntime().wrap(function _callee84$(_context84) {\n          while (1) switch (_context84.prev = _context84.next) {\n            case 0:\n              _context84.next = 2;\n              return this.getAccountInfoAndContext(accountKey, config);\n            case 2:\n              _yield$this$getAccoun = _context84.sent;\n              context = _yield$this$getAccoun.context;\n              accountInfo = _yield$this$getAccoun.value;\n              value = null;\n              if (accountInfo !== null) {\n                value = new AddressLookupTableAccount({\n                  key: accountKey,\n                  state: AddressLookupTableAccount.deserialize(accountInfo.data)\n                });\n              }\n              return _context84.abrupt(\"return\", {\n                context: context,\n                value: value\n              });\n            case 8:\n            case \"end\":\n              return _context84.stop();\n          }\n        }, _callee84, this);\n      }));\n      function getAddressLookupTable(_x133, _x134) {\n        return _getAddressLookupTable.apply(this, arguments);\n      }\n      return getAddressLookupTable;\n    }()\n    /**\n     * Fetch the contents of a Nonce account from the cluster, return with context\n     */\n  }, {\n    key: \"getNonceAndContext\",\n    value: function () {\n      var _getNonceAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee85(nonceAccount, commitmentOrConfig) {\n        var _yield$this$getAccoun2, context, accountInfo, value;\n        return _regeneratorRuntime().wrap(function _callee85$(_context85) {\n          while (1) switch (_context85.prev = _context85.next) {\n            case 0:\n              _context85.next = 2;\n              return this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n            case 2:\n              _yield$this$getAccoun2 = _context85.sent;\n              context = _yield$this$getAccoun2.context;\n              accountInfo = _yield$this$getAccoun2.value;\n              value = null;\n              if (accountInfo !== null) {\n                value = NonceAccount.fromAccountData(accountInfo.data);\n              }\n              return _context85.abrupt(\"return\", {\n                context: context,\n                value: value\n              });\n            case 8:\n            case \"end\":\n              return _context85.stop();\n          }\n        }, _callee85, this);\n      }));\n      function getNonceAndContext(_x135, _x136) {\n        return _getNonceAndContext.apply(this, arguments);\n      }\n      return getNonceAndContext;\n    }()\n    /**\n     * Fetch the contents of a Nonce account from the cluster\n     */\n  }, {\n    key: \"getNonce\",\n    value: function () {\n      var _getNonce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee86(nonceAccount, commitmentOrConfig) {\n        return _regeneratorRuntime().wrap(function _callee86$(_context86) {\n          while (1) switch (_context86.prev = _context86.next) {\n            case 0:\n              _context86.next = 2;\n              return this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(function (x) {\n                return x.value;\n              }).catch(function (e) {\n                throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n              });\n            case 2:\n              return _context86.abrupt(\"return\", _context86.sent);\n            case 3:\n            case \"end\":\n              return _context86.stop();\n          }\n        }, _callee86, this);\n      }));\n      function getNonce(_x137, _x138) {\n        return _getNonce.apply(this, arguments);\n      }\n      return getNonce;\n    }()\n    /**\n     * Request an allocation of lamports to the specified address\n     *\n     * ```typescript\n     * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n     *\n     * (async () => {\n     *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n     *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n     *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n     *   await connection.confirmTransaction(signature);\n     * })();\n     * ```\n     */\n  }, {\n    key: \"requestAirdrop\",\n    value: function () {\n      var _requestAirdrop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee87(to, lamports) {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee87$(_context87) {\n          while (1) switch (_context87.prev = _context87.next) {\n            case 0:\n              _context87.next = 2;\n              return this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n            case 2:\n              unsafeRes = _context87.sent;\n              res = create(unsafeRes, RequestAirdropRpcResult);\n              if (!('error' in res)) {\n                _context87.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"airdrop to \".concat(to.toBase58(), \" failed\"));\n            case 6:\n              return _context87.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context87.stop();\n          }\n        }, _callee87, this);\n      }));\n      function requestAirdrop(_x139, _x140) {\n        return _requestAirdrop.apply(this, arguments);\n      }\n      return requestAirdrop;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_blockhashWithExpiryBlockHeight\",\n    value: function () {\n      var _blockhashWithExpiryBlockHeight2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee88(disableCache) {\n        var timeSinceFetch, expired;\n        return _regeneratorRuntime().wrap(function _callee88$(_context88) {\n          while (1) switch (_context88.prev = _context88.next) {\n            case 0:\n              if (disableCache) {\n                _context88.next = 10;\n                break;\n              }\n            case 1:\n              if (!this._pollingBlockhash) {\n                _context88.next = 6;\n                break;\n              }\n              _context88.next = 4;\n              return sleep(100);\n            case 4:\n              _context88.next = 1;\n              break;\n            case 6:\n              timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n              expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n              if (!(this._blockhashInfo.latestBlockhash !== null && !expired)) {\n                _context88.next = 10;\n                break;\n              }\n              return _context88.abrupt(\"return\", this._blockhashInfo.latestBlockhash);\n            case 10:\n              _context88.next = 12;\n              return this._pollNewBlockhash();\n            case 12:\n              return _context88.abrupt(\"return\", _context88.sent);\n            case 13:\n            case \"end\":\n              return _context88.stop();\n          }\n        }, _callee88, this);\n      }));\n      function _blockhashWithExpiryBlockHeight(_x141) {\n        return _blockhashWithExpiryBlockHeight2.apply(this, arguments);\n      }\n      return _blockhashWithExpiryBlockHeight;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_pollNewBlockhash\",\n    value: function () {\n      var _pollNewBlockhash2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee89() {\n        var startTime, cachedLatestBlockhash, cachedBlockhash, i, latestBlockhash;\n        return _regeneratorRuntime().wrap(function _callee89$(_context89) {\n          while (1) switch (_context89.prev = _context89.next) {\n            case 0:\n              this._pollingBlockhash = true;\n              _context89.prev = 1;\n              startTime = Date.now();\n              cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n              cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n              i = 0;\n            case 6:\n              if (!(i < 50)) {\n                _context89.next = 18;\n                break;\n              }\n              _context89.next = 9;\n              return this.getLatestBlockhash('finalized');\n            case 9:\n              latestBlockhash = _context89.sent;\n              if (!(cachedBlockhash !== latestBlockhash.blockhash)) {\n                _context89.next = 13;\n                break;\n              }\n              this._blockhashInfo = {\n                latestBlockhash: latestBlockhash,\n                lastFetch: Date.now(),\n                transactionSignatures: [],\n                simulatedSignatures: []\n              };\n              return _context89.abrupt(\"return\", latestBlockhash);\n            case 13:\n              _context89.next = 15;\n              return sleep(MS_PER_SLOT / 2);\n            case 15:\n              i++;\n              _context89.next = 6;\n              break;\n            case 18:\n              throw new Error(\"Unable to obtain a new blockhash after \".concat(Date.now() - startTime, \"ms\"));\n            case 19:\n              _context89.prev = 19;\n              this._pollingBlockhash = false;\n              return _context89.finish(19);\n            case 22:\n            case \"end\":\n              return _context89.stop();\n          }\n        }, _callee89, this, [[1,, 19, 22]]);\n      }));\n      function _pollNewBlockhash() {\n        return _pollNewBlockhash2.apply(this, arguments);\n      }\n      return _pollNewBlockhash;\n    }()\n    /**\n     * get the stake minimum delegation\n     */\n  }, {\n    key: \"getStakeMinimumDelegation\",\n    value: function () {\n      var _getStakeMinimumDelegation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee90(config) {\n        var _extractCommitmentFro24, commitment, configArg, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee90$(_context90) {\n          while (1) switch (_context90.prev = _context90.next) {\n            case 0:\n              _extractCommitmentFro24 = extractCommitmentFromConfig(config), commitment = _extractCommitmentFro24.commitment, configArg = _extractCommitmentFro24.config;\n              args = this._buildArgs([], commitment, 'base64', configArg);\n              _context90.next = 4;\n              return this._rpcRequest('getStakeMinimumDelegation', args);\n            case 4:\n              unsafeRes = _context90.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(number()));\n              if (!('error' in res)) {\n                _context90.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get stake minimum delegation\");\n            case 8:\n              return _context90.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context90.stop();\n          }\n        }, _callee90, this);\n      }));\n      function getStakeMinimumDelegation(_x142) {\n        return _getStakeMinimumDelegation.apply(this, arguments);\n      }\n      return getStakeMinimumDelegation;\n    }()\n    /**\n     * Simulate a transaction\n     *\n     * @deprecated Instead, call {@link simulateTransaction} with {@link\n     * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n     */\n    /**\n     * Simulate a transaction\n     */\n    // eslint-disable-next-line no-dupe-class-members\n    /**\n     * Simulate a transaction\n     */\n    // eslint-disable-next-line no-dupe-class-members\n  }, {\n    key: \"simulateTransaction\",\n    value: function () {\n      var _simulateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee91(transactionOrMessage, configOrSigners, includeAccounts) {\n        var versionedTx, _wireTransaction, _encodedTransaction, _config, _args92, _unsafeRes, _res5, transaction, originalTx, signers, _transaction3, disableCache, _transaction4, latestBlockhash, _signature3, message, signData, wireTransaction, encodedTransaction, config, addresses, args, unsafeRes, res, logs, traceIndent, logTrace;\n        return _regeneratorRuntime().wrap(function _callee91$(_context91) {\n          while (1) switch (_context91.prev = _context91.next) {\n            case 0:\n              if (!('message' in transactionOrMessage)) {\n                _context91.next = 17;\n                break;\n              }\n              versionedTx = transactionOrMessage;\n              _wireTransaction = versionedTx.serialize();\n              _encodedTransaction = Buffer.from(_wireTransaction).toString('base64');\n              if (!(Array.isArray(configOrSigners) || includeAccounts !== undefined)) {\n                _context91.next = 6;\n                break;\n              }\n              throw new Error('Invalid arguments');\n            case 6:\n              _config = configOrSigners || {};\n              _config.encoding = 'base64';\n              if (!('commitment' in _config)) {\n                _config.commitment = this.commitment;\n              }\n              _args92 = [_encodedTransaction, _config];\n              _context91.next = 12;\n              return this._rpcRequest('simulateTransaction', _args92);\n            case 12:\n              _unsafeRes = _context91.sent;\n              _res5 = create(_unsafeRes, SimulatedTransactionResponseStruct);\n              if (!('error' in _res5)) {\n                _context91.next = 16;\n                break;\n              }\n              throw new Error('failed to simulate transaction: ' + _res5.error.message);\n            case 16:\n              return _context91.abrupt(\"return\", _res5.result);\n            case 17:\n              if (transactionOrMessage instanceof Transaction) {\n                originalTx = transactionOrMessage;\n                transaction = new Transaction();\n                transaction.feePayer = originalTx.feePayer;\n                transaction.instructions = transactionOrMessage.instructions;\n                transaction.nonceInfo = originalTx.nonceInfo;\n                transaction.signatures = originalTx.signatures;\n              } else {\n                transaction = Transaction.populate(transactionOrMessage);\n                // HACK: this function relies on mutating the populated transaction\n                transaction._message = transaction._json = undefined;\n              }\n              if (!(configOrSigners !== undefined && !Array.isArray(configOrSigners))) {\n                _context91.next = 20;\n                break;\n              }\n              throw new Error('Invalid arguments');\n            case 20:\n              signers = configOrSigners;\n              if (!(transaction.nonceInfo && signers)) {\n                _context91.next = 25;\n                break;\n              }\n              (_transaction3 = transaction).sign.apply(_transaction3, _toConsumableArray(signers));\n              _context91.next = 45;\n              break;\n            case 25:\n              disableCache = this._disableBlockhashCaching;\n            case 26:\n              _context91.next = 28;\n              return this._blockhashWithExpiryBlockHeight(disableCache);\n            case 28:\n              latestBlockhash = _context91.sent;\n              transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n              transaction.recentBlockhash = latestBlockhash.blockhash;\n              if (signers) {\n                _context91.next = 33;\n                break;\n              }\n              return _context91.abrupt(\"break\", 45);\n            case 33:\n              (_transaction4 = transaction).sign.apply(_transaction4, _toConsumableArray(signers));\n              if (transaction.signature) {\n                _context91.next = 36;\n                break;\n              }\n              throw new Error('!signature');\n            case 36:\n              _signature3 = transaction.signature.toString('base64');\n              if (!(!this._blockhashInfo.simulatedSignatures.includes(_signature3) && !this._blockhashInfo.transactionSignatures.includes(_signature3))) {\n                _context91.next = 42;\n                break;\n              }\n              // The signature of this transaction has not been seen before with the\n              // current recentBlockhash, all done. Let's break\n              this._blockhashInfo.simulatedSignatures.push(_signature3);\n              return _context91.abrupt(\"break\", 45);\n            case 42:\n              // This transaction would be treated as duplicate (its derived signature\n              // matched to one of already recorded signatures).\n              // So, we must fetch a new blockhash for a different signature by disabling\n              // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n              disableCache = true;\n            case 43:\n              _context91.next = 26;\n              break;\n            case 45:\n              message = transaction._compile();\n              signData = message.serialize();\n              wireTransaction = transaction._serialize(signData);\n              encodedTransaction = wireTransaction.toString('base64');\n              config = {\n                encoding: 'base64',\n                commitment: this.commitment\n              };\n              if (includeAccounts) {\n                addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(function (key) {\n                  return key.toBase58();\n                });\n                config['accounts'] = {\n                  encoding: 'base64',\n                  addresses: addresses\n                };\n              }\n              if (signers) {\n                config.sigVerify = true;\n              }\n              args = [encodedTransaction, config];\n              _context91.next = 55;\n              return this._rpcRequest('simulateTransaction', args);\n            case 55:\n              unsafeRes = _context91.sent;\n              res = create(unsafeRes, SimulatedTransactionResponseStruct);\n              if (!('error' in res)) {\n                _context91.next = 60;\n                break;\n              }\n              if ('data' in res.error) {\n                logs = res.error.data.logs;\n                if (logs && Array.isArray(logs)) {\n                  traceIndent = '\\n    ';\n                  logTrace = traceIndent + logs.join(traceIndent);\n                  console.error(res.error.message, logTrace);\n                }\n              }\n              throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n            case 60:\n              return _context91.abrupt(\"return\", res.result);\n            case 61:\n            case \"end\":\n              return _context91.stop();\n          }\n        }, _callee91, this);\n      }));\n      function simulateTransaction(_x143, _x144, _x145) {\n        return _simulateTransaction.apply(this, arguments);\n      }\n      return simulateTransaction;\n    }()\n    /**\n     * Sign and send a transaction\n     *\n     * @deprecated Instead, call {@link sendTransaction} with a {@link\n     * VersionedTransaction}\n     */\n    /**\n     * Send a signed transaction\n     */\n    // eslint-disable-next-line no-dupe-class-members\n    /**\n     * Sign and send a transaction\n     */\n    // eslint-disable-next-line no-dupe-class-members\n  }, {\n    key: \"sendTransaction\",\n    value: function () {\n      var _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee92(transaction, signersOrOptions, options) {\n        var _wireTransaction2, signers, disableCache, latestBlockhash, _signature4, wireTransaction;\n        return _regeneratorRuntime().wrap(function _callee92$(_context92) {\n          while (1) switch (_context92.prev = _context92.next) {\n            case 0:\n              if (!('version' in transaction)) {\n                _context92.next = 7;\n                break;\n              }\n              if (!(signersOrOptions && Array.isArray(signersOrOptions))) {\n                _context92.next = 3;\n                break;\n              }\n              throw new Error('Invalid arguments');\n            case 3:\n              _wireTransaction2 = transaction.serialize();\n              _context92.next = 6;\n              return this.sendRawTransaction(_wireTransaction2, signersOrOptions);\n            case 6:\n              return _context92.abrupt(\"return\", _context92.sent);\n            case 7:\n              if (!(signersOrOptions === undefined || !Array.isArray(signersOrOptions))) {\n                _context92.next = 9;\n                break;\n              }\n              throw new Error('Invalid arguments');\n            case 9:\n              signers = signersOrOptions;\n              if (!transaction.nonceInfo) {\n                _context92.next = 14;\n                break;\n              }\n              transaction.sign.apply(transaction, _toConsumableArray(signers));\n              _context92.next = 32;\n              break;\n            case 14:\n              disableCache = this._disableBlockhashCaching;\n            case 15:\n              _context92.next = 17;\n              return this._blockhashWithExpiryBlockHeight(disableCache);\n            case 17:\n              latestBlockhash = _context92.sent;\n              transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n              transaction.recentBlockhash = latestBlockhash.blockhash;\n              transaction.sign.apply(transaction, _toConsumableArray(signers));\n              if (transaction.signature) {\n                _context92.next = 23;\n                break;\n              }\n              throw new Error('!signature');\n            case 23:\n              _signature4 = transaction.signature.toString('base64');\n              if (this._blockhashInfo.transactionSignatures.includes(_signature4)) {\n                _context92.next = 29;\n                break;\n              }\n              // The signature of this transaction has not been seen before with the\n              // current recentBlockhash, all done. Let's break\n              this._blockhashInfo.transactionSignatures.push(_signature4);\n              return _context92.abrupt(\"break\", 32);\n            case 29:\n              // This transaction would be treated as duplicate (its derived signature\n              // matched to one of already recorded signatures).\n              // So, we must fetch a new blockhash for a different signature by disabling\n              // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n              disableCache = true;\n            case 30:\n              _context92.next = 15;\n              break;\n            case 32:\n              wireTransaction = transaction.serialize();\n              _context92.next = 35;\n              return this.sendRawTransaction(wireTransaction, options);\n            case 35:\n              return _context92.abrupt(\"return\", _context92.sent);\n            case 36:\n            case \"end\":\n              return _context92.stop();\n          }\n        }, _callee92, this);\n      }));\n      function sendTransaction(_x146, _x147, _x148) {\n        return _sendTransaction.apply(this, arguments);\n      }\n      return sendTransaction;\n    }()\n    /**\n     * Send a transaction that has already been signed and serialized into the\n     * wire format\n     */\n  }, {\n    key: \"sendRawTransaction\",\n    value: function () {\n      var _sendRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee93(rawTransaction, options) {\n        var encodedTransaction, result;\n        return _regeneratorRuntime().wrap(function _callee93$(_context93) {\n          while (1) switch (_context93.prev = _context93.next) {\n            case 0:\n              encodedTransaction = toBuffer(rawTransaction).toString('base64');\n              _context93.next = 3;\n              return this.sendEncodedTransaction(encodedTransaction, options);\n            case 3:\n              result = _context93.sent;\n              return _context93.abrupt(\"return\", result);\n            case 5:\n            case \"end\":\n              return _context93.stop();\n          }\n        }, _callee93, this);\n      }));\n      function sendRawTransaction(_x149, _x150) {\n        return _sendRawTransaction.apply(this, arguments);\n      }\n      return sendRawTransaction;\n    }()\n    /**\n     * Send a transaction that has already been signed, serialized into the\n     * wire format, and encoded as a base64 string\n     */\n  }, {\n    key: \"sendEncodedTransaction\",\n    value: function () {\n      var _sendEncodedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee94(encodedTransaction, options) {\n        var config, skipPreflight, preflightCommitment, args, unsafeRes, res, logs;\n        return _regeneratorRuntime().wrap(function _callee94$(_context94) {\n          while (1) switch (_context94.prev = _context94.next) {\n            case 0:\n              config = {\n                encoding: 'base64'\n              };\n              skipPreflight = options && options.skipPreflight;\n              preflightCommitment = options && options.preflightCommitment || this.commitment;\n              if (options && options.maxRetries != null) {\n                config.maxRetries = options.maxRetries;\n              }\n              if (options && options.minContextSlot != null) {\n                config.minContextSlot = options.minContextSlot;\n              }\n              if (skipPreflight) {\n                config.skipPreflight = skipPreflight;\n              }\n              if (preflightCommitment) {\n                config.preflightCommitment = preflightCommitment;\n              }\n              args = [encodedTransaction, config];\n              _context94.next = 10;\n              return this._rpcRequest('sendTransaction', args);\n            case 10:\n              unsafeRes = _context94.sent;\n              res = create(unsafeRes, SendTransactionRpcResult);\n              if (!('error' in res)) {\n                _context94.next = 15;\n                break;\n              }\n              if ('data' in res.error) {\n                logs = res.error.data.logs;\n              }\n              throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n            case 15:\n              return _context94.abrupt(\"return\", res.result);\n            case 16:\n            case \"end\":\n              return _context94.stop();\n          }\n        }, _callee94, this);\n      }));\n      function sendEncodedTransaction(_x151, _x152) {\n        return _sendEncodedTransaction.apply(this, arguments);\n      }\n      return sendEncodedTransaction;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnOpen\",\n    value: function _wsOnOpen() {\n      var _this23 = this;\n      this._rpcWebSocketConnected = true;\n      this._rpcWebSocketHeartbeat = setInterval(function () {\n        // Ping server every 5s to prevent idle timeouts\n        _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee95() {\n          return _regeneratorRuntime().wrap(function _callee95$(_context95) {\n            while (1) switch (_context95.prev = _context95.next) {\n              case 0:\n                _context95.prev = 0;\n                _context95.next = 3;\n                return _this23._rpcWebSocket.notify('ping');\n              case 3:\n                _context95.next = 7;\n                break;\n              case 5:\n                _context95.prev = 5;\n                _context95.t0 = _context95[\"catch\"](0);\n              case 7:\n              case \"end\":\n                return _context95.stop();\n            }\n          }, _callee95, null, [[0, 5]]);\n        }))();\n      }, 5000);\n      this._updateSubscriptions();\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnError\",\n    value: function _wsOnError(err) {\n      this._rpcWebSocketConnected = false;\n      console.error('ws error:', err.message);\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnClose\",\n    value: function _wsOnClose(code) {\n      var _this24 = this;\n      this._rpcWebSocketConnected = false;\n      this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n      if (this._rpcWebSocketIdleTimeout) {\n        clearTimeout(this._rpcWebSocketIdleTimeout);\n        this._rpcWebSocketIdleTimeout = null;\n      }\n      if (this._rpcWebSocketHeartbeat) {\n        clearInterval(this._rpcWebSocketHeartbeat);\n        this._rpcWebSocketHeartbeat = null;\n      }\n      if (code === 1000) {\n        // explicit close, check if any subscriptions have been made since close\n        this._updateSubscriptions();\n        return;\n      }\n\n      // implicit close, prepare subscriptions for auto-reconnect\n      this._subscriptionCallbacksByServerSubscriptionId = {};\n      Object.entries(this._subscriptionsByHash).forEach(function (_ref40) {\n        var _ref41 = _slicedToArray(_ref40, 2),\n          hash = _ref41[0],\n          subscription = _ref41[1];\n        _this24._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n          state: 'pending'\n        }));\n      });\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_setSubscription\",\n    value: function _setSubscription(hash, nextSubscription) {\n      var _this$_subscriptionsB;\n      var prevState = (_this$_subscriptionsB = this._subscriptionsByHash[hash]) === null || _this$_subscriptionsB === void 0 ? void 0 : _this$_subscriptionsB.state;\n      this._subscriptionsByHash[hash] = nextSubscription;\n      if (prevState !== nextSubscription.state) {\n        var stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n        if (stateChangeCallbacks) {\n          stateChangeCallbacks.forEach(function (cb) {\n            try {\n              cb(nextSubscription.state);\n              // eslint-disable-next-line no-empty\n            } catch (_unused4) {}\n          });\n        }\n      }\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_onSubscriptionStateChange\",\n    value: function _onSubscriptionStateChange(clientSubscriptionId, callback) {\n      var _this$_subscriptionSt,\n        _this25 = this;\n      var hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      if (hash == null) {\n        return function () {};\n      }\n      var stateChangeCallbacks = (_this$_subscriptionSt = this._subscriptionStateChangeCallbacksByHash)[hash] || (_this$_subscriptionSt[hash] = new Set());\n      stateChangeCallbacks.add(callback);\n      return function () {\n        stateChangeCallbacks.delete(callback);\n        if (stateChangeCallbacks.size === 0) {\n          delete _this25._subscriptionStateChangeCallbacksByHash[hash];\n        }\n      };\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_updateSubscriptions\",\n    value: function () {\n      var _updateSubscriptions2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee99() {\n        var _this26 = this;\n        var activeWebSocketGeneration, isCurrentConnectionStillActive;\n        return _regeneratorRuntime().wrap(function _callee99$(_context99) {\n          while (1) switch (_context99.prev = _context99.next) {\n            case 0:\n              if (!(Object.keys(this._subscriptionsByHash).length === 0)) {\n                _context99.next = 3;\n                break;\n              }\n              if (this._rpcWebSocketConnected) {\n                this._rpcWebSocketConnected = false;\n                this._rpcWebSocketIdleTimeout = setTimeout(function () {\n                  _this26._rpcWebSocketIdleTimeout = null;\n                  try {\n                    _this26._rpcWebSocket.close();\n                  } catch (err) {\n                    // swallow error if socket has already been closed.\n                    if (err instanceof Error) {\n                      console.log(\"Error when closing socket connection: \".concat(err.message));\n                    }\n                  }\n                }, 500);\n              }\n              return _context99.abrupt(\"return\");\n            case 3:\n              if (this._rpcWebSocketIdleTimeout !== null) {\n                clearTimeout(this._rpcWebSocketIdleTimeout);\n                this._rpcWebSocketIdleTimeout = null;\n                this._rpcWebSocketConnected = true;\n              }\n              if (this._rpcWebSocketConnected) {\n                _context99.next = 7;\n                break;\n              }\n              this._rpcWebSocket.connect();\n              return _context99.abrupt(\"return\");\n            case 7:\n              activeWebSocketGeneration = this._rpcWebSocketGeneration;\n              isCurrentConnectionStillActive = function isCurrentConnectionStillActive() {\n                return activeWebSocketGeneration === _this26._rpcWebSocketGeneration;\n              };\n              _context99.next = 11;\n              return Promise.all(\n              // Don't be tempted to change this to `Object.entries`. We call\n              // `_updateSubscriptions` recursively when processing the state,\n              // so it's important that we look up the *current* version of\n              // each subscription, every time we process a hash.\n              Object.keys(this._subscriptionsByHash).map( /*#__PURE__*/function () {\n                var _ref42 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee98(hash) {\n                  var subscription;\n                  return _regeneratorRuntime().wrap(function _callee98$(_context98) {\n                    while (1) switch (_context98.prev = _context98.next) {\n                      case 0:\n                        subscription = _this26._subscriptionsByHash[hash];\n                        if (!(subscription === undefined)) {\n                          _context98.next = 3;\n                          break;\n                        }\n                        return _context98.abrupt(\"return\");\n                      case 3:\n                        _context98.t0 = subscription.state;\n                        _context98.next = _context98.t0 === 'pending' ? 6 : _context98.t0 === 'unsubscribed' ? 6 : _context98.t0 === 'subscribed' ? 15 : 19;\n                        break;\n                      case 6:\n                        if (!(subscription.callbacks.size === 0)) {\n                          _context98.next = 12;\n                          break;\n                        }\n                        /**\n                         * You can end up here when:\n                         *\n                         * - a subscription has recently unsubscribed\n                         *   without having new callbacks added to it\n                         *   while the unsubscribe was in flight, or\n                         * - when a pending subscription has its\n                         *   listeners removed before a request was\n                         *   sent to the server.\n                         *\n                         * Being that nobody is interested in this\n                         * subscription any longer, delete it.\n                         */\n                        delete _this26._subscriptionsByHash[hash];\n                        if (subscription.state === 'unsubscribed') {\n                          delete _this26._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n                        }\n                        _context98.next = 11;\n                        return _this26._updateSubscriptions();\n                      case 11:\n                        return _context98.abrupt(\"return\");\n                      case 12:\n                        _context98.next = 14;\n                        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee96() {\n                          var args, method, serverSubscriptionId;\n                          return _regeneratorRuntime().wrap(function _callee96$(_context96) {\n                            while (1) switch (_context96.prev = _context96.next) {\n                              case 0:\n                                args = subscription.args, method = subscription.method;\n                                _context96.prev = 1;\n                                _this26._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  state: 'subscribing'\n                                }));\n                                _context96.next = 5;\n                                return _this26._rpcWebSocket.call(method, args);\n                              case 5:\n                                serverSubscriptionId = _context96.sent;\n                                _this26._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  serverSubscriptionId: serverSubscriptionId,\n                                  state: 'subscribed'\n                                }));\n                                _this26._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n                                _context96.next = 10;\n                                return _this26._updateSubscriptions();\n                              case 10:\n                                _context96.next = 20;\n                                break;\n                              case 12:\n                                _context96.prev = 12;\n                                _context96.t0 = _context96[\"catch\"](1);\n                                if (_context96.t0 instanceof Error) {\n                                  console.error(\"\".concat(method, \" error for argument\"), args, _context96.t0.message);\n                                }\n                                if (isCurrentConnectionStillActive()) {\n                                  _context96.next = 17;\n                                  break;\n                                }\n                                return _context96.abrupt(\"return\");\n                              case 17:\n                                // TODO: Maybe add an 'errored' state or a retry limit?\n                                _this26._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  state: 'pending'\n                                }));\n                                _context96.next = 20;\n                                return _this26._updateSubscriptions();\n                              case 20:\n                              case \"end\":\n                                return _context96.stop();\n                            }\n                          }, _callee96, null, [[1, 12]]);\n                        }))();\n                      case 14:\n                        return _context98.abrupt(\"break\", 19);\n                      case 15:\n                        if (!(subscription.callbacks.size === 0)) {\n                          _context98.next = 18;\n                          break;\n                        }\n                        _context98.next = 18;\n                        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee97() {\n                          var serverSubscriptionId, unsubscribeMethod;\n                          return _regeneratorRuntime().wrap(function _callee97$(_context97) {\n                            while (1) switch (_context97.prev = _context97.next) {\n                              case 0:\n                                serverSubscriptionId = subscription.serverSubscriptionId, unsubscribeMethod = subscription.unsubscribeMethod;\n                                if (!_this26._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                                  _context97.next = 5;\n                                  break;\n                                }\n                                /**\n                                 * Special case.\n                                 * If we're dealing with a subscription that has been auto-\n                                 * disposed by the RPC, then we can skip the RPC call to\n                                 * tear down the subscription here.\n                                 *\n                                 * NOTE: There is a proposal to eliminate this special case, here:\n                                 * https://github.com/solana-labs/solana/issues/18892\n                                 */\n                                _this26._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n                                _context97.next = 21;\n                                break;\n                              case 5:\n                                _this26._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  state: 'unsubscribing'\n                                }));\n                                _this26._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  state: 'unsubscribing'\n                                }));\n                                _context97.prev = 7;\n                                _context97.next = 10;\n                                return _this26._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                              case 10:\n                                _context97.next = 21;\n                                break;\n                              case 12:\n                                _context97.prev = 12;\n                                _context97.t0 = _context97[\"catch\"](7);\n                                if (_context97.t0 instanceof Error) {\n                                  console.error(\"\".concat(unsubscribeMethod, \" error:\"), _context97.t0.message);\n                                }\n                                if (isCurrentConnectionStillActive()) {\n                                  _context97.next = 17;\n                                  break;\n                                }\n                                return _context97.abrupt(\"return\");\n                              case 17:\n                                // TODO: Maybe add an 'errored' state or a retry limit?\n                                _this26._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  state: 'subscribed'\n                                }));\n                                _context97.next = 20;\n                                return _this26._updateSubscriptions();\n                              case 20:\n                                return _context97.abrupt(\"return\");\n                              case 21:\n                                _this26._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  state: 'unsubscribed'\n                                }));\n                                _context97.next = 24;\n                                return _this26._updateSubscriptions();\n                              case 24:\n                              case \"end\":\n                                return _context97.stop();\n                            }\n                          }, _callee97, null, [[7, 12]]);\n                        }))();\n                      case 18:\n                        return _context98.abrupt(\"break\", 19);\n                      case 19:\n                      case \"end\":\n                        return _context98.stop();\n                    }\n                  }, _callee98);\n                }));\n                return function (_x153) {\n                  return _ref42.apply(this, arguments);\n                };\n              }()));\n            case 11:\n            case \"end\":\n              return _context99.stop();\n          }\n        }, _callee99, this);\n      }));\n      function _updateSubscriptions() {\n        return _updateSubscriptions2.apply(this, arguments);\n      }\n      return _updateSubscriptions;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_handleServerNotification\",\n    value: function _handleServerNotification(serverSubscriptionId, callbackArgs) {\n      var callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n      if (callbacks === undefined) {\n        return;\n      }\n      callbacks.forEach(function (cb) {\n        try {\n          cb.apply(void 0, _toConsumableArray(callbackArgs));\n        } catch (e) {\n          console.error(e);\n        }\n      });\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnAccountNotification\",\n    value: function _wsOnAccountNotification(notification) {\n      var _create = create(notification, AccountNotificationResult),\n        result = _create.result,\n        subscription = _create.subscription;\n      this._handleServerNotification(subscription, [result.value, result.context]);\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_makeSubscription\",\n    value: function _makeSubscription(subscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args) {\n      var _this27 = this;\n      var clientSubscriptionId = this._nextClientSubscriptionId++;\n      var hash = fastStableStringify$1([subscriptionConfig.method, args], true /* isArrayProp */);\n\n      var existingSubscription = this._subscriptionsByHash[hash];\n      if (existingSubscription === undefined) {\n        this._subscriptionsByHash[hash] = _objectSpread(_objectSpread({}, subscriptionConfig), {}, {\n          args: args,\n          callbacks: new Set([subscriptionConfig.callback]),\n          state: 'pending'\n        });\n      } else {\n        existingSubscription.callbacks.add(subscriptionConfig.callback);\n      }\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee100() {\n        var subscription;\n        return _regeneratorRuntime().wrap(function _callee100$(_context100) {\n          while (1) switch (_context100.prev = _context100.next) {\n            case 0:\n              delete _this27._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n              delete _this27._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n              subscription = _this27._subscriptionsByHash[hash];\n              assert(subscription !== undefined, \"Could not find a `Subscription` when tearing down client subscription #\".concat(clientSubscriptionId));\n              subscription.callbacks.delete(subscriptionConfig.callback);\n              _context100.next = 7;\n              return _this27._updateSubscriptions();\n            case 7:\n            case \"end\":\n              return _context100.stop();\n          }\n        }, _callee100);\n      }));\n      this._updateSubscriptions();\n      return clientSubscriptionId;\n    }\n\n    /**\n     * Register a callback to be invoked whenever the specified account changes\n     *\n     * @param publicKey Public key of the account to monitor\n     * @param callback Function to invoke whenever the account is changed\n     * @param commitment Specify the commitment level account changes must reach before notification\n     * @return subscription id\n     */\n  }, {\n    key: \"onAccountChange\",\n    value: function onAccountChange(publicKey, callback, commitment) {\n      var args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n      // Apply connection/server default.\n      'base64');\n      return this._makeSubscription({\n        callback: callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe'\n      }, args);\n    }\n\n    /**\n     * Deregister an account notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n  }, {\n    key: \"removeAccountChangeListener\",\n    value: function () {\n      var _removeAccountChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee101(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee101$(_context101) {\n          while (1) switch (_context101.prev = _context101.next) {\n            case 0:\n              _context101.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n            case 2:\n            case \"end\":\n              return _context101.stop();\n          }\n        }, _callee101, this);\n      }));\n      function removeAccountChangeListener(_x154) {\n        return _removeAccountChangeListener.apply(this, arguments);\n      }\n      return removeAccountChangeListener;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnProgramAccountNotification\",\n    value: function _wsOnProgramAccountNotification(notification) {\n      var _create2 = create(notification, ProgramAccountNotificationResult),\n        result = _create2.result,\n        subscription = _create2.subscription;\n      this._handleServerNotification(subscription, [{\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account\n      }, result.context]);\n    }\n\n    /**\n     * Register a callback to be invoked whenever accounts owned by the\n     * specified program change\n     *\n     * @param programId Public key of the program to monitor\n     * @param callback Function to invoke whenever the account is changed\n     * @param commitment Specify the commitment level account changes must reach before notification\n     * @param filters The program account filters to pass into the RPC method\n     * @return subscription id\n     */\n  }, {\n    key: \"onProgramAccountChange\",\n    value: function onProgramAccountChange(programId, callback, commitment, filters) {\n      var args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n      // Apply connection/server default.\n      'base64' /* encoding */, filters ? {\n        filters: filters\n      } : undefined /* extra */);\n\n      return this._makeSubscription({\n        callback: callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe'\n      }, args);\n    }\n\n    /**\n     * Deregister an account notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n  }, {\n    key: \"removeProgramAccountChangeListener\",\n    value: function () {\n      var _removeProgramAccountChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee102(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee102$(_context102) {\n          while (1) switch (_context102.prev = _context102.next) {\n            case 0:\n              _context102.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n            case 2:\n            case \"end\":\n              return _context102.stop();\n          }\n        }, _callee102, this);\n      }));\n      function removeProgramAccountChangeListener(_x155) {\n        return _removeProgramAccountChangeListener.apply(this, arguments);\n      }\n      return removeProgramAccountChangeListener;\n    }()\n    /**\n     * Registers a callback to be invoked whenever logs are emitted.\n     */\n  }, {\n    key: \"onLogs\",\n    value: function onLogs(filter, callback, commitment) {\n      var args = this._buildArgs([typeof filter === 'object' ? {\n        mentions: [filter.toString()]\n      } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n      );\n\n      return this._makeSubscription({\n        callback: callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe'\n      }, args);\n    }\n\n    /**\n     * Deregister a logs callback.\n     *\n     * @param id client subscription id to deregister.\n     */\n  }, {\n    key: \"removeOnLogsListener\",\n    value: function () {\n      var _removeOnLogsListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee103(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee103$(_context103) {\n          while (1) switch (_context103.prev = _context103.next) {\n            case 0:\n              _context103.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n            case 2:\n            case \"end\":\n              return _context103.stop();\n          }\n        }, _callee103, this);\n      }));\n      function removeOnLogsListener(_x156) {\n        return _removeOnLogsListener.apply(this, arguments);\n      }\n      return removeOnLogsListener;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnLogsNotification\",\n    value: function _wsOnLogsNotification(notification) {\n      var _create3 = create(notification, LogsNotificationResult),\n        result = _create3.result,\n        subscription = _create3.subscription;\n      this._handleServerNotification(subscription, [result.value, result.context]);\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnSlotNotification\",\n    value: function _wsOnSlotNotification(notification) {\n      var _create4 = create(notification, SlotNotificationResult),\n        result = _create4.result,\n        subscription = _create4.subscription;\n      this._handleServerNotification(subscription, [result]);\n    }\n\n    /**\n     * Register a callback to be invoked upon slot changes\n     *\n     * @param callback Function to invoke whenever the slot changes\n     * @return subscription id\n     */\n  }, {\n    key: \"onSlotChange\",\n    value: function onSlotChange(callback) {\n      return this._makeSubscription({\n        callback: callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe'\n      }, [] /* args */);\n    }\n\n    /**\n     * Deregister a slot notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n  }, {\n    key: \"removeSlotChangeListener\",\n    value: function () {\n      var _removeSlotChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee104(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee104$(_context104) {\n          while (1) switch (_context104.prev = _context104.next) {\n            case 0:\n              _context104.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n            case 2:\n            case \"end\":\n              return _context104.stop();\n          }\n        }, _callee104, this);\n      }));\n      function removeSlotChangeListener(_x157) {\n        return _removeSlotChangeListener.apply(this, arguments);\n      }\n      return removeSlotChangeListener;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnSlotUpdatesNotification\",\n    value: function _wsOnSlotUpdatesNotification(notification) {\n      var _create5 = create(notification, SlotUpdateNotificationResult),\n        result = _create5.result,\n        subscription = _create5.subscription;\n      this._handleServerNotification(subscription, [result]);\n    }\n\n    /**\n     * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n     * may be useful to track live progress of a cluster.\n     *\n     * @param callback Function to invoke whenever the slot updates\n     * @return subscription id\n     */\n  }, {\n    key: \"onSlotUpdate\",\n    value: function onSlotUpdate(callback) {\n      return this._makeSubscription({\n        callback: callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n      }, [] /* args */);\n    }\n\n    /**\n     * Deregister a slot update notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n  }, {\n    key: \"removeSlotUpdateListener\",\n    value: function () {\n      var _removeSlotUpdateListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee105(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee105$(_context105) {\n          while (1) switch (_context105.prev = _context105.next) {\n            case 0:\n              _context105.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n            case 2:\n            case \"end\":\n              return _context105.stop();\n          }\n        }, _callee105, this);\n      }));\n      function removeSlotUpdateListener(_x158) {\n        return _removeSlotUpdateListener.apply(this, arguments);\n      }\n      return removeSlotUpdateListener;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_unsubscribeClientSubscription\",\n    value: function () {\n      var _unsubscribeClientSubscription2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee106(clientSubscriptionId, subscriptionName) {\n        var dispose;\n        return _regeneratorRuntime().wrap(function _callee106$(_context106) {\n          while (1) switch (_context106.prev = _context106.next) {\n            case 0:\n              dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n              if (!dispose) {\n                _context106.next = 6;\n                break;\n              }\n              _context106.next = 4;\n              return dispose();\n            case 4:\n              _context106.next = 7;\n              break;\n            case 6:\n              console.warn('Ignored unsubscribe request because an active subscription with id ' + \"`\".concat(clientSubscriptionId, \"` for '\").concat(subscriptionName, \"' events \") + 'could not be found.');\n            case 7:\n            case \"end\":\n              return _context106.stop();\n          }\n        }, _callee106, this);\n      }));\n      function _unsubscribeClientSubscription(_x159, _x160) {\n        return _unsubscribeClientSubscription2.apply(this, arguments);\n      }\n      return _unsubscribeClientSubscription;\n    }()\n  }, {\n    key: \"_buildArgs\",\n    value: function _buildArgs(args, override, encoding, extra) {\n      var commitment = override || this._commitment;\n      if (commitment || encoding || extra) {\n        var options = {};\n        if (encoding) {\n          options.encoding = encoding;\n        }\n        if (commitment) {\n          options.commitment = commitment;\n        }\n        if (extra) {\n          options = Object.assign(options, extra);\n        }\n        args.push(options);\n      }\n      return args;\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_buildArgsAtLeastConfirmed\",\n    value: function _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n      var commitment = override || this._commitment;\n      if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n        throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n      }\n      return this._buildArgs(args, override, encoding, extra);\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnSignatureNotification\",\n    value: function _wsOnSignatureNotification(notification) {\n      var _create6 = create(notification, SignatureNotificationResult),\n        result = _create6.result,\n        subscription = _create6.subscription;\n      if (result.value !== 'receivedSignature') {\n        /**\n         * Special case.\n         * After a signature is processed, RPCs automatically dispose of the\n         * subscription on the server side. We need to track which of these\n         * subscriptions have been disposed in such a way, so that we know\n         * whether the client is dealing with a not-yet-processed signature\n         * (in which case we must tear down the server subscription) or an\n         * already-processed signature (in which case the client can simply\n         * clear out the subscription locally without telling the server).\n         *\n         * NOTE: There is a proposal to eliminate this special case, here:\n         * https://github.com/solana-labs/solana/issues/18892\n         */\n        this._subscriptionsAutoDisposedByRpc.add(subscription);\n      }\n      this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n        type: 'received'\n      }, result.context] : [{\n        type: 'status',\n        result: result.value\n      }, result.context]);\n    }\n\n    /**\n     * Register a callback to be invoked upon signature updates\n     *\n     * @param signature Transaction signature string in base 58\n     * @param callback Function to invoke on signature notifications\n     * @param commitment Specify the commitment level signature must reach before notification\n     * @return subscription id\n     */\n  }, {\n    key: \"onSignature\",\n    value: function onSignature(signature, _callback, commitment) {\n      var _this28 = this;\n      var args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n      );\n\n      var clientSubscriptionId = this._makeSubscription({\n        callback: function callback(notification, context) {\n          if (notification.type === 'status') {\n            _callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              _this28.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe'\n      }, args);\n      return clientSubscriptionId;\n    }\n\n    /**\n     * Register a callback to be invoked when a transaction is\n     * received and/or processed.\n     *\n     * @param signature Transaction signature string in base 58\n     * @param callback Function to invoke on signature notifications\n     * @param options Enable received notifications and set the commitment\n     *   level that signature must reach before notification\n     * @return subscription id\n     */\n  }, {\n    key: \"onSignatureWithOptions\",\n    value: function onSignatureWithOptions(signature, _callback2, options) {\n      var _this29 = this;\n      var _options$commitment = _objectSpread(_objectSpread({}, options), {}, {\n          commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n        }),\n        commitment = _options$commitment.commitment,\n        extra = _objectWithoutProperties(_options$commitment, _excluded4);\n      var args = this._buildArgs([signature], commitment, undefined /* encoding */, extra);\n      var clientSubscriptionId = this._makeSubscription({\n        callback: function callback(notification, context) {\n          _callback2(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            _this29.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe'\n      }, args);\n      return clientSubscriptionId;\n    }\n\n    /**\n     * Deregister a signature notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n  }, {\n    key: \"removeSignatureListener\",\n    value: function () {\n      var _removeSignatureListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee107(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee107$(_context107) {\n          while (1) switch (_context107.prev = _context107.next) {\n            case 0:\n              _context107.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n            case 2:\n            case \"end\":\n              return _context107.stop();\n          }\n        }, _callee107, this);\n      }));\n      function removeSignatureListener(_x161) {\n        return _removeSignatureListener.apply(this, arguments);\n      }\n      return removeSignatureListener;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnRootNotification\",\n    value: function _wsOnRootNotification(notification) {\n      var _create7 = create(notification, RootNotificationResult),\n        result = _create7.result,\n        subscription = _create7.subscription;\n      this._handleServerNotification(subscription, [result]);\n    }\n\n    /**\n     * Register a callback to be invoked upon root changes\n     *\n     * @param callback Function to invoke whenever the root changes\n     * @return subscription id\n     */\n  }, {\n    key: \"onRootChange\",\n    value: function onRootChange(callback) {\n      return this._makeSubscription({\n        callback: callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe'\n      }, [] /* args */);\n    }\n\n    /**\n     * Deregister a root notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n  }, {\n    key: \"removeRootChangeListener\",\n    value: function () {\n      var _removeRootChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee108(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee108$(_context108) {\n          while (1) switch (_context108.prev = _context108.next) {\n            case 0:\n              _context108.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n            case 2:\n            case \"end\":\n              return _context108.stop();\n          }\n        }, _callee108, this);\n      }));\n      function removeRootChangeListener(_x162) {\n        return _removeRootChangeListener.apply(this, arguments);\n      }\n      return removeRootChangeListener;\n    }()\n  }]);\n  return Connection;\n}();\n/**\n * Keypair signer interface\n */\n/**\n * An account keypair used for signing transactions.\n */\nvar Keypair = /*#__PURE__*/function () {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  function Keypair(keypair) {\n    _classCallCheck(this, Keypair);\n    this._keypair = void 0;\n    this._keypair = keypair !== null && keypair !== void 0 ? keypair : generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  _createClass(Keypair, [{\n    key: \"publicKey\",\n    get:\n    /**\n     * The public key for this keypair\n     *\n     * @returns {PublicKey} PublicKey\n     */\n    function get() {\n      return new PublicKey(this._keypair.publicKey);\n    }\n\n    /**\n     * The raw secret key for this keypair\n     * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n     */\n  }, {\n    key: \"secretKey\",\n    get: function get() {\n      return new Uint8Array(this._keypair.secretKey);\n    }\n  }], [{\n    key: \"generate\",\n    value: function generate() {\n      return new Keypair(generateKeypair());\n    }\n\n    /**\n     * Create a keypair from a raw secret key byte array.\n     *\n     * This method should only be used to recreate a keypair from a previously\n     * generated secret key. Generating keypairs from a random seed should be done\n     * with the {@link Keypair.fromSeed} method.\n     *\n     * @throws error if the provided secret key is invalid and validation is not skipped.\n     *\n     * @param secretKey secret key byte array\n     * @param options skip secret key validation\n     *\n     * @returns {Keypair} Keypair\n     */\n  }, {\n    key: \"fromSecretKey\",\n    value: function fromSecretKey(secretKey, options) {\n      if (secretKey.byteLength !== 64) {\n        throw new Error('bad secret key size');\n      }\n      var publicKey = secretKey.slice(32, 64);\n      if (!options || !options.skipValidation) {\n        var privateScalar = secretKey.slice(0, 32);\n        var computedPublicKey = getPublicKey(privateScalar);\n        for (var ii = 0; ii < 32; ii++) {\n          if (publicKey[ii] !== computedPublicKey[ii]) {\n            throw new Error('provided secretKey is invalid');\n          }\n        }\n      }\n      return new Keypair({\n        publicKey: publicKey,\n        secretKey: secretKey\n      });\n    }\n\n    /**\n     * Generate a keypair from a 32 byte seed.\n     *\n     * @param seed seed byte array\n     *\n     * @returns {Keypair} Keypair\n     */\n  }, {\n    key: \"fromSeed\",\n    value: function fromSeed(seed) {\n      var publicKey = getPublicKey(seed);\n      var secretKey = new Uint8Array(64);\n      secretKey.set(seed);\n      secretKey.set(publicKey, 32);\n      return new Keypair({\n        publicKey: publicKey,\n        secretKey: secretKey\n      });\n    }\n  }]);\n  return Keypair;\n}();\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nvar LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nvar AddressLookupTableInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function AddressLookupTableInstruction() {\n    _classCallCheck(this, AddressLookupTableInstruction);\n  }\n  _createClass(AddressLookupTableInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var index = instructionTypeLayout.decode(instruction.data);\n      var type;\n      for (var _i7 = 0, _Object$entries2 = Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS); _i7 < _Object$entries2.length; _i7++) {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i7], 2),\n          layoutType = _Object$entries2$_i[0],\n          layout = _Object$entries2$_i[1];\n        if (layout.index == index) {\n          type = layoutType;\n          break;\n        }\n      }\n      if (!type) {\n        throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n      }\n      return type;\n    }\n  }, {\n    key: \"decodeCreateLookupTable\",\n    value: function decodeCreateLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeysLength(instruction.keys, 4);\n      var _decodeData$12 = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data),\n        recentSlot = _decodeData$12.recentSlot;\n      return {\n        authority: instruction.keys[1].pubkey,\n        payer: instruction.keys[2].pubkey,\n        recentSlot: Number(recentSlot)\n      };\n    }\n  }, {\n    key: \"decodeExtendLookupTable\",\n    value: function decodeExtendLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n      if (instruction.keys.length < 2) {\n        throw new Error(\"invalid instruction; found \".concat(instruction.keys.length, \" keys, expected at least 2\"));\n      }\n      var _decodeData$13 = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data),\n        addresses = _decodeData$13.addresses;\n      return {\n        lookupTable: instruction.keys[0].pubkey,\n        authority: instruction.keys[1].pubkey,\n        payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n        addresses: addresses.map(function (buffer) {\n          return new PublicKey(buffer);\n        })\n      };\n    }\n  }, {\n    key: \"decodeCloseLookupTable\",\n    value: function decodeCloseLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeysLength(instruction.keys, 3);\n      return {\n        lookupTable: instruction.keys[0].pubkey,\n        authority: instruction.keys[1].pubkey,\n        recipient: instruction.keys[2].pubkey\n      };\n    }\n  }, {\n    key: \"decodeFreezeLookupTable\",\n    value: function decodeFreezeLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeysLength(instruction.keys, 2);\n      return {\n        lookupTable: instruction.keys[0].pubkey,\n        authority: instruction.keys[1].pubkey\n      };\n    }\n  }, {\n    key: \"decodeDeactivateLookupTable\",\n    value: function decodeDeactivateLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeysLength(instruction.keys, 2);\n      return {\n        lookupTable: instruction.keys[0].pubkey,\n        authority: instruction.keys[1].pubkey\n      };\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(AddressLookupTableProgram.programId)) {\n        throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n      }\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkKeysLength\",\n    value: function checkKeysLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n  return AddressLookupTableInstruction;\n}();\nvar AddressLookupTableProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function AddressLookupTableProgram() {\n    _classCallCheck(this, AddressLookupTableProgram);\n  }\n  _createClass(AddressLookupTableProgram, null, [{\n    key: \"createLookupTable\",\n    value: function createLookupTable(params) {\n      var _PublicKey$findProgra = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId),\n        _PublicKey$findProgra2 = _slicedToArray(_PublicKey$findProgra, 2),\n        lookupTableAddress = _PublicKey$findProgra2[0],\n        bumpSeed = _PublicKey$findProgra2[1];\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n      var data = encodeData(type, {\n        recentSlot: BigInt(params.recentSlot),\n        bumpSeed: bumpSeed\n      });\n      var keys = [{\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      }];\n      return [new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      }), lookupTableAddress];\n    }\n  }, {\n    key: \"freezeLookupTable\",\n    value: function freezeLookupTable(params) {\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n      var data = encodeData(type);\n      var keys = [{\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      });\n    }\n  }, {\n    key: \"extendLookupTable\",\n    value: function extendLookupTable(params) {\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n      var data = encodeData(type, {\n        addresses: params.addresses.map(function (addr) {\n          return addr.toBytes();\n        })\n      });\n      var keys = [{\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }];\n      if (params.payer) {\n        keys.push({\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n      return new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      });\n    }\n  }, {\n    key: \"deactivateLookupTable\",\n    value: function deactivateLookupTable(params) {\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n      var data = encodeData(type);\n      var keys = [{\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      });\n    }\n  }, {\n    key: \"closeLookupTable\",\n    value: function closeLookupTable(params) {\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n      var data = encodeData(type);\n      var keys = [{\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true\n      }];\n      return new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      });\n    }\n  }]);\n  return AddressLookupTableProgram;\n}();\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\nvar ComputeBudgetInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function ComputeBudgetInstruction() {\n    _classCallCheck(this, ComputeBudgetInstruction);\n  }\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  _createClass(ComputeBudgetInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u8('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n      for (var _i8 = 0, _Object$entries3 = Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS); _i8 < _Object$entries3.length; _i8++) {\n        var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i8], 2),\n          ixType = _Object$entries3$_i[0],\n          layout = _Object$entries3$_i[1];\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n      }\n      return type;\n    }\n\n    /**\n     * Decode request units compute budget instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeRequestUnits\",\n    value: function decodeRequestUnits(instruction) {\n      this.checkProgramId(instruction.programId);\n      var _decodeData$14 = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data),\n        units = _decodeData$14.units,\n        additionalFee = _decodeData$14.additionalFee;\n      return {\n        units: units,\n        additionalFee: additionalFee\n      };\n    }\n\n    /**\n     * Decode request heap frame compute budget instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeRequestHeapFrame\",\n    value: function decodeRequestHeapFrame(instruction) {\n      this.checkProgramId(instruction.programId);\n      var _decodeData$15 = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data),\n        bytes = _decodeData$15.bytes;\n      return {\n        bytes: bytes\n      };\n    }\n\n    /**\n     * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeSetComputeUnitLimit\",\n    value: function decodeSetComputeUnitLimit(instruction) {\n      this.checkProgramId(instruction.programId);\n      var _decodeData$16 = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data),\n        units = _decodeData$16.units;\n      return {\n        units: units\n      };\n    }\n\n    /**\n     * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeSetComputeUnitPrice\",\n    value: function decodeSetComputeUnitPrice(instruction) {\n      this.checkProgramId(instruction.programId);\n      var _decodeData$17 = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data),\n        microLamports = _decodeData$17.microLamports;\n      return {\n        microLamports: microLamports\n      };\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(ComputeBudgetProgram.programId)) {\n        throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n      }\n    }\n  }]);\n  return ComputeBudgetInstruction;\n}();\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n/**\n * Request units instruction params\n */\n/**\n * Request heap frame instruction params\n */\n/**\n * Set compute unit limit instruction params\n */\n/**\n * Set compute unit price instruction params\n */\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nvar COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nvar ComputeBudgetProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function ComputeBudgetProgram() {\n    _classCallCheck(this, ComputeBudgetProgram);\n  }\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  _createClass(ComputeBudgetProgram, null, [{\n    key: \"requestUnits\",\n    value: function requestUnits(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n      var data = encodeData(type, params);\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }, {\n    key: \"requestHeapFrame\",\n    value: function requestHeapFrame(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n      var data = encodeData(type, params);\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }, {\n    key: \"setComputeUnitLimit\",\n    value: function setComputeUnitLimit(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n      var data = encodeData(type, params);\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }, {\n    key: \"setComputeUnitPrice\",\n    value: function setComputeUnitPrice(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n      var data = encodeData(type, {\n        microLamports: BigInt(params.microLamports)\n      });\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n  return ComputeBudgetProgram;\n}();\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\nvar PRIVATE_KEY_BYTES$1 = 64;\nvar PUBLIC_KEY_BYTES$1 = 32;\nvar SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\n\nvar ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nvar Ed25519Program = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Ed25519Program() {\n    _classCallCheck(this, Ed25519Program);\n  }\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  _createClass(Ed25519Program, null, [{\n    key: \"createInstructionWithPublicKey\",\n    value: function createInstructionWithPublicKey(params) {\n      var publicKey = params.publicKey,\n        message = params.message,\n        signature = params.signature,\n        instructionIndex = params.instructionIndex;\n      assert(publicKey.length === PUBLIC_KEY_BYTES$1, \"Public Key must be \".concat(PUBLIC_KEY_BYTES$1, \" bytes but received \").concat(publicKey.length, \" bytes\"));\n      assert(signature.length === SIGNATURE_BYTES, \"Signature must be \".concat(SIGNATURE_BYTES, \" bytes but received \").concat(signature.length, \" bytes\"));\n      var publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n      var signatureOffset = publicKeyOffset + publicKey.length;\n      var messageDataOffset = signatureOffset + signature.length;\n      var numSignatures = 1;\n      var instructionData = Buffer.alloc(messageDataOffset + message.length);\n      var index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n      : instructionIndex;\n      ED25519_INSTRUCTION_LAYOUT.encode({\n        numSignatures: numSignatures,\n        padding: 0,\n        signatureOffset: signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset: publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset: messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index\n      }, instructionData);\n      instructionData.fill(publicKey, publicKeyOffset);\n      instructionData.fill(signature, signatureOffset);\n      instructionData.fill(message, messageDataOffset);\n      return new TransactionInstruction({\n        keys: [],\n        programId: Ed25519Program.programId,\n        data: instructionData\n      });\n    }\n\n    /**\n     * Create an ed25519 instruction with a private key. The private key\n     * must be a buffer that is 64 bytes long.\n     */\n  }, {\n    key: \"createInstructionWithPrivateKey\",\n    value: function createInstructionWithPrivateKey(params) {\n      var privateKey = params.privateKey,\n        message = params.message,\n        instructionIndex = params.instructionIndex;\n      assert(privateKey.length === PRIVATE_KEY_BYTES$1, \"Private key must be \".concat(PRIVATE_KEY_BYTES$1, \" bytes but received \").concat(privateKey.length, \" bytes\"));\n      try {\n        var keypair = Keypair.fromSecretKey(privateKey);\n        var _publicKey2 = keypair.publicKey.toBytes();\n        var _signature5 = _sign(message, keypair.secretKey);\n        return this.createInstructionWithPublicKey({\n          publicKey: _publicKey2,\n          message: message,\n          signature: _signature5,\n          instructionIndex: instructionIndex\n        });\n      } catch (error) {\n        throw new Error(\"Error creating instruction; \".concat(error));\n      }\n    }\n  }]);\n  return Ed25519Program;\n}();\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\nvar ecdsaSign = function ecdsaSign(msgHash, privKey) {\n  var signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery];\n};\nsecp256k1.utils.isValidPrivateKey;\nvar publicKeyCreate = secp256k1.getPublicKey;\nvar PRIVATE_KEY_BYTES = 32;\nvar ETHEREUM_ADDRESS_BYTES = 20;\nvar PUBLIC_KEY_BYTES = 64;\nvar SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\n\nvar SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nvar Secp256k1Program = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Secp256k1Program() {\n    _classCallCheck(this, Secp256k1Program);\n  }\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  _createClass(Secp256k1Program, null, [{\n    key: \"publicKeyToEthAddress\",\n    value: function publicKeyToEthAddress(publicKey) {\n      assert(publicKey.length === PUBLIC_KEY_BYTES, \"Public key must be \".concat(PUBLIC_KEY_BYTES, \" bytes but received \").concat(publicKey.length, \" bytes\"));\n      try {\n        return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n      } catch (error) {\n        throw new Error(\"Error constructing Ethereum address: \".concat(error));\n      }\n    }\n\n    /**\n     * Create an secp256k1 instruction with a public key. The public key\n     * must be a buffer that is 64 bytes long.\n     */\n  }, {\n    key: \"createInstructionWithPublicKey\",\n    value: function createInstructionWithPublicKey(params) {\n      var publicKey = params.publicKey,\n        message = params.message,\n        signature = params.signature,\n        recoveryId = params.recoveryId,\n        instructionIndex = params.instructionIndex;\n      return Secp256k1Program.createInstructionWithEthAddress({\n        ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n        message: message,\n        signature: signature,\n        recoveryId: recoveryId,\n        instructionIndex: instructionIndex\n      });\n    }\n\n    /**\n     * Create an secp256k1 instruction with an Ethereum address. The address\n     * must be a hex string or a buffer that is 20 bytes long.\n     */\n  }, {\n    key: \"createInstructionWithEthAddress\",\n    value: function createInstructionWithEthAddress(params) {\n      var rawAddress = params.ethAddress,\n        message = params.message,\n        signature = params.signature,\n        recoveryId = params.recoveryId,\n        _params$instructionIn = params.instructionIndex,\n        instructionIndex = _params$instructionIn === void 0 ? 0 : _params$instructionIn;\n      var ethAddress;\n      if (typeof rawAddress === 'string') {\n        if (rawAddress.startsWith('0x')) {\n          ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n        } else {\n          ethAddress = Buffer.from(rawAddress, 'hex');\n        }\n      } else {\n        ethAddress = rawAddress;\n      }\n      assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, \"Address must be \".concat(ETHEREUM_ADDRESS_BYTES, \" bytes but received \").concat(ethAddress.length, \" bytes\"));\n      var dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n      var ethAddressOffset = dataStart;\n      var signatureOffset = dataStart + ethAddress.length;\n      var messageDataOffset = signatureOffset + signature.length + 1;\n      var numSignatures = 1;\n      var instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n      SECP256K1_INSTRUCTION_LAYOUT.encode({\n        numSignatures: numSignatures,\n        signatureOffset: signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset: ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset: messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId: recoveryId\n      }, instructionData);\n      instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n      return new TransactionInstruction({\n        keys: [],\n        programId: Secp256k1Program.programId,\n        data: instructionData\n      });\n    }\n\n    /**\n     * Create an secp256k1 instruction with a private key. The private key\n     * must be a buffer that is 32 bytes long.\n     */\n  }, {\n    key: \"createInstructionWithPrivateKey\",\n    value: function createInstructionWithPrivateKey(params) {\n      var pkey = params.privateKey,\n        message = params.message,\n        instructionIndex = params.instructionIndex;\n      assert(pkey.length === PRIVATE_KEY_BYTES, \"Private key must be \".concat(PRIVATE_KEY_BYTES, \" bytes but received \").concat(pkey.length, \" bytes\"));\n      try {\n        var privateKey = toBuffer(pkey);\n        var _publicKey3 = publicKeyCreate(privateKey, false /* isCompressed */).slice(1); // throw away leading byte\n        var messageHash = Buffer.from(keccak_256(toBuffer(message)));\n        var _ecdsaSign = ecdsaSign(messageHash, privateKey),\n          _ecdsaSign2 = _slicedToArray(_ecdsaSign, 2),\n          _signature6 = _ecdsaSign2[0],\n          recoveryId = _ecdsaSign2[1];\n        return this.createInstructionWithPublicKey({\n          publicKey: _publicKey3,\n          message: message,\n          signature: _signature6,\n          recoveryId: recoveryId,\n          instructionIndex: instructionIndex\n        });\n      } catch (error) {\n        throw new Error(\"Error creating instruction; \".concat(error));\n      }\n    }\n  }]);\n  return Secp256k1Program;\n}();\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\nvar _class2;\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nvar STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n\n/**\n * Stake account authority info\n */\nvar Authorized = /*#__PURE__*/_createClass(\n/**\n * Create a new Authorized object\n * @param staker the stake authority\n * @param withdrawer the withdraw authority\n */\nfunction Authorized(staker, withdrawer) {\n  _classCallCheck(this, Authorized);\n  /** stake authority */\n  this.staker = void 0;\n  /** withdraw authority */\n  this.withdrawer = void 0;\n  this.staker = staker;\n  this.withdrawer = withdrawer;\n});\n/**\n * Stake account lockup info\n */\nvar Lockup = /*#__PURE__*/_createClass(\n/**\n * Create a new Lockup object\n */\nfunction Lockup(unixTimestamp, epoch, custodian) {\n  _classCallCheck(this, Lockup);\n  /** Unix timestamp of lockup expiration */\n  this.unixTimestamp = void 0;\n  /** Epoch of lockup expiration */\n  this.epoch = void 0;\n  /** Lockup custodian authority */\n  this.custodian = void 0;\n  this.unixTimestamp = unixTimestamp;\n  this.epoch = epoch;\n  this.custodian = custodian;\n}\n\n/**\n * Default, inactive Lockup value\n */);\n\n_class2 = Lockup;\nLockup.default = new _class2(0, 0, PublicKey.default);\n/**\n * Create stake account transaction params\n */\n/**\n * Create stake account with seed transaction params\n */\n/**\n * Initialize stake instruction params\n */\n/**\n * Delegate stake instruction params\n */\n/**\n * Authorize stake instruction params\n */\n/**\n * Authorize stake instruction params using a derived key\n */\n/**\n * Split stake instruction params\n */\n/**\n * Split with seed transaction params\n */\n/**\n * Withdraw stake instruction params\n */\n/**\n * Deactivate stake instruction params\n */\n/**\n * Merge stake instruction params\n */\n/**\n * Stake Instruction class\n */\nvar StakeInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function StakeInstruction() {\n    _classCallCheck(this, StakeInstruction);\n  }\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  _createClass(StakeInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n      for (var _i9 = 0, _Object$entries4 = Object.entries(STAKE_INSTRUCTION_LAYOUTS); _i9 < _Object$entries4.length; _i9++) {\n        var _Object$entries4$_i = _slicedToArray(_Object$entries4[_i9], 2),\n          ixType = _Object$entries4$_i[0],\n          layout = _Object$entries4$_i[1];\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a StakeInstruction');\n      }\n      return type;\n    }\n\n    /**\n     * Decode a initialize stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeInitialize\",\n    value: function decodeInitialize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n      var _decodeData$18 = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data),\n        authorized = _decodeData$18.authorized,\n        lockup = _decodeData$18.lockup;\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n        lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n      };\n    }\n\n    /**\n     * Decode a delegate stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeDelegate\",\n    value: function decodeDelegate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 6);\n      decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        votePubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[5].pubkey\n      };\n    }\n\n    /**\n     * Decode an authorize stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAuthorize\",\n    value: function decodeAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData$19 = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data),\n        newAuthorized = _decodeData$19.newAuthorized,\n        stakeAuthorizationType = _decodeData$19.stakeAuthorizationType;\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        stakeAuthorizationType: {\n          index: stakeAuthorizationType\n        }\n      };\n      if (instruction.keys.length > 3) {\n        o.custodianPubkey = instruction.keys[3].pubkey;\n      }\n      return o;\n    }\n\n    /**\n     * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAuthorizeWithSeed\",\n    value: function decodeAuthorizeWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n      var _decodeData$20 = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data),\n        newAuthorized = _decodeData$20.newAuthorized,\n        stakeAuthorizationType = _decodeData$20.stakeAuthorizationType,\n        authoritySeed = _decodeData$20.authoritySeed,\n        authorityOwner = _decodeData$20.authorityOwner;\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorityBase: instruction.keys[1].pubkey,\n        authoritySeed: authoritySeed,\n        authorityOwner: new PublicKey(authorityOwner),\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        stakeAuthorizationType: {\n          index: stakeAuthorizationType\n        }\n      };\n      if (instruction.keys.length > 3) {\n        o.custodianPubkey = instruction.keys[3].pubkey;\n      }\n      return o;\n    }\n\n    /**\n     * Decode a split stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeSplit\",\n    value: function decodeSplit(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData$21 = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data),\n        lamports = _decodeData$21.lamports;\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        splitStakePubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        lamports: lamports\n      };\n    }\n\n    /**\n     * Decode a merge stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeMerge\",\n    value: function decodeMerge(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        sourceStakePubKey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey\n      };\n    }\n\n    /**\n     * Decode a withdraw stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeWithdraw\",\n    value: function decodeWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 5);\n      var _decodeData$22 = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data),\n        lamports = _decodeData$22.lamports;\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey,\n        lamports: lamports\n      };\n      if (instruction.keys.length > 5) {\n        o.custodianPubkey = instruction.keys[5].pubkey;\n      }\n      return o;\n    }\n\n    /**\n     * Decode a deactivate stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeDeactivate\",\n    value: function decodeDeactivate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey\n      };\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(StakeProgram.programId)) {\n        throw new Error('invalid instruction; programId is not StakeProgram');\n      }\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n  return StakeInstruction;\n}();\n/**\n * An enumeration of valid StakeInstructionType's\n */\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nvar STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nvar StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nvar StakeProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function StakeProgram() {\n    _classCallCheck(this, StakeProgram);\n  }\n\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  _createClass(StakeProgram, null, [{\n    key: \"initialize\",\n    value: function initialize(params) {\n      var stakePubkey = params.stakePubkey,\n        authorized = params.authorized,\n        maybeLockup = params.lockup;\n      var lockup = maybeLockup || Lockup.default;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n      var data = encodeData(type, {\n        authorized: {\n          staker: toBuffer(authorized.staker.toBuffer()),\n          withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n        },\n        lockup: {\n          unixTimestamp: lockup.unixTimestamp,\n          epoch: lockup.epoch,\n          custodian: toBuffer(lockup.custodian.toBuffer())\n        }\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n\n    /**\n     * Generate a Transaction that creates a new Stake account at\n     *   an address generated with `from`, a seed, and the Stake programId\n     */\n  }, {\n    key: \"createAccountWithSeed\",\n    value: function createAccountWithSeed(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      var stakePubkey = params.stakePubkey,\n        authorized = params.authorized,\n        lockup = params.lockup;\n      return transaction.add(this.initialize({\n        stakePubkey: stakePubkey,\n        authorized: authorized,\n        lockup: lockup\n      }));\n    }\n\n    /**\n     * Generate a Transaction that creates a new Stake account\n     */\n  }, {\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      var stakePubkey = params.stakePubkey,\n        authorized = params.authorized,\n        lockup = params.lockup;\n      return transaction.add(this.initialize({\n        stakePubkey: stakePubkey,\n        authorized: authorized,\n        lockup: lockup\n      }));\n    }\n\n    /**\n     * Generate a Transaction that delegates Stake tokens to a validator\n     * Vote PublicKey. This transaction can also be used to redelegate Stake\n     * to a new validator Vote PublicKey.\n     */\n  }, {\n    key: \"delegate\",\n    value: function delegate(params) {\n      var stakePubkey = params.stakePubkey,\n        authorizedPubkey = params.authorizedPubkey,\n        votePubkey = params.votePubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: votePubkey,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: STAKE_CONFIG_ID,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a Transaction that authorizes a new PublicKey as Staker\n     * or Withdrawer on the Stake account.\n     */\n  }, {\n    key: \"authorize\",\n    value: function authorize(params) {\n      var stakePubkey = params.stakePubkey,\n        authorizedPubkey = params.authorizedPubkey,\n        newAuthorizedPubkey = params.newAuthorizedPubkey,\n        stakeAuthorizationType = params.stakeAuthorizationType,\n        custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        stakeAuthorizationType: stakeAuthorizationType.index\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a Transaction that authorizes a new PublicKey as Staker\n     * or Withdrawer on the Stake account.\n     */\n  }, {\n    key: \"authorizeWithSeed\",\n    value: function authorizeWithSeed(params) {\n      var stakePubkey = params.stakePubkey,\n        authorityBase = params.authorityBase,\n        authoritySeed = params.authoritySeed,\n        authorityOwner = params.authorityOwner,\n        newAuthorizedPubkey = params.newAuthorizedPubkey,\n        stakeAuthorizationType = params.stakeAuthorizationType,\n        custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        stakeAuthorizationType: stakeAuthorizationType.index,\n        authoritySeed: authoritySeed,\n        authorityOwner: toBuffer(authorityOwner.toBuffer())\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorityBase,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }];\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"splitInstruction\",\n    value: function splitInstruction(params) {\n      var stakePubkey = params.stakePubkey,\n        authorizedPubkey = params.authorizedPubkey,\n        splitStakePubkey = params.splitStakePubkey,\n        lamports = params.lamports;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Split;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: splitStakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a Transaction that splits Stake tokens into another stake account\n     */\n  }, {\n    key: \"split\",\n    value: function split(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId\n      }));\n      return transaction.add(this.splitInstruction(params));\n    }\n\n    /**\n     * Generate a Transaction that splits Stake tokens into another account\n     * derived from a base public key and seed\n     */\n  }, {\n    key: \"splitWithSeed\",\n    value: function splitWithSeed(params) {\n      var stakePubkey = params.stakePubkey,\n        authorizedPubkey = params.authorizedPubkey,\n        splitStakePubkey = params.splitStakePubkey,\n        basePubkey = params.basePubkey,\n        seed = params.seed,\n        lamports = params.lamports;\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey: basePubkey,\n        seed: seed,\n        space: this.space,\n        programId: this.programId\n      }));\n      return transaction.add(this.splitInstruction({\n        stakePubkey: stakePubkey,\n        authorizedPubkey: authorizedPubkey,\n        splitStakePubkey: splitStakePubkey,\n        lamports: lamports\n      }));\n    }\n\n    /**\n     * Generate a Transaction that merges Stake accounts.\n     */\n  }, {\n    key: \"merge\",\n    value: function merge(params) {\n      var stakePubkey = params.stakePubkey,\n        sourceStakePubKey = params.sourceStakePubKey,\n        authorizedPubkey = params.authorizedPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: sourceStakePubKey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a Transaction that withdraws deactivated Stake tokens.\n     */\n  }, {\n    key: \"withdraw\",\n    value: function withdraw(params) {\n      var stakePubkey = params.stakePubkey,\n        authorizedPubkey = params.authorizedPubkey,\n        toPubkey = params.toPubkey,\n        lamports = params.lamports,\n        custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a Transaction that deactivates Stake tokens.\n     */\n  }, {\n    key: \"deactivate\",\n    value: function deactivate(params) {\n      var stakePubkey = params.stakePubkey,\n        authorizedPubkey = params.authorizedPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n  return StakeProgram;\n}();\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\n/**\n * Max space of a Stake account\n *\n * This is generated from the solana-stake-program StakeState struct as\n * `StakeState::size_of()`:\n * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n */\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\nvar VoteInit = /*#__PURE__*/_createClass( /** [0, 100] */\n\nfunction VoteInit(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n  _classCallCheck(this, VoteInit);\n  this.nodePubkey = void 0;\n  this.authorizedVoter = void 0;\n  this.authorizedWithdrawer = void 0;\n  this.commission = void 0;\n  this.nodePubkey = nodePubkey;\n  this.authorizedVoter = authorizedVoter;\n  this.authorizedWithdrawer = authorizedWithdrawer;\n  this.commission = commission;\n});\n/**\n * Create vote account transaction params\n */\n/**\n * InitializeAccount instruction params\n */\n/**\n * Authorize instruction params\n */\n/**\n * AuthorizeWithSeed instruction params\n */\n/**\n * Withdraw from vote account transaction params\n */\n/**\n * Vote Instruction class\n */\nvar VoteInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function VoteInstruction() {\n    _classCallCheck(this, VoteInstruction);\n  }\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  _createClass(VoteInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n      for (var _i10 = 0, _Object$entries5 = Object.entries(VOTE_INSTRUCTION_LAYOUTS); _i10 < _Object$entries5.length; _i10++) {\n        var _Object$entries5$_i = _slicedToArray(_Object$entries5[_i10], 2),\n          ixType = _Object$entries5$_i[0],\n          layout = _Object$entries5$_i[1];\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a VoteInstruction');\n      }\n      return type;\n    }\n\n    /**\n     * Decode an initialize vote instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeInitializeAccount\",\n    value: function decodeInitializeAccount(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 4);\n      var _decodeData$23 = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data),\n        voteInit = _decodeData$23.voteInit;\n      return {\n        votePubkey: instruction.keys[0].pubkey,\n        nodePubkey: instruction.keys[3].pubkey,\n        voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n      };\n    }\n\n    /**\n     * Decode an authorize instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAuthorize\",\n    value: function decodeAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData$24 = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data),\n        newAuthorized = _decodeData$24.newAuthorized,\n        voteAuthorizationType = _decodeData$24.voteAuthorizationType;\n      return {\n        votePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        voteAuthorizationType: {\n          index: voteAuthorizationType\n        }\n      };\n    }\n\n    /**\n     * Decode an authorize instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAuthorizeWithSeed\",\n    value: function decodeAuthorizeWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData$25 = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data),\n        _decodeData$25$voteAu = _decodeData$25.voteAuthorizeWithSeedArgs,\n        currentAuthorityDerivedKeyOwnerPubkey = _decodeData$25$voteAu.currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed = _decodeData$25$voteAu.currentAuthorityDerivedKeySeed,\n        newAuthorized = _decodeData$25$voteAu.newAuthorized,\n        voteAuthorizationType = _decodeData$25$voteAu.voteAuthorizationType;\n      return {\n        currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n        currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        voteAuthorizationType: {\n          index: voteAuthorizationType\n        },\n        votePubkey: instruction.keys[0].pubkey\n      };\n    }\n\n    /**\n     * Decode a withdraw instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeWithdraw\",\n    value: function decodeWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData$26 = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data),\n        lamports = _decodeData$26.lamports;\n      return {\n        votePubkey: instruction.keys[0].pubkey,\n        authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n        lamports: lamports,\n        toPubkey: instruction.keys[1].pubkey\n      };\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(VoteProgram.programId)) {\n        throw new Error('invalid instruction; programId is not VoteProgram');\n      }\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n  return VoteInstruction;\n}();\n/**\n * An enumeration of valid VoteInstructionType's\n */\n/** @internal */\nvar VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nvar VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nvar VoteProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function VoteProgram() {\n    _classCallCheck(this, VoteProgram);\n  }\n\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  _createClass(VoteProgram, null, [{\n    key: \"initializeAccount\",\n    value: function initializeAccount(params) {\n      var votePubkey = params.votePubkey,\n        nodePubkey = params.nodePubkey,\n        voteInit = params.voteInit;\n      var type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n      var data = encodeData(type, {\n        voteInit: {\n          nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n          authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n          authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n          commission: voteInit.commission\n        }\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: votePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: nodePubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n\n    /**\n     * Generate a transaction that creates a new Vote account.\n     */\n  }, {\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      return transaction.add(this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit\n      }));\n    }\n\n    /**\n     * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n     */\n  }, {\n    key: \"authorize\",\n    value: function authorize(params) {\n      var votePubkey = params.votePubkey,\n        authorizedPubkey = params.authorizedPubkey,\n        newAuthorizedPubkey = params.newAuthorizedPubkey,\n        voteAuthorizationType = params.voteAuthorizationType;\n      var type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      });\n      var keys = [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n     * where the current Voter or Withdrawer authority is a derived key.\n     */\n  }, {\n    key: \"authorizeWithSeed\",\n    value: function authorizeWithSeed(params) {\n      var currentAuthorityDerivedKeyBasePubkey = params.currentAuthorityDerivedKeyBasePubkey,\n        currentAuthorityDerivedKeyOwnerPubkey = params.currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed = params.currentAuthorityDerivedKeySeed,\n        newAuthorizedPubkey = params.newAuthorizedPubkey,\n        voteAuthorizationType = params.voteAuthorizationType,\n        votePubkey = params.votePubkey;\n      var type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n      var data = encodeData(type, {\n        voteAuthorizeWithSeedArgs: {\n          currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n          currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n          newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n          voteAuthorizationType: voteAuthorizationType.index\n        }\n      });\n      var keys = [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a transaction to withdraw from a Vote account.\n     */\n  }, {\n    key: \"withdraw\",\n    value: function withdraw(params) {\n      var votePubkey = params.votePubkey,\n        authorizedWithdrawerPubkey = params.authorizedWithdrawerPubkey,\n        lamports = params.lamports,\n        toPubkey = params.toPubkey;\n      var type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      var keys = [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedWithdrawerPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a transaction to withdraw safely from a Vote account.\n     *\n     * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n     * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n     * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n     * `withdraw` method directly.\n     */\n  }, {\n    key: \"safeWithdraw\",\n    value: function safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n      if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n        throw new Error('Withdraw will leave vote account with insuffcient funds.');\n      }\n      return VoteProgram.withdraw(params);\n    }\n  }]);\n  return VoteProgram;\n}();\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * Max space of a Vote account\n *\n * This is generated from the solana-vote-program VoteState struct as\n * `VoteState::size_of()`:\n * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n *\n * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n */\nVoteProgram.space = 3731;\nvar VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n\n/**\n * @internal\n */\n\n/**\n * Info used to identity validators.\n */\n\nvar InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n\n/**\n * ValidatorInfo class\n */\nvar ValidatorInfo = /*#__PURE__*/function () {\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  function ValidatorInfo(key, info) {\n    _classCallCheck(this, ValidatorInfo);\n    /**\n     * validator public key\n     */\n    this.key = void 0;\n    /**\n     * validator information\n     */\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  _createClass(ValidatorInfo, null, [{\n    key: \"fromConfigData\",\n    value: function fromConfigData(buffer) {\n      var byteArray = _toConsumableArray(buffer);\n      var configKeyCount = decodeLength(byteArray);\n      if (configKeyCount !== 2) return null;\n      var configKeys = [];\n      for (var i = 0; i < 2; i++) {\n        var _publicKey4 = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n        byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n        var isSigner = byteArray.slice(0, 1)[0] === 1;\n        byteArray = byteArray.slice(1);\n        configKeys.push({\n          publicKey: _publicKey4,\n          isSigner: isSigner\n        });\n      }\n      if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n        if (configKeys[1].isSigner) {\n          var rawInfo = rustString().decode(Buffer.from(byteArray));\n          var info = JSON.parse(rawInfo);\n          assert$1(info, InfoString);\n          return new ValidatorInfo(configKeys[1].publicKey, info);\n        }\n      }\n      return null;\n    }\n  }]);\n  return ValidatorInfo;\n}();\nvar VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * History of how many credits earned by the end of each epoch\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nvar VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\nvar VoteAccount = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function VoteAccount(args) {\n    _classCallCheck(this, VoteAccount);\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  _createClass(VoteAccount, null, [{\n    key: \"fromAccountData\",\n    value: function fromAccountData(buffer) {\n      var versionOffset = 4;\n      var va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n      var rootSlot = va.rootSlot;\n      if (!va.rootSlotValid) {\n        rootSlot = null;\n      }\n      return new VoteAccount({\n        nodePubkey: new PublicKey(va.nodePubkey),\n        authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n        commission: va.commission,\n        votes: va.votes,\n        rootSlot: rootSlot,\n        authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n        priorVoters: getPriorVoters(va.priorVoters),\n        epochCredits: va.epochCredits,\n        lastTimestamp: va.lastTimestamp\n      });\n    }\n  }]);\n  return VoteAccount;\n}();\nfunction parseAuthorizedVoter(_ref46) {\n  var authorizedVoter = _ref46.authorizedVoter,\n    epoch = _ref46.epoch;\n  return {\n    epoch: epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters(_ref47) {\n  var authorizedPubkey = _ref47.authorizedPubkey,\n    epochOfLastAuthorizedSwitch = _ref47.epochOfLastAuthorizedSwitch,\n    targetEpoch = _ref47.targetEpoch;\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch: epochOfLastAuthorizedSwitch,\n    targetEpoch: targetEpoch\n  };\n}\nfunction getPriorVoters(_ref48) {\n  var buf = _ref48.buf,\n    idx = _ref48.idx,\n    isEmpty = _ref48.isEmpty;\n  if (isEmpty) {\n    return [];\n  }\n  return [].concat(_toConsumableArray(buf.slice(idx + 1).map(parsePriorVoters)), _toConsumableArray(buf.slice(0, idx).map(parsePriorVoters)));\n}\nvar endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nfunction clusterApiUrl(cluster, tls) {\n  var key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  var url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(\"Unknown \".concat(key, \" cluster: \").concat(cluster));\n  }\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */ // eslint-disable-next-line no-redeclare\n// eslint-disable-next-line no-redeclare\nfunction sendAndConfirmRawTransaction(_x163, _x164, _x165, _x166) {\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\n/**\n * There are 1-billion lamports in one SOL\n */\nfunction _sendAndConfirmRawTransaction() {\n  _sendAndConfirmRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee110(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n    var confirmationStrategy, options, sendOptions, signature, commitment, confirmationPromise, status;\n    return _regeneratorRuntime().wrap(function _callee110$(_context110) {\n      while (1) switch (_context110.prev = _context110.next) {\n        case 0:\n          if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n            confirmationStrategy = confirmationStrategyOrConfirmOptions;\n            options = maybeConfirmOptions;\n          } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n            confirmationStrategy = confirmationStrategyOrConfirmOptions;\n            options = maybeConfirmOptions;\n          } else {\n            options = confirmationStrategyOrConfirmOptions;\n          }\n          sendOptions = options && {\n            skipPreflight: options.skipPreflight,\n            preflightCommitment: options.preflightCommitment || options.commitment,\n            minContextSlot: options.minContextSlot\n          };\n          _context110.next = 4;\n          return connection.sendRawTransaction(rawTransaction, sendOptions);\n        case 4:\n          signature = _context110.sent;\n          commitment = options && options.commitment;\n          confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n          _context110.next = 9;\n          return confirmationPromise;\n        case 9:\n          status = _context110.sent.value;\n          if (!status.err) {\n            _context110.next = 12;\n            break;\n          }\n          throw new Error(\"Raw transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n        case 12:\n          return _context110.abrupt(\"return\", signature);\n        case 13:\n        case \"end\":\n          return _context110.stop();\n      }\n    }, _callee110);\n  }));\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\nvar LAMPORTS_PER_SOL = 1000000000;\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"names":["generatePrivateKey","ed25519","utils","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","isOnCurve","ExtendedPoint","fromHex","_unused","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","from","buffer","byteOffset","byteLength","Struct","properties","_classCallCheck","Object","assign","_createClass","key","value","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","_Struct","_inherits","_super","_createSuper","_this","call","enum","keys","length","Error","map","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","_bn","undefined","uniquePublicKeyCounter","_Symbol$toStringTag","Symbol","toStringTag","PublicKey","_Struct2","_Symbol$toStringTag2","_super2","_this2","decoded","bs58","BN","equals","eq","toBase58","toBytes","toJSON","buf","b","toArrayLike","zeroPad","alloc","copy","get","concat","toString","unique","_createWithSeed","_asyncToGenerator","_regeneratorRuntime","mark","_callee","fromPublicKey","seed","programId","publicKeyBytes","wrap","_callee$","_context","prev","next","sha256","abrupt","stop","createWithSeed","_x","_x2","_x3","apply","arguments","createProgramAddressSync","seeds","forEach","TypeError","_createProgramAddress","_callee2","_callee2$","_context2","createProgramAddress","_x4","_x5","findProgramAddressSync","nonce","address","seedsWithNonce","err","_findProgramAddress","_callee3","_callee3$","_context3","findProgramAddress","_x6","_x7","pubkeyData","pubkey","_class","default","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","_Error","_super3","signature","_this3","_wrapNativeSuper","defineProperty","prototype","TransactionExpiredTimeoutError","_Error2","_super4","timeoutSeconds","_this4","toFixed","TransactionExpiredNonceInvalidError","_Error3","_super5","_this5","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","index","_iterator","_createForOfIteratorHelper","_step","s","n","done","keySegment","e","f","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","voteAuthorizeWithSeedArgs","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","assert","condition","CompiledKeys","payer","keyMetaMap","getMessageComponents","mapEntries","_toConsumableArray","entries","writableSigners","filter","_ref","_ref2","_slicedToArray","isSigner","isWritable","readonlySigners","_ref3","_ref4","writableNonSigners","_ref5","_ref6","readonlyNonSigners","_ref7","_ref8","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","_writableSigners$","payerAddress","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","extractTableLookup","lookupTable","_this$drainKeysFoundI","drainKeysFoundInLookupTable","state","addresses","keyMeta","isInvoked","_this$drainKeysFoundI2","writableIndexes","drainedWritableKeys","_this$drainKeysFoundI3","_this$drainKeysFoundI4","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","_this6","lookupTableIndexes","drainedKeys","_iterator2","_step2","_loop","_step2$value","lookupTableIndex","findIndex","entry","delete","compile","getOrInsertDefault","payerKeyMeta","_iterator3","_step3","ix","_iterator4","_step4","accountMeta","Message","args","_this7","accountKeys","recentBlockhash","indexToProgramIds","account","accounts","getAccountKeys","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_this8","_","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","transaction","signData","compiledKeys","payerKey","_compiledKeys$getMess","_compiledKeys$getMess2","byteArray","accountCount","i","dataSlice","messageArgs","MessageV0","compiledInstructions","addressTableLookups","count","_iterator5","_step5","lookup","numAccountKeysFromLookups","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","reduce","_iterator6","_step6","_loop2","tableLookup","tableAccount","find","_iterator7","_step7","_iterator8","_step8","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","_iterator9","_step9","encodedAccountKeyIndexesLength","encodedDataLength","_iterator10","_step10","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","lookupTableAccounts","_iterator11","_step11","extractResult","_accountKeysFromLooku","_accountKeysFromLooku2","_extractResult","addressTableLookup","_extractResult$","_compiledKeys$getMess3","_compiledKeys$getMess4","maskedPrefix","version","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","_ref17","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","minContextSlot","blockhash","nonceInstruction","signers","_ref18","add","_this9","_len","items","_key","compileMessage","JSON","stringify","console","warn","accountMetas","_objectSpread","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","options","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","localeCompare","feePayerIndex","_uniqueMetas$splice","_uniqueMetas$splice2","payerMeta","unshift","_iterator12","_step12","_loop3","signedKeys","unsignedKeys","_ref19","indexOf","_compile","valid","every","pair","serializeMessage","_getEstimatedFee","_callee4","connection","_callee4$","_context4","getFeeForMessage","sent","getEstimatedFee","_x8","setSigners","_len2","_key2","seen","Set","_len3","_key3","uniqueSigners","_i4","_signers","signer","_partialSign","partialSign","_len4","_key4","_i5","_signers2","_this10","_len5","_key5","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","_iterator13","_step13","_step13$value","config","_Object$assign","_serialize","signatureCount","transactionLength","wireTransaction","_ref20","keyObj","populate","sigPubkeyPair","some","TransactionMessage","compileToLegacyMessage","compileToV0Message","decompile","_iterator14","_step14","compiledIx","_iterator15","_step15","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","_this11","messageData","signerPubkeys","_iterator16","_step16","_loop4","signerIndex","signaturesLength","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","_x9","_x10","_x11","_x12","_sendAndConfirmTransaction","_callee109","sendOptions","status","nonceAccountPubkey","_callee109$","_context109","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","confirmTransaction","abortSignal","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData$1","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","_encodeDecode","bigIntLayout","src","toBigIntLE","toBufferLE","u64","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","_i6","_Object$entries","SYSTEM_INSTRUCTION_LAYOUTS","_Object$entries$_i","ixType","decodeCreateAccount","checkKeyLength","_decodeData$","Create","lamports","space","fromPubkey","newAccountPubkey","decodeTransfer","_decodeData$2","Transfer","toPubkey","decodeTransferWithSeed","_decodeData$3","TransferWithSeed","basePubkey","decodeAllocate","_decodeData$4","Allocate","accountPubkey","decodeAllocateWithSeed","_decodeData$5","AllocateWithSeed","base","decodeAssign","_decodeData$6","Assign","decodeAssignWithSeed","_decodeData$7","AssignWithSeed","decodeCreateWithSeed","_decodeData$8","CreateWithSeed","decodeNonceInitialize","_decodeData$9","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","_decodeData$10","WithdrawNonceAccount","decodeNonceAuthorize","_decodeData$11","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","_load","_callee5","program","balanceNeeded","programInfo","dataLayout","array","transactions","_data","_transaction","REQUESTS_PER_SECOND","_dataLayout","_data2","_transaction2","deployCommitment","finalizeSignature","_yield$connection$con","context","currentSlot","_callee5$","_context5","getMinimumBalanceForRentExemption","getAccountInfo","executable","error","owner","bytesLength","bytesLengthPadding","_rpcEndpoint","all","getSlot","slot","t0","round","load","_x13","_x14","_x15","_x16","_x17","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","objToString","objKeys","obj","name","val","isArrayProp","max","propVal","toStr","isFinite","fastStableStringify","returnVal","MINIMUM_SLOT_PER_EPOCH","trailingZeros","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","_Error4","_super6","logs","_this12","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","_Error5","_super7","_ref21","customMessage","_this13","code","fetchImpl","globalThis","fetch","RpcWebSocketClient","_RpcWebSocketCommonCl","_super8","generate_request_id","_this14","webSocketFactory","url","rpc","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","_this$underlyingSocke","readyState","_len6","_key6","_get2","_get","_getPrototypeOf","reject","notify","_this$underlyingSocke2","_len7","_key7","_get3","RpcWebSocketCommonClient","decodeData","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","_BufferLayout$struct$","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","_matches","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","_objectWithoutProperties","_excluded","createRpcResult","result","union","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","number","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","httpAgent","agent","fetchWithMiddleware","_ref22","_callee6","info","init","modifiedFetchArgs","_callee6$","_context6","modifiedInfo","modifiedInit","_x18","_x19","clientBrowser","RpcClient","_ref23","_callee7","request","callback","too_many_requests_retries","res","waitTime","text","_callee7$","_context7","method","body","headers","COMMON_HTTP_HEADERS","log","statusText","ok","_x20","_x21","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","_commitmentOrConfig","_this15","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_ref24","_callee9","_requestPromises$requ","_extractCommitmentFro","requestHash","_callee9$","_context9","_buildArgs","fastStableStringify$1","_callee8","unsafeRes","_callee8$","_context8","finish","_x22","wsEndpoint","confirmTransactionInitialTimeout","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_getBalanceAndContext","_callee10","_extractCommitmentFro2","_callee10$","_context10","getBalanceAndContext","_x23","_x24","_getBalance","_callee11","_callee11$","_context11","then","catch","getBalance","_x25","_x26","_getBlockTime","_callee12","_callee12$","_context12","getBlockTime","_x27","_getMinimumLedgerSlot","_callee13","_callee13$","_context13","getMinimumLedgerSlot","_getFirstAvailableBlock","_callee14","_callee14$","_context14","getFirstAvailableBlock","_getSupply","_callee15","configArg","_callee15$","_context15","getSupply","_x28","_getTokenSupply","_callee16","tokenMintAddress","_callee16$","_context16","getTokenSupply","_x29","_x30","_getTokenAccountBalance","_callee17","tokenAddress","_callee17$","_context17","getTokenAccountBalance","_x31","_x32","_getTokenAccountsByOwner","_callee18","ownerAddress","_extractCommitmentFro3","_args","_callee18$","_context18","getTokenAccountsByOwner","_x33","_x34","_x35","_getParsedTokenAccountsByOwner","_callee19","_callee19$","_context19","getParsedTokenAccountsByOwner","_x36","_x37","_x38","_getLargestAccounts","_callee20","arg","_callee20$","_context20","getLargestAccounts","_x39","_getTokenLargestAccounts","_callee21","mintAddress","_callee21$","_context21","getTokenLargestAccounts","_x40","_x41","_getAccountInfoAndContext","_callee22","_extractCommitmentFro4","_callee22$","_context22","getAccountInfoAndContext","_x42","_x43","_getParsedAccountInfo","_callee23","_extractCommitmentFro5","_callee23$","_context23","getParsedAccountInfo","_x44","_x45","_getAccountInfo","_callee24","_callee24$","_context24","_x46","_x47","_getMultipleParsedAccounts","_callee25","publicKeys","rawConfig","_extractCommitmentFro6","_callee25$","_context25","getMultipleParsedAccounts","_x48","_x49","_getMultipleAccountsInfoAndContext","_callee26","_extractCommitmentFro7","_callee26$","_context26","getMultipleAccountsInfoAndContext","_x50","_x51","_getMultipleAccountsInfo","_callee27","_callee27$","_context27","getMultipleAccountsInfo","_x52","_x53","_getStakeActivation","_callee28","_extractCommitmentFro8","_callee28$","_context28","getStakeActivation","_x54","_x55","_x56","_getProgramAccounts","_callee29","configOrCommitment","_extractCommitmentFro9","_ref26","encoding","configWithoutEncoding","baseSchema","_callee29$","_context29","_excluded2","withContext","getProgramAccounts","_x57","_x58","_getParsedProgramAccounts","_callee30","_extractCommitmentFro10","_callee30$","_context30","getParsedProgramAccounts","_x59","_x60","_confirmTransaction","_callee31","strategy","rawSignature","_config$abortSignal","decodedSignature","_callee31$","_context31","aborted","reason","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","_x61","_x62","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","_ref27","_this16","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","_callee32","_callee32$","_context32","getSignatureStatus","abortConfirmation","removeSignatureListener","_confirmTransactionUsingBlockHeightExceedanceStrategy","_callee35","_ref29","_this17","_ref29$strategy","expiryPromise","_this$getTransactionC","cancellationPromise","outcome","_callee35$","_context35","checkBlockHeight","_ref30","_callee33","_callee33$","_context33","_callee34","currentBlockHeight","_callee34$","_context34","BLOCKHEIGHT_EXCEEDED","race","_x63","_confirmTransactionUsingDurableNonceStrategy","_callee38","_ref32","_this18","_ref32$strategy","_this$getTransactionC2","_signatureStatus","signatureStatus","_outcome$slotInWhichN","commitmentForStatus","_callee38$","_context38","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","_ref33","_callee36","_yield$_this18$getNon","_callee36$","_context36","getNonceAndContext","_callee37","_callee37$","_context37","NONCE_INVALID","slotInWhichNonceDidAdvance","_x64","_confirmTransactionUsingLegacyTimeoutStrategy","_callee39","_ref35","_this19","timeoutId","_this$getTransactionC3","_callee39$","_context39","timeoutMs","TIMED_OUT","clearTimeout","_x65","_getClusterNodes","_callee40","_callee40$","_context40","getClusterNodes","_getVoteAccounts","_callee41","_callee41$","_context41","getVoteAccounts","_x66","_getSlot","_callee42","_extractCommitmentFro11","_callee42$","_context42","_x67","_getSlotLeader","_callee43","_extractCommitmentFro12","_callee43$","_context43","getSlotLeader","_x68","_getSlotLeaders","_callee44","startSlot","limit","_callee44$","_context44","getSlotLeaders","_x69","_x70","_getSignatureStatus","_callee45","_yield$this$getSignat","_callee45$","_context45","getSignatureStatuses","_x71","_x72","_getSignatureStatuses","_callee46","_callee46$","_context46","_x73","_x74","_getTransactionCount","_callee47","_extractCommitmentFro13","_callee47$","_context47","getTransactionCount","_x75","_getTotalSupply","_callee48","_callee48$","_context48","excludeNonCirculatingAccountsList","getTotalSupply","_x76","_getInflationGovernor","_callee49","_callee49$","_context49","getInflationGovernor","_x77","_getInflationReward","_callee50","_extractCommitmentFro14","_callee50$","_context50","getInflationReward","_x78","_x79","_x80","_getInflationRate","_callee51","_callee51$","_context51","getInflationRate","_getEpochInfo","_callee52","_extractCommitmentFro15","_callee52$","_context52","getEpochInfo","_x81","_getEpochSchedule","_callee53","epochSchedule","_callee53$","_context53","getEpochSchedule","_getLeaderSchedule","_callee54","_callee54$","_context54","getLeaderSchedule","_getMinimumBalanceForRentExemption","_callee55","_callee55$","_context55","_x82","_x83","_getRecentBlockhashAndContext","_callee56","_callee56$","_context56","getRecentBlockhashAndContext","_x84","_getRecentPerformanceSamples","_callee57","_callee57$","_context57","getRecentPerformanceSamples","_x85","_getFeeCalculatorForBlockhash","_callee58","_res$result","_callee58$","_context58","getFeeCalculatorForBlockhash","_x86","_x87","_getFeeForMessage","_callee59","wireMessage","_callee59$","_context59","_x88","_x89","_getRecentPrioritizationFees","_callee60","_config$lockedWritabl","_callee60$","_context60","lockedWritableAccounts","getRecentPrioritizationFees","_x90","_getRecentBlockhash","_callee61","_callee61$","_context61","getRecentBlockhash","_x91","_getLatestBlockhash","_callee62","_callee62$","_context62","getLatestBlockhashAndContext","getLatestBlockhash","_x92","_getLatestBlockhashAndContext","_callee63","_extractCommitmentFro16","_callee63$","_context63","_x93","_isBlockhashValid","_callee64","_extractCommitmentFro17","_callee64$","_context64","isBlockhashValid","_x94","_x95","_getVersion","_callee65","_callee65$","_context65","getVersion","_getGenesisHash","_callee66","_callee66$","_context66","getGenesisHash","_getBlock","_callee67","_extractCommitmentFro18","_res","_res2","_callee67$","_context67","_buildArgsAtLeastConfirmed","transactionDetails","_ref36","t1","getBlock","_x96","_x97","_getParsedBlock","_callee68","_extractCommitmentFro19","_res3","_res4","_callee68$","_context68","getParsedBlock","_x98","_x99","_getBlockProduction","_callee69","extra","c","_callee69$","_context69","_excluded3","getBlockProduction","_x100","_getTransaction","_callee70","_extractCommitmentFro20","_callee70$","_context70","getTransaction","_x101","_x102","_getParsedTransaction","_callee71","_extractCommitmentFro21","_callee71$","_context71","getParsedTransaction","_x103","_x104","_getParsedTransactions","_callee72","_this20","_extractCommitmentFro22","_callee72$","_context72","getParsedTransactions","_x105","_x106","_getTransactions","_callee73","_this21","_extractCommitmentFro23","_callee73$","_context73","getTransactions","_x107","_x108","_getConfirmedBlock","_callee74","block","_callee74$","_context74","_ref37","_ref38","getConfirmedBlock","_x109","_x110","_getBlocks","_callee75","endSlot","_callee75$","_context75","getBlocks","_x111","_x112","_x113","_getBlockSignatures","_callee76","_callee76$","_context76","getBlockSignatures","_x114","_x115","_getConfirmedBlockSignatures","_callee77","_callee77$","_context77","getConfirmedBlockSignatures","_x116","_x117","_getConfirmedTransaction","_callee78","_callee78$","_context78","getConfirmedTransaction","_x118","_x119","_getParsedConfirmedTransaction","_callee79","_callee79$","_context79","getParsedConfirmedTransaction","_x120","_x121","_getParsedConfirmedTransactions","_callee80","_this22","_callee80$","_context80","getParsedConfirmedTransactions","_x122","_x123","_getConfirmedSignaturesForAddress","_callee81","firstAvailableBlock","highestConfirmedRoot","_block","confirmedSignatureInfo","_callee81$","_context81","until","before","getConfirmedSignaturesForAddress2","getConfirmedSignaturesForAddress","_x124","_x125","_x126","_getConfirmedSignaturesForAddress2","_callee82","_callee82$","_context82","_x127","_x128","_x129","_getSignaturesForAddress","_callee83","_callee83$","_context83","getSignaturesForAddress","_x130","_x131","_x132","_getAddressLookupTable","_callee84","_yield$this$getAccoun","accountInfo","_callee84$","_context84","getAddressLookupTable","_x133","_x134","_getNonceAndContext","_callee85","_yield$this$getAccoun2","_callee85$","_context85","_x135","_x136","_getNonce","_callee86","_callee86$","_context86","getNonce","_x137","_x138","_requestAirdrop","_callee87","to","_callee87$","_context87","requestAirdrop","_x139","_x140","_blockhashWithExpiryBlockHeight2","_callee88","disableCache","timeSinceFetch","expired","_callee88$","_context88","Date","now","_pollNewBlockhash","_blockhashWithExpiryBlockHeight","_x141","_pollNewBlockhash2","_callee89","startTime","cachedLatestBlockhash","cachedBlockhash","_callee89$","_context89","_getStakeMinimumDelegation","_callee90","_extractCommitmentFro24","_callee90$","_context90","getStakeMinimumDelegation","_x142","_simulateTransaction","_callee91","transactionOrMessage","configOrSigners","includeAccounts","versionedTx","_wireTransaction","_encodedTransaction","_config","_args92","_unsafeRes","_res5","originalTx","_transaction3","_transaction4","_signature3","encodedTransaction","traceIndent","logTrace","_callee91$","_context91","sigVerify","join","simulateTransaction","_x143","_x144","_x145","_sendTransaction","_callee92","signersOrOptions","_wireTransaction2","_signature4","_callee92$","_context92","sendRawTransaction","_x146","_x147","_x148","_sendRawTransaction","_callee93","rawTransaction","_callee93$","_context93","sendEncodedTransaction","_x149","_x150","_sendEncodedTransaction","_callee94","_callee94$","_context94","_x151","_x152","_this23","setInterval","_callee95","_callee95$","_context95","_updateSubscriptions","_this24","Number","MAX_SAFE_INTEGER","clearInterval","_ref40","_ref41","hash","_setSubscription","nextSubscription","_this$_subscriptionsB","prevState","stateChangeCallbacks","cb","_unused4","clientSubscriptionId","_this$_subscriptionSt","_this25","_updateSubscriptions2","_callee99","_this26","activeWebSocketGeneration","isCurrentConnectionStillActive","_callee99$","_context99","close","connect","_ref42","_callee98","_callee98$","_context98","callbacks","serverSubscriptionId","_callee96","_callee96$","_context96","_callee97","unsubscribeMethod","_callee97$","_context97","_x153","_handleServerNotification","callbackArgs","notification","_create","_makeSubscription","subscriptionConfig","_this27","existingSubscription","_callee100","_callee100$","_context100","onAccountChange","_removeAccountChangeListener","_callee101","_callee101$","_context101","_unsubscribeClientSubscription","removeAccountChangeListener","_x154","_create2","accountId","onProgramAccountChange","filters","_removeProgramAccountChangeListener","_callee102","_callee102$","_context102","removeProgramAccountChangeListener","_x155","onLogs","mentions","_removeOnLogsListener","_callee103","_callee103$","_context103","removeOnLogsListener","_x156","_create3","_create4","onSlotChange","_removeSlotChangeListener","_callee104","_callee104$","_context104","removeSlotChangeListener","_x157","_create5","onSlotUpdate","_removeSlotUpdateListener","_callee105","_callee105$","_context105","removeSlotUpdateListener","_x158","_unsubscribeClientSubscription2","_callee106","subscriptionName","dispose","_callee106$","_context106","_x159","_x160","override","_create6","_this28","_err","onSignatureWithOptions","_this29","_options$commitment","_excluded4","_removeSignatureListener","_callee107","_callee107$","_context107","_x161","_create7","onRootChange","_removeRootChangeListener","_callee108","_callee108$","_context108","removeRootChangeListener","_x162","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","_i7","_Object$entries2","_Object$entries2$_i","layoutType","decodeCreateLookupTable","checkKeysLength","_decodeData$12","recentSlot","decodeExtendLookupTable","_decodeData$13","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","_PublicKey$findProgra","_PublicKey$findProgra2","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","_i8","_Object$entries3","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","_Object$entries3$_i","decodeRequestUnits","_decodeData$14","RequestUnits","units","additionalFee","decodeRequestHeapFrame","_decodeData$15","RequestHeapFrame","decodeSetComputeUnitLimit","_decodeData$16","SetComputeUnitLimit","decodeSetComputeUnitPrice","_decodeData$17","SetComputeUnitPrice","microLamports","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES$1","PUBLIC_KEY_BYTES$1","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","ecdsaSign","msgHash","privKey","secp256k1","toCompactRawBytes","recovery","isValidPrivateKey","publicKeyCreate","PRIVATE_KEY_BYTES","ETHEREUM_ADDRESS_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","_params$instructionIn","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","_ecdsaSign","_ecdsaSign2","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","_class2","StakeInstruction","_i9","_Object$entries4","STAKE_INSTRUCTION_LAYOUTS","_Object$entries4$_i","decodeInitialize","_decodeData$18","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","_decodeData$19","Authorize","newAuthorized","stakeAuthorizationType","o","custodianPubkey","decodeAuthorizeWithSeed","_decodeData$20","AuthorizeWithSeed","authoritySeed","authorityOwner","authorityBase","decodeSplit","_decodeData$21","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","_decodeData$22","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","_i10","_Object$entries5","VOTE_INSTRUCTION_LAYOUTS","_Object$entries5$_i","decodeInitializeAccount","_decodeData$23","InitializeAccount","_decodeData$24","voteAuthorizationType","_decodeData$25","_decodeData$25$voteAu","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","_decodeData$26","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assert$1","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","_ref46","parsePriorVoters","_ref47","epochOfLastAuthorizedSwitch","targetEpoch","_ref48","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","_x163","_x164","_x165","_x166","_sendAndConfirmRawTransaction","_callee110","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","_callee110$","_context110","LAMPORTS_PER_SOL"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/utils/ed25519.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/utils/to-buffer.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/utils/borsh-schema.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/publickey.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/account.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/transaction/constants.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/message/account-keys.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/layout.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/utils/assert.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/message/compiled-keys.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/message/legacy.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/message/v0.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/message/versioned.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/transaction/legacy.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/transaction/message.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/transaction/versioned.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/timing.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/sysvar.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/utils/sleep.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/instruction.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/fee-calculator.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/nonce-account.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/utils/bigint.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/programs/system.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/loader.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/bpf-loader.ts","/Users/wuhuan/gif-portal-starter/node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/epoch-schedule.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/errors.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/rpc-websocket.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/account-data.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/connection.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/keypair.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/programs/compute-budget.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/programs/ed25519.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/utils/secp256k1.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/programs/secp256k1.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/programs/stake.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/programs/vote.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/validator-info.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/vote-account.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/utils/cluster.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/utils/send-and-confirm-raw-transaction.ts","/Users/wuhuan/gif-portal-starter/node_modules/@solana/web3.js/src/index.ts"],"sourcesContent":["import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = process.env.TEST_LIVE ? 3762 : 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}