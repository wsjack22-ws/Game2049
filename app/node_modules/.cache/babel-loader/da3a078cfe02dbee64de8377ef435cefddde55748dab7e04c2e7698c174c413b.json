{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertExhaustive = exports.assertStruct = exports.assert = exports.AssertionError = void 0;\nconst superstruct_1 = require(\"superstruct\");\n/**\n * Type guard for determining whether the given value is an error object with a\n * `message` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns True or false, depending on the result.\n */\nfunction isErrorWithMessage(error) {\n  return typeof error === 'object' && error !== null && 'message' in error;\n}\n/**\n * Check if a value is a constructor, i.e., a function that can be called with\n * the `new` keyword.\n *\n * @param fn - The value to check.\n * @returns `true` if the value is a constructor, or `false` otherwise.\n */\nfunction isConstructable(fn) {\n  var _a, _b;\n  /* istanbul ignore next */\n  return Boolean(typeof ((_b = (_a = fn === null || fn === void 0 ? void 0 : fn.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) === 'string');\n}\n/**\n * Get the error message from an unknown error object. If the error object has\n * a `message` property, that property is returned. Otherwise, the stringified\n * error object is returned.\n *\n * @param error - The error object to get the message from.\n * @returns The error message.\n */\nfunction getErrorMessage(error) {\n  const message = isErrorWithMessage(error) ? error.message : String(error);\n  // If the error ends with a period, remove it, as we'll add our own period.\n  if (message.endsWith('.')) {\n    return message.slice(0, -1);\n  }\n  return message;\n}\n/**\n * Initialise an {@link AssertionErrorConstructor} error.\n *\n * @param ErrorWrapper - The error class to use.\n * @param message - The error message.\n * @returns The error object.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction getError(ErrorWrapper, message) {\n  if (isConstructable(ErrorWrapper)) {\n    return new ErrorWrapper({\n      message\n    });\n  }\n  return ErrorWrapper({\n    message\n  });\n}\n/**\n * The default error class that is thrown if an assertion fails.\n */\nclass AssertionError extends Error {\n  constructor(options) {\n    super(options.message);\n    this.code = 'ERR_ASSERTION';\n  }\n}\nexports.AssertionError = AssertionError;\n/**\n * Same as Node.js assert.\n * If the value is falsy, throws an error, does nothing otherwise.\n *\n * @throws {@link AssertionError} If value is falsy.\n * @param value - The test that should be truthy to pass.\n * @param message - Message to be passed to {@link AssertionError} or an\n * {@link Error} instance to throw.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}. If a custom error class is provided for\n * the `message` argument, this argument is ignored.\n */\nfunction assert(value, message = 'Assertion failed.',\n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n  if (!value) {\n    if (message instanceof Error) {\n      throw message;\n    }\n    throw getError(ErrorWrapper, message);\n  }\n}\nexports.assert = assert;\n/**\n * Assert a value against a Superstruct struct.\n *\n * @param value - The value to validate.\n * @param struct - The struct to validate against.\n * @param errorPrefix - A prefix to add to the error message. Defaults to\n * \"Assertion failed\".\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the value is not valid.\n */\nfunction assertStruct(value, struct, errorPrefix = 'Assertion failed',\n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n  try {\n    (0, superstruct_1.assert)(value, struct);\n  } catch (error) {\n    throw getError(ErrorWrapper, `${errorPrefix}: ${getErrorMessage(error)}.`);\n  }\n}\nexports.assertStruct = assertStruct;\n/**\n * Use in the default case of a switch that you want to be fully exhaustive.\n * Using this function forces the compiler to enforce exhaustivity during\n * compile-time.\n *\n * @example\n * ```\n * const number = 1;\n * switch (number) {\n *   case 0:\n *     ...\n *   case 1:\n *     ...\n *   default:\n *     assertExhaustive(snapPrefix);\n * }\n * ```\n * @param _object - The object on which the switch is being operated.\n */\nfunction assertExhaustive(_object) {\n  throw new Error('Invalid branch reached. Should be detected during compilation.');\n}\nexports.assertExhaustive = assertExhaustive;","map":{"version":3,"names":["superstruct_1","require","isErrorWithMessage","error","isConstructable","fn","Boolean","_b","_a","prototype","constructor","name","getErrorMessage","message","String","endsWith","slice","getError","ErrorWrapper","AssertionError","Error","options","code","exports","assert","value","assertStruct","struct","errorPrefix","assertExhaustive","_object"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@metamask/utils/src/assert.ts"],"sourcesContent":["import { assert as assertSuperstruct, Struct } from 'superstruct';\n\nexport type AssertionErrorConstructor =\n  | (new (args: { message: string }) => Error)\n  | ((args: { message: string }) => Error);\n\n/**\n * Type guard for determining whether the given value is an error object with a\n * `message` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns True or false, depending on the result.\n */\nfunction isErrorWithMessage(error: unknown): error is { message: string } {\n  return typeof error === 'object' && error !== null && 'message' in error;\n}\n\n/**\n * Check if a value is a constructor, i.e., a function that can be called with\n * the `new` keyword.\n *\n * @param fn - The value to check.\n * @returns `true` if the value is a constructor, or `false` otherwise.\n */\nfunction isConstructable(\n  fn: AssertionErrorConstructor,\n): fn is new (args: { message: string }) => Error {\n  /* istanbul ignore next */\n  return Boolean(typeof fn?.prototype?.constructor?.name === 'string');\n}\n\n/**\n * Get the error message from an unknown error object. If the error object has\n * a `message` property, that property is returned. Otherwise, the stringified\n * error object is returned.\n *\n * @param error - The error object to get the message from.\n * @returns The error message.\n */\nfunction getErrorMessage(error: unknown): string {\n  const message = isErrorWithMessage(error) ? error.message : String(error);\n\n  // If the error ends with a period, remove it, as we'll add our own period.\n  if (message.endsWith('.')) {\n    return message.slice(0, -1);\n  }\n\n  return message;\n}\n\n/**\n * Initialise an {@link AssertionErrorConstructor} error.\n *\n * @param ErrorWrapper - The error class to use.\n * @param message - The error message.\n * @returns The error object.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction getError(ErrorWrapper: AssertionErrorConstructor, message: string) {\n  if (isConstructable(ErrorWrapper)) {\n    return new ErrorWrapper({\n      message,\n    });\n  }\n  return ErrorWrapper({\n    message,\n  });\n}\n\n/**\n * The default error class that is thrown if an assertion fails.\n */\nexport class AssertionError extends Error {\n  readonly code = 'ERR_ASSERTION';\n\n  constructor(options: { message: string }) {\n    super(options.message);\n  }\n}\n\n/**\n * Same as Node.js assert.\n * If the value is falsy, throws an error, does nothing otherwise.\n *\n * @throws {@link AssertionError} If value is falsy.\n * @param value - The test that should be truthy to pass.\n * @param message - Message to be passed to {@link AssertionError} or an\n * {@link Error} instance to throw.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}. If a custom error class is provided for\n * the `message` argument, this argument is ignored.\n */\nexport function assert(\n  value: any,\n  message: string | Error = 'Assertion failed.',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper: AssertionErrorConstructor = AssertionError,\n): asserts value {\n  if (!value) {\n    if (message instanceof Error) {\n      throw message;\n    }\n\n    throw getError(ErrorWrapper, message);\n  }\n}\n\n/**\n * Assert a value against a Superstruct struct.\n *\n * @param value - The value to validate.\n * @param struct - The struct to validate against.\n * @param errorPrefix - A prefix to add to the error message. Defaults to\n * \"Assertion failed\".\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the value is not valid.\n */\nexport function assertStruct<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  errorPrefix = 'Assertion failed',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper: AssertionErrorConstructor = AssertionError,\n): asserts value is T {\n  try {\n    assertSuperstruct(value, struct);\n  } catch (error) {\n    throw getError(ErrorWrapper, `${errorPrefix}: ${getErrorMessage(error)}.`);\n  }\n}\n\n/**\n * Use in the default case of a switch that you want to be fully exhaustive.\n * Using this function forces the compiler to enforce exhaustivity during\n * compile-time.\n *\n * @example\n * ```\n * const number = 1;\n * switch (number) {\n *   case 0:\n *     ...\n *   case 1:\n *     ...\n *   default:\n *     assertExhaustive(snapPrefix);\n * }\n * ```\n * @param _object - The object on which the switch is being operated.\n */\nexport function assertExhaustive(_object: never): never {\n  throw new Error(\n    'Invalid branch reached. Should be detected during compilation.',\n  );\n}\n"],"mappings":";;;;;;AAAA,MAAAA,aAAA,GAAAC,OAAA;AAMA;;;;;;;AAOA,SAASC,kBAAkBA,CAACC,KAAc;EACxC,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,IAAI,SAAS,IAAIA,KAAK;AAC1E;AAEA;;;;;;;AAOA,SAASC,eAAeA,CACtBC,EAA6B;;EAE7B;EACA,OAAOC,OAAO,CAAC,QAAO,CAAAC,EAAA,IAAAC,EAAA,GAAAH,EAAE,aAAFA,EAAE,uBAAFA,EAAE,CAAEI,SAAS,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,WAAW,cAAAH,EAAA,uBAAAA,EAAA,CAAEI,IAAI,MAAK,QAAQ,CAAC;AACtE;AAEA;;;;;;;;AAQA,SAASC,eAAeA,CAACT,KAAc;EACrC,MAAMU,OAAO,GAAGX,kBAAkB,CAACC,KAAK,CAAC,GAAGA,KAAK,CAACU,OAAO,GAAGC,MAAM,CAACX,KAAK,CAAC;EAEzE;EACA,IAAIU,OAAO,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;IACzB,OAAOF,OAAO,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;EAG7B,OAAOH,OAAO;AAChB;AAEA;;;;;;;AAOA;AACA,SAASI,QAAQA,CAACC,YAAuC,EAAEL,OAAe;EACxE,IAAIT,eAAe,CAACc,YAAY,CAAC,EAAE;IACjC,OAAO,IAAIA,YAAY,CAAC;MACtBL;KACD,CAAC;;EAEJ,OAAOK,YAAY,CAAC;IAClBL;GACD,CAAC;AACJ;AAEA;;;AAGA,MAAaM,cAAe,SAAQC,KAAK;EAGvCV,YAAYW,OAA4B;IACtC,KAAK,CAACA,OAAO,CAACR,OAAO,CAAC;IAHf,KAAAS,IAAI,GAAG,eAAe;EAI/B;;AALFC,OAAA,CAAAJ,cAAA,GAAAA,cAAA;AAQA;;;;;;;;;;;;AAYA,SAAgBK,MAAMA,CACpBC,KAAU,EACVZ,OAAA,GAA0B,mBAAmB;AAC7C;AACAK,YAAA,GAA0CC,cAAc;EAExD,IAAI,CAACM,KAAK,EAAE;IACV,IAAIZ,OAAO,YAAYO,KAAK,EAAE;MAC5B,MAAMP,OAAO;;IAGf,MAAMI,QAAQ,CAACC,YAAY,EAAEL,OAAO,CAAC;;AAEzC;AAbAU,OAAA,CAAAC,MAAA,GAAAA,MAAA;AAeA;;;;;;;;;;;AAWA,SAAgBE,YAAYA,CAC1BD,KAAc,EACdE,MAAoB,EACpBC,WAAW,GAAG,kBAAkB;AAChC;AACAV,YAAA,GAA0CC,cAAc;EAExD,IAAI;IACF,IAAAnB,aAAA,CAAAwB,MAAiB,EAACC,KAAK,EAAEE,MAAM,CAAC;GACjC,CAAC,OAAOxB,KAAK,EAAE;IACd,MAAMc,QAAQ,CAACC,YAAY,EAAE,GAAGU,WAAW,KAAKhB,eAAe,CAACT,KAAK,CAAC,GAAG,CAAC;;AAE9E;AAZAoB,OAAA,CAAAG,YAAA,GAAAA,YAAA;AAcA;;;;;;;;;;;;;;;;;;;AAmBA,SAAgBG,gBAAgBA,CAACC,OAAc;EAC7C,MAAM,IAAIV,KAAK,CACb,gEAAgE,CACjE;AACH;AAJAG,OAAA,CAAAM,gBAAA,GAAAA,gBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}