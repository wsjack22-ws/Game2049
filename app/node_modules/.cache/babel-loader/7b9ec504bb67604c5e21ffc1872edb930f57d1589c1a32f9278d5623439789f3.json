{"ast":null,"code":"\"use strict\";\n\n//\n// Types\n//\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateNumberSize = exports.calculateStringSize = exports.isASCII = exports.isPlainObject = exports.ESCAPE_CHARACTERS_REGEXP = exports.JsonSize = exports.hasProperty = exports.isObject = exports.isNullOrUndefined = exports.isNonEmptyArray = void 0;\n//\n// Type Guards\n//\n/**\n * A {@link NonEmptyArray} type guard.\n *\n * @template Element - The non-empty array member type.\n * @param value - The value to check.\n * @returns Whether the value is a non-empty array.\n */\nfunction isNonEmptyArray(value) {\n  return Array.isArray(value) && value.length > 0;\n}\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\n * Type guard for \"nullishness\".\n *\n * @param value - Any value.\n * @returns `true` if the value is null or undefined, `false` otherwise.\n */\nfunction isNullOrUndefined(value) {\n  return value === null || value === undefined;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n/**\n * A type guard for {@link RuntimeObject}.\n *\n * @param value - The value to check.\n * @returns Whether the specified value has a runtime type of `object` and is\n * neither `null` nor an `Array`.\n */\nfunction isObject(value) {\n  return Boolean(value) && typeof value === 'object' && !Array.isArray(value);\n}\nexports.isObject = isObject;\n//\n// Other utility functions\n//\n/**\n * A type guard for ensuring an object has a property.\n *\n * @param objectToCheck - The object to check.\n * @param name - The property name to check for.\n * @returns Whether the specified object has an own property with the specified\n * name, regardless of whether it is enumerable or not.\n */\nconst hasProperty = (objectToCheck, name) => Object.hasOwnProperty.call(objectToCheck, name);\nexports.hasProperty = hasProperty;\n/**\n * Predefined sizes (in Bytes) of specific parts of JSON structure.\n */\nvar JsonSize;\n(function (JsonSize) {\n  JsonSize[JsonSize[\"Null\"] = 4] = \"Null\";\n  JsonSize[JsonSize[\"Comma\"] = 1] = \"Comma\";\n  JsonSize[JsonSize[\"Wrapper\"] = 1] = \"Wrapper\";\n  JsonSize[JsonSize[\"True\"] = 4] = \"True\";\n  JsonSize[JsonSize[\"False\"] = 5] = \"False\";\n  JsonSize[JsonSize[\"Quote\"] = 1] = \"Quote\";\n  JsonSize[JsonSize[\"Colon\"] = 1] = \"Colon\";\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  JsonSize[JsonSize[\"Date\"] = 24] = \"Date\";\n})(JsonSize = exports.JsonSize || (exports.JsonSize = {}));\n/**\n * Regular expression with pattern matching for (special) escaped characters.\n */\nexports.ESCAPE_CHARACTERS_REGEXP = /\"|\\\\|\\n|\\r|\\t/gu;\n/**\n * Check if the value is plain object.\n *\n * @param value - Value to be checked.\n * @returns True if an object is the plain JavaScript object,\n * false if the object is not plain (e.g. function).\n */\nfunction isPlainObject(value) {\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n  try {\n    let proto = value;\n    while (Object.getPrototypeOf(proto) !== null) {\n      proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(value) === proto;\n  } catch (_) {\n    return false;\n  }\n}\nexports.isPlainObject = isPlainObject;\n/**\n * Check if character is ASCII.\n *\n * @param character - Character.\n * @returns True if a character code is ASCII, false if not.\n */\nfunction isASCII(character) {\n  return character.charCodeAt(0) <= 127;\n}\nexports.isASCII = isASCII;\n/**\n * Calculate string size.\n *\n * @param value - String value to calculate size.\n * @returns Number of bytes used to store whole string value.\n */\nfunction calculateStringSize(value) {\n  var _a;\n  const size = value.split('').reduce((total, character) => {\n    if (isASCII(character)) {\n      return total + 1;\n    }\n    return total + 2;\n  }, 0);\n  // Also detect characters that need backslash escape\n  return size + ((_a = value.match(exports.ESCAPE_CHARACTERS_REGEXP)) !== null && _a !== void 0 ? _a : []).length;\n}\nexports.calculateStringSize = calculateStringSize;\n/**\n * Calculate size of a number ofter JSON serialization.\n *\n * @param value - Number value to calculate size.\n * @returns Number of bytes used to store whole number in JSON.\n */\nfunction calculateNumberSize(value) {\n  return value.toString().length;\n}\nexports.calculateNumberSize = calculateNumberSize;","map":{"version":3,"names":["isNonEmptyArray","value","Array","isArray","length","exports","isNullOrUndefined","undefined","isObject","Boolean","hasProperty","objectToCheck","name","Object","hasOwnProperty","call","JsonSize","ESCAPE_CHARACTERS_REGEXP","isPlainObject","proto","getPrototypeOf","_","isASCII","character","charCodeAt","calculateStringSize","size","split","reduce","total","_a","match","calculateNumberSize","toString"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@metamask/utils/src/misc.ts"],"sourcesContent":["//\n// Types\n//\n\n/**\n * Makes every specified property of the specified object type mutable.\n *\n * @template ObjectValue - The object whose readonly properties to make mutable.\n * @template TargetKey - The property key(s) to make mutable.\n */\nexport type Mutable<\n  ObjectValue extends Record<string, unknown>,\n  TargetKey extends keyof ObjectValue,\n> = {\n  -readonly [Key in keyof Pick<ObjectValue, TargetKey>]: ObjectValue[Key];\n} & {\n  [Key in keyof Omit<ObjectValue, TargetKey>]: ObjectValue[Key];\n};\n\n/**\n * Useful for representing some value that _might_ be present and / or complete.\n *\n * @template Value - The value that might be present or complete.\n */\nexport type PartialOrAbsent<Value> = Partial<Value> | null | undefined;\n\n/**\n * Like {@link Array}, but always non-empty.\n *\n * @template Element - The non-empty array member type.\n */\nexport type NonEmptyArray<Element> = [Element, ...Element[]];\n\n/**\n * A JavaScript object that is not `null`, a function, or an array.\n */\nexport type RuntimeObject = Record<PropertyKey, unknown>;\n\n//\n// Type Guards\n//\n\n/**\n * A {@link NonEmptyArray} type guard.\n *\n * @template Element - The non-empty array member type.\n * @param value - The value to check.\n * @returns Whether the value is a non-empty array.\n */\nexport function isNonEmptyArray<Element>(\n  value: Element[],\n): value is NonEmptyArray<Element> {\n  return Array.isArray(value) && value.length > 0;\n}\n\n/**\n * Type guard for \"nullishness\".\n *\n * @param value - Any value.\n * @returns `true` if the value is null or undefined, `false` otherwise.\n */\nexport function isNullOrUndefined(value: unknown): value is null | undefined {\n  return value === null || value === undefined;\n}\n\n/**\n * A type guard for {@link RuntimeObject}.\n *\n * @param value - The value to check.\n * @returns Whether the specified value has a runtime type of `object` and is\n * neither `null` nor an `Array`.\n */\nexport function isObject(value: unknown): value is RuntimeObject {\n  return Boolean(value) && typeof value === 'object' && !Array.isArray(value);\n}\n\n//\n// Other utility functions\n//\n\n/**\n * A type guard for ensuring an object has a property.\n *\n * @param objectToCheck - The object to check.\n * @param name - The property name to check for.\n * @returns Whether the specified object has an own property with the specified\n * name, regardless of whether it is enumerable or not.\n */\nexport const hasProperty = <\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  ObjectToCheck extends Object,\n  Property extends PropertyKey,\n>(\n  objectToCheck: ObjectToCheck,\n  name: Property,\n): objectToCheck is ObjectToCheck &\n  Record<\n    Property,\n    Property extends keyof ObjectToCheck ? ObjectToCheck[Property] : unknown\n  > => Object.hasOwnProperty.call(objectToCheck, name);\n\nexport type PlainObject = Record<number | string | symbol, unknown>;\n\n/**\n * Predefined sizes (in Bytes) of specific parts of JSON structure.\n */\nexport enum JsonSize {\n  Null = 4,\n  Comma = 1,\n  Wrapper = 1,\n  True = 4,\n  False = 5,\n  Quote = 1,\n  Colon = 1,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Date = 24,\n}\n\n/**\n * Regular expression with pattern matching for (special) escaped characters.\n */\nexport const ESCAPE_CHARACTERS_REGEXP = /\"|\\\\|\\n|\\r|\\t/gu;\n\n/**\n * Check if the value is plain object.\n *\n * @param value - Value to be checked.\n * @returns True if an object is the plain JavaScript object,\n * false if the object is not plain (e.g. function).\n */\nexport function isPlainObject(value: unknown): value is PlainObject {\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n\n  try {\n    let proto = value;\n    while (Object.getPrototypeOf(proto) !== null) {\n      proto = Object.getPrototypeOf(proto);\n    }\n\n    return Object.getPrototypeOf(value) === proto;\n  } catch (_) {\n    return false;\n  }\n}\n\n/**\n * Check if character is ASCII.\n *\n * @param character - Character.\n * @returns True if a character code is ASCII, false if not.\n */\nexport function isASCII(character: string) {\n  return character.charCodeAt(0) <= 127;\n}\n\n/**\n * Calculate string size.\n *\n * @param value - String value to calculate size.\n * @returns Number of bytes used to store whole string value.\n */\nexport function calculateStringSize(value: string): number {\n  const size = value.split('').reduce((total, character) => {\n    if (isASCII(character)) {\n      return total + 1;\n    }\n    return total + 2;\n  }, 0);\n\n  // Also detect characters that need backslash escape\n  return size + (value.match(ESCAPE_CHARACTERS_REGEXP) ?? []).length;\n}\n\n/**\n * Calculate size of a number ofter JSON serialization.\n *\n * @param value - Number value to calculate size.\n * @returns Number of bytes used to store whole number in JSON.\n */\nexport function calculateNumberSize(value: number): number {\n  return value.toString().length;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}