{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _slicedToArray = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _asyncToGenerator = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar context_js_1 = require(\"../context.js\");\nvar event_js_1 = require(\"../event.js\");\nvar error_js_1 = require(\"../../error.js\");\nvar SimulateFactory = /*#__PURE__*/function () {\n  function SimulateFactory() {\n    _classCallCheck(this, SimulateFactory);\n  }\n  _createClass(SimulateFactory, null, [{\n    key: \"build\",\n    value: function build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {\n      var simulate = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var _a,\n            _len,\n            args,\n            _key,\n            tx,\n            _ref2,\n            _ref3,\n            ctx,\n            resp,\n            logs,\n            events,\n            parser,\n            _args = arguments;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                  args[_key] = _args[_key];\n                }\n                tx = txFn.apply(void 0, args);\n                _ref2 = (0, context_js_1.splitArgsAndCtx)(idlIx, [].concat(args)), _ref3 = _slicedToArray(_ref2, 2), ctx = _ref3[1];\n                resp = undefined;\n                if (!(provider.simulate === undefined)) {\n                  _context.next = 6;\n                  break;\n                }\n                throw new Error(\"This function requires 'Provider.simulate' to be implemented.\");\n              case 6:\n                _context.prev = 6;\n                _context.next = 9;\n                return provider.simulate(tx, ctx.signers, (_a = ctx.options) === null || _a === void 0 ? void 0 : _a.commitment);\n              case 9:\n                resp = _context.sent;\n                _context.next = 15;\n                break;\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](6);\n                throw (0, error_js_1.translateError)(_context.t0, idlErrors);\n              case 15:\n                if (!(resp === undefined)) {\n                  _context.next = 17;\n                  break;\n                }\n                throw new Error(\"Unable to simulate transaction\");\n              case 17:\n                logs = resp.logs;\n                if (logs) {\n                  _context.next = 20;\n                  break;\n                }\n                throw new Error(\"Simulated logs not found\");\n              case 20:\n                events = [];\n                if (idl.events) {\n                  parser = new event_js_1.EventParser(programId, coder);\n                  parser.parseLogs(logs, function (event) {\n                    events.push(event);\n                  });\n                }\n                return _context.abrupt(\"return\", {\n                  events: events,\n                  raw: logs\n                });\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, null, [[6, 12]]);\n        }));\n        return function simulate() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      return simulate;\n    }\n  }]);\n  return SimulateFactory;\n}();\nexports.default = SimulateFactory;","map":{"version":3,"names":["context_js_1","require","event_js_1","error_js_1","SimulateFactory","_classCallCheck","_createClass","key","value","build","idlIx","txFn","idlErrors","provider","coder","programId","idl","simulate","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_a","_len","args","_key","tx","_ref2","_ref3","ctx","resp","logs","events","parser","_args","arguments","wrap","_callee$","_context","prev","next","length","Array","apply","splitArgsAndCtx","concat","_slicedToArray","undefined","Error","signers","options","commitment","sent","t0","translateError","EventParser","parseLogs","event","push","abrupt","raw","stop","exports","default"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/program/namespace/simulate.ts"],"sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport Provider from \"../../provider.js\";\nimport { SuccessfulTxSimulationResponse } from \"src/utils/rpc.js\";\nimport { splitArgsAndCtx } from \"../context.js\";\nimport { TransactionFn } from \"./transaction.js\";\nimport { EventParser, Event } from \"../event.js\";\nimport { Coder } from \"../../coder/index.js\";\nimport { Idl, IdlEvent } from \"../../idl.js\";\nimport { translateError } from \"../../error.js\";\nimport {\n  AllInstructions,\n  IdlTypes,\n  InstructionContextFn,\n  MakeInstructionsNamespace,\n} from \"./types\";\n\nexport default class SimulateFactory {\n  public static build<IDL extends Idl, I extends AllInstructions<IDL>>(\n    idlIx: AllInstructions<IDL>,\n    txFn: TransactionFn<IDL>,\n    idlErrors: Map<number, string>,\n    provider: Provider,\n    coder: Coder,\n    programId: PublicKey,\n    idl: IDL\n  ): SimulateFn<IDL, I> {\n    const simulate: SimulateFn<IDL> = async (...args) => {\n      const tx = txFn(...args);\n      const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n      let resp: SuccessfulTxSimulationResponse | undefined = undefined;\n      if (provider.simulate === undefined) {\n        throw new Error(\n          \"This function requires 'Provider.simulate' to be implemented.\"\n        );\n      }\n      try {\n        resp = await provider!.simulate(\n          tx,\n          ctx.signers,\n          ctx.options?.commitment\n        );\n      } catch (err) {\n        throw translateError(err, idlErrors);\n      }\n      if (resp === undefined) {\n        throw new Error(\"Unable to simulate transaction\");\n      }\n      const logs = resp.logs;\n      if (!logs) {\n        throw new Error(\"Simulated logs not found\");\n      }\n\n      const events: Event<IdlEvent, IdlTypes<IDL>>[] = [];\n      if (idl.events) {\n        let parser = new EventParser(programId, coder);\n        parser.parseLogs(logs, (event) => {\n          events.push(event);\n        });\n      }\n      return { events, raw: logs };\n    };\n\n    return simulate;\n  }\n}\n\n/**\n * The namespace provides functions to simulate transactions for each method\n * of a program, returning a list of deserialized events *and* raw program\n * logs.\n *\n * One can use this to read data calculated from a program on chain, by\n * emitting an event in the program and reading the emitted event client side\n * via the `simulate` namespace.\n *\n * ## Usage\n *\n * ```javascript\n * program.simulate.<method>(...args, ctx);\n * ```\n *\n * ## Parameters\n *\n * 1. `args` - The positional arguments for the program. The type and number\n *    of these arguments depend on the program being used.\n * 2. `ctx`  - [[Context]] non-argument parameters to pass to the method.\n *    Always the last parameter in the method call.\n *\n * ## Example\n *\n * To simulate the `increment` method above,\n *\n * ```javascript\n * const events = await program.simulate.increment({\n *   accounts: {\n *     counter,\n *   },\n * });\n * ```\n */\nexport type SimulateNamespace<\n  IDL extends Idl = Idl,\n  I extends AllInstructions<IDL> = AllInstructions<IDL>\n> = MakeInstructionsNamespace<\n  IDL,\n  I,\n  Promise<SimulateResponse<NullableEvents<IDL>, IdlTypes<IDL>>>\n>;\n\ntype NullableEvents<IDL extends Idl> = IDL[\"events\"] extends undefined\n  ? IdlEvent\n  : NonNullable<IDL[\"events\"]>[number];\n\n/**\n * SimulateFn is a single method generated from an IDL. It simulates a method\n * against a cluster configured by the provider, returning a list of all the\n * events and raw logs that were emitted during the execution of the\n * method.\n */\nexport type SimulateFn<\n  IDL extends Idl = Idl,\n  I extends AllInstructions<IDL> = AllInstructions<IDL>\n> = InstructionContextFn<\n  IDL,\n  I,\n  Promise<SimulateResponse<NullableEvents<IDL>, IdlTypes<IDL>>>\n>;\n\nexport type SimulateResponse<E extends IdlEvent, Defined> = {\n  events: readonly Event<E, Defined>[];\n  raw: readonly string[];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}