{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.satisfiesVersionRange = exports.gtRange = exports.gtVersion = exports.assertIsSemVerRange = exports.assertIsSemVerVersion = exports.isValidSemVerRange = exports.isValidSemVerVersion = exports.VersionRangeStruct = exports.VersionStruct = void 0;\nconst semver_1 = require(\"semver\");\nconst superstruct_1 = require(\"superstruct\");\nconst assert_1 = require(\"./assert\");\n/**\n * A struct for validating a version string.\n */\nexports.VersionStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version', value => {\n  if ((0, semver_1.valid)(value) === null) {\n    return `Expected SemVer version, got \"${value}\"`;\n  }\n  return true;\n});\nexports.VersionRangeStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version range', value => {\n  if ((0, semver_1.validRange)(value) === null) {\n    return `Expected SemVer range, got \"${value}\"`;\n  }\n  return true;\n});\n/**\n * Checks whether a SemVer version is valid.\n *\n * @param version - A potential version.\n * @returns `true` if the version is valid, and `false` otherwise.\n */\nfunction isValidSemVerVersion(version) {\n  return (0, superstruct_1.is)(version, exports.VersionStruct);\n}\nexports.isValidSemVerVersion = isValidSemVerVersion;\n/**\n * Checks whether a SemVer version range is valid.\n *\n * @param versionRange - A potential version range.\n * @returns `true` if the version range is valid, and `false` otherwise.\n */\nfunction isValidSemVerRange(versionRange) {\n  return (0, superstruct_1.is)(versionRange, exports.VersionRangeStruct);\n}\nexports.isValidSemVerRange = isValidSemVerRange;\n/**\n * Asserts that a value is a valid concrete SemVer version.\n *\n * @param version - A potential SemVer concrete version.\n */\nfunction assertIsSemVerVersion(version) {\n  (0, assert_1.assertStruct)(version, exports.VersionStruct);\n}\nexports.assertIsSemVerVersion = assertIsSemVerVersion;\n/**\n * Asserts that a value is a valid SemVer range.\n *\n * @param range - A potential SemVer range.\n */\nfunction assertIsSemVerRange(range) {\n  (0, assert_1.assertStruct)(range, exports.VersionRangeStruct);\n}\nexports.assertIsSemVerRange = assertIsSemVerRange;\n/**\n * Checks whether a SemVer version is greater than another.\n *\n * @param version1 - The left-hand version.\n * @param version2 - The right-hand version.\n * @returns `version1 > version2`.\n */\nfunction gtVersion(version1, version2) {\n  return (0, semver_1.gt)(version1, version2);\n}\nexports.gtVersion = gtVersion;\n/**\n * Checks whether a SemVer version is greater than all possibilities in a range.\n *\n * @param version - A SemvVer version.\n * @param range - The range to check against.\n * @returns `version > range`.\n */\nfunction gtRange(version, range) {\n  return (0, semver_1.gtr)(version, range);\n}\nexports.gtRange = gtRange;\n/**\n * Returns whether a SemVer version satisfies a SemVer range.\n *\n * @param version - The SemVer version to check.\n * @param versionRange - The SemVer version range to check against.\n * @returns Whether the version satisfied the version range.\n */\nfunction satisfiesVersionRange(version, versionRange) {\n  return (0, semver_1.satisfies)(version, versionRange, {\n    includePrerelease: true\n  });\n}\nexports.satisfiesVersionRange = satisfiesVersionRange;","map":{"version":3,"names":["semver_1","require","superstruct_1","assert_1","exports","VersionStruct","refine","string","value","valid","VersionRangeStruct","validRange","isValidSemVerVersion","version","is","isValidSemVerRange","versionRange","assertIsSemVerVersion","assertStruct","assertIsSemVerRange","range","gtVersion","version1","version2","gt","gtRange","gtr","satisfiesVersionRange","satisfies","includePrerelease"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@metamask/utils/src/versions.ts"],"sourcesContent":["import {\n  gt as gtSemver,\n  gtr as gtrSemver,\n  satisfies as satisfiesSemver,\n  valid as validSemVerVersion,\n  validRange as validSemVerRange,\n} from 'semver';\nimport { is, refine, string, Struct } from 'superstruct';\n\nimport { assertStruct } from './assert';\nimport { Opaque } from './opaque';\n\n/**\n * {@link https://codemix.com/opaque-types-in-javascript/ Opaque} type for SemVer ranges.\n *\n * @example Use {@link assertIsSemVerRange} and {@link isValidSemVerRange} to cast to proper type.\n * ```typescript\n * const unsafeRange: string = dataFromUser();\n * assertIsSemVerRange(unsafeRange);\n * unsafeRange\n * // ^? SemVerRange\n * ```\n * @example If you know what you're doing and want to side-step type safety, casting from a string works correctly.\n * ```typescript\n * const unsafeRange: string = dataFromUser();\n * unsafeRange as SemVerRange;\n * // ^? SemVerRange\n * ```\n * @see {@link assertIsSemVerRange}\n * @see {@link isValidSemVerRange}\n */\nexport type SemVerRange = Opaque<string, typeof semVerRange>;\ndeclare const semVerRange: unique symbol;\n\n/**\n * {@link https://codemix.com/opaque-types-in-javascript/ Opaque} type for singular SemVer version.\n *\n * @example Use {@link assertIsSemVerVersion} and {@link isValidSemVerVersion} to cast to proper type.\n * ```typescript\n * const unsafeVersion: string = dataFromUser();\n * assertIsSemVerVersion(unsafeRange);\n * unsafeVersion\n * // ^? SemVerVersion\n * ```\n * @example If you know what you're doing and want to side-step type safety, casting from a string works correctly.\n * ```typescript\n * const unsafeVersion: string = dataFromUser();\n * unsafeRange as SemVerVersion;\n * // ^? SemVerVersion\n * ```\n * @see {@link assertIsSemVerVersion}\n * @see {@link isValidSemVerVersion}\n */\nexport type SemVerVersion = Opaque<string, typeof semVerVersion>;\ndeclare const semVerVersion: unique symbol;\n\n/**\n * A struct for validating a version string.\n */\nexport const VersionStruct = refine<SemVerVersion, null>(\n  string() as unknown as Struct<SemVerVersion, null>,\n  'Version',\n  (value) => {\n    if (validSemVerVersion(value) === null) {\n      return `Expected SemVer version, got \"${value}\"`;\n    }\n    return true;\n  },\n);\n\nexport const VersionRangeStruct = refine<SemVerRange, null>(\n  string() as unknown as Struct<SemVerRange, null>,\n  'Version range',\n  (value) => {\n    if (validSemVerRange(value) === null) {\n      return `Expected SemVer range, got \"${value}\"`;\n    }\n    return true;\n  },\n);\n\n/**\n * Checks whether a SemVer version is valid.\n *\n * @param version - A potential version.\n * @returns `true` if the version is valid, and `false` otherwise.\n */\nexport function isValidSemVerVersion(\n  version: unknown,\n): version is SemVerVersion {\n  return is(version, VersionStruct);\n}\n\n/**\n * Checks whether a SemVer version range is valid.\n *\n * @param versionRange - A potential version range.\n * @returns `true` if the version range is valid, and `false` otherwise.\n */\nexport function isValidSemVerRange(\n  versionRange: unknown,\n): versionRange is SemVerRange {\n  return is(versionRange, VersionRangeStruct);\n}\n\n/**\n * Asserts that a value is a valid concrete SemVer version.\n *\n * @param version - A potential SemVer concrete version.\n */\nexport function assertIsSemVerVersion(\n  version: unknown,\n): asserts version is SemVerVersion {\n  assertStruct(version, VersionStruct);\n}\n\n/**\n * Asserts that a value is a valid SemVer range.\n *\n * @param range - A potential SemVer range.\n */\nexport function assertIsSemVerRange(\n  range: unknown,\n): asserts range is SemVerRange {\n  assertStruct(range, VersionRangeStruct);\n}\n\n/**\n * Checks whether a SemVer version is greater than another.\n *\n * @param version1 - The left-hand version.\n * @param version2 - The right-hand version.\n * @returns `version1 > version2`.\n */\nexport function gtVersion(\n  version1: SemVerVersion,\n  version2: SemVerVersion,\n): boolean {\n  return gtSemver(version1, version2);\n}\n\n/**\n * Checks whether a SemVer version is greater than all possibilities in a range.\n *\n * @param version - A SemvVer version.\n * @param range - The range to check against.\n * @returns `version > range`.\n */\nexport function gtRange(version: SemVerVersion, range: SemVerRange): boolean {\n  return gtrSemver(version, range);\n}\n\n/**\n * Returns whether a SemVer version satisfies a SemVer range.\n *\n * @param version - The SemVer version to check.\n * @param versionRange - The SemVer version range to check against.\n * @returns Whether the version satisfied the version range.\n */\nexport function satisfiesVersionRange(\n  version: SemVerVersion,\n  versionRange: SemVerRange,\n): boolean {\n  return satisfiesSemver(version, versionRange, {\n    includePrerelease: true,\n  });\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAOA,MAAAC,aAAA,GAAAD,OAAA;AAEA,MAAAE,QAAA,GAAAF,OAAA;AA+CA;;;AAGaG,OAAA,CAAAC,aAAa,GAAG,IAAAH,aAAA,CAAAI,MAAM,EACjC,IAAAJ,aAAA,CAAAK,MAAM,GAA4C,EAClD,SAAS,EACRC,KAAK,IAAI;EACR,IAAI,IAAAR,QAAA,CAAAS,KAAkB,EAACD,KAAK,CAAC,KAAK,IAAI,EAAE;IACtC,OAAO,iCAAiCA,KAAK,GAAG;;EAElD,OAAO,IAAI;AACb,CAAC,CACF;AAEYJ,OAAA,CAAAM,kBAAkB,GAAG,IAAAR,aAAA,CAAAI,MAAM,EACtC,IAAAJ,aAAA,CAAAK,MAAM,GAA0C,EAChD,eAAe,EACdC,KAAK,IAAI;EACR,IAAI,IAAAR,QAAA,CAAAW,UAAgB,EAACH,KAAK,CAAC,KAAK,IAAI,EAAE;IACpC,OAAO,+BAA+BA,KAAK,GAAG;;EAEhD,OAAO,IAAI;AACb,CAAC,CACF;AAED;;;;;;AAMA,SAAgBI,oBAAoBA,CAClCC,OAAgB;EAEhB,OAAO,IAAAX,aAAA,CAAAY,EAAE,EAACD,OAAO,EAAET,OAAA,CAAAC,aAAa,CAAC;AACnC;AAJAD,OAAA,CAAAQ,oBAAA,GAAAA,oBAAA;AAMA;;;;;;AAMA,SAAgBG,kBAAkBA,CAChCC,YAAqB;EAErB,OAAO,IAAAd,aAAA,CAAAY,EAAE,EAACE,YAAY,EAAEZ,OAAA,CAAAM,kBAAkB,CAAC;AAC7C;AAJAN,OAAA,CAAAW,kBAAA,GAAAA,kBAAA;AAMA;;;;;AAKA,SAAgBE,qBAAqBA,CACnCJ,OAAgB;EAEhB,IAAAV,QAAA,CAAAe,YAAY,EAACL,OAAO,EAAET,OAAA,CAAAC,aAAa,CAAC;AACtC;AAJAD,OAAA,CAAAa,qBAAA,GAAAA,qBAAA;AAMA;;;;;AAKA,SAAgBE,mBAAmBA,CACjCC,KAAc;EAEd,IAAAjB,QAAA,CAAAe,YAAY,EAACE,KAAK,EAAEhB,OAAA,CAAAM,kBAAkB,CAAC;AACzC;AAJAN,OAAA,CAAAe,mBAAA,GAAAA,mBAAA;AAMA;;;;;;;AAOA,SAAgBE,SAASA,CACvBC,QAAuB,EACvBC,QAAuB;EAEvB,OAAO,IAAAvB,QAAA,CAAAwB,EAAQ,EAACF,QAAQ,EAAEC,QAAQ,CAAC;AACrC;AALAnB,OAAA,CAAAiB,SAAA,GAAAA,SAAA;AAOA;;;;;;;AAOA,SAAgBI,OAAOA,CAACZ,OAAsB,EAAEO,KAAkB;EAChE,OAAO,IAAApB,QAAA,CAAA0B,GAAS,EAACb,OAAO,EAAEO,KAAK,CAAC;AAClC;AAFAhB,OAAA,CAAAqB,OAAA,GAAAA,OAAA;AAIA;;;;;;;AAOA,SAAgBE,qBAAqBA,CACnCd,OAAsB,EACtBG,YAAyB;EAEzB,OAAO,IAAAhB,QAAA,CAAA4B,SAAe,EAACf,OAAO,EAAEG,YAAY,EAAE;IAC5Ca,iBAAiB,EAAE;GACpB,CAAC;AACJ;AAPAzB,OAAA,CAAAuB,qBAAA,GAAAA,qBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}