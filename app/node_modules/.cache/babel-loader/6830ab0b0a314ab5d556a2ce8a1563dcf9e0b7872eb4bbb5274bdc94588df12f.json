{"ast":null,"code":"'use strict';\n\nconst zlib_inflate = require('./zlib/inflate');\nconst utils = require('./utils/common');\nconst strings = require('./utils/strings');\nconst msg = require('./zlib/messages');\nconst ZStream = require('./zlib/zstream');\nconst GZheader = require('./zlib/gzheader');\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH,\n  Z_FINISH,\n  Z_OK,\n  Z_STREAM_END,\n  Z_NEED_DICT,\n  Z_STREAM_ERROR,\n  Z_DATA_ERROR,\n  Z_MEM_ERROR\n} = require('./zlib/constants');\n\n/* ===========================================================================*/\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  this.options = utils.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) {\n      opt.windowBits = -15;\n    }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if (opt.windowBits > 15 && opt.windowBits < 48) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n  this.err = 0; // error code, if happens (0 = Z_OK)\n  this.msg = ''; // error message\n  this.ended = false; // used to avoid multiple onEnd() calls\n  this.chunks = []; // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n  let status = zlib_inflate.inflateInit2(this.strm, opt.windowBits);\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n  this.header = new GZheader();\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) {\n      //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n  if (this.ended) return false;\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_inflate.inflate(strm, _flush_mode);\n    if (status === Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(strm, dictionary);\n      if (status === Z_OK) {\n        status = zlib_inflate.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 && status === Z_STREAM_END && strm.state.wrap > 0 && data[strm.next_in] !== 0) {\n      zlib_inflate.inflateReset(strm);\n      status = zlib_inflate.inflate(strm, _flush_mode);\n    }\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n        if (this.options.to === 'string') {\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n          this.onData(utf8str);\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = zlib_inflate.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n    if (strm.avail_in === 0) break;\n  }\n  return true;\n};\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  const inflator = new Inflate(options);\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || msg[inflator.err];\n  return inflator.result;\n}\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\nmodule.exports.Inflate = Inflate;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateRaw = inflateRaw;\nmodule.exports.ungzip = inflate;\nmodule.exports.constants = require('./zlib/constants');","map":{"version":3,"names":["zlib_inflate","require","utils","strings","msg","ZStream","GZheader","toString","Object","prototype","Z_NO_FLUSH","Z_FINISH","Z_OK","Z_STREAM_END","Z_NEED_DICT","Z_STREAM_ERROR","Z_DATA_ERROR","Z_MEM_ERROR","Inflate","options","assign","chunkSize","windowBits","to","opt","raw","err","ended","chunks","strm","avail_out","status","inflateInit2","Error","header","inflateGetHeader","dictionary","string2buf","call","Uint8Array","inflateSetDictionary","push","data","flush_mode","_flush_mode","last_avail_out","input","next_in","avail_in","length","output","next_out","inflate","state","wrap","inflateReset","onEnd","next_out_utf8","utf8border","tail","utf8str","buf2string","set","subarray","onData","inflateEnd","chunk","result","join","flattenChunks","inflator","inflateRaw","module","exports","ungzip","constants"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/pako/lib/inflate.js"],"sourcesContent":["'use strict';\n\n\nconst zlib_inflate = require('./zlib/inflate');\nconst utils        = require('./utils/common');\nconst strings      = require('./utils/strings');\nconst msg          = require('./zlib/messages');\nconst ZStream      = require('./zlib/zstream');\nconst GZheader     = require('./zlib/gzheader');\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = require('./zlib/constants');\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  this.options = utils.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  let status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = zlib_inflate.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      zlib_inflate.inflateReset(strm);\n      status = zlib_inflate.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = zlib_inflate.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  const inflator = new Inflate(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || msg[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nmodule.exports.Inflate = Inflate;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateRaw = inflateRaw;\nmodule.exports.ungzip = inflate;\nmodule.exports.constants = require('./zlib/constants');\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}