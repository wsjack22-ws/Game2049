{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\nconst internal_1 = require(\"./internal\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nconst assertIsHexString = function (input) {\n  if (!(0, internal_1.isHexString)(input)) {\n    const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\nexports.assertIsHexString = assertIsHexString;\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nconst assertIsBuffer = function (input) {\n  if (!Buffer.isBuffer(input)) {\n    const msg = `This method only supports Buffer but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\nexports.assertIsBuffer = assertIsBuffer;\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nconst assertIsArray = function (input) {\n  if (!Array.isArray(input)) {\n    const msg = `This method only supports number arrays but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\nexports.assertIsArray = assertIsArray;\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nconst assertIsString = function (input) {\n  if (typeof input !== 'string') {\n    const msg = `This method only supports strings but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\nexports.assertIsString = assertIsString;","map":{"version":3,"names":["internal_1","require","assertIsHexString","input","isHexString","msg","Error","exports","assertIsBuffer","Buffer","isBuffer","assertIsArray","Array","isArray","assertIsString"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@ethereumjs/util/src/helpers.ts"],"sourcesContent":["import { isHexString } from './internal'\n\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nexport const assertIsHexString = function (input: string): void {\n  if (!isHexString(input)) {\n    const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nexport const assertIsBuffer = function (input: Buffer): void {\n  if (!Buffer.isBuffer(input)) {\n    const msg = `This method only supports Buffer but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nexport const assertIsArray = function (input: number[]): void {\n  if (!Array.isArray(input)) {\n    const msg = `This method only supports number arrays but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nexport const assertIsString = function (input: string): void {\n  if (typeof input !== 'string') {\n    const msg = `This method only supports strings but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,UAAA,GAAAC,OAAA;AAEA;;;;AAIO,MAAMC,iBAAiB,GAAG,SAAAA,CAAUC,KAAa;EACtD,IAAI,CAAC,IAAAH,UAAA,CAAAI,WAAW,EAACD,KAAK,CAAC,EAAE;IACvB,MAAME,GAAG,GAAG,oEAAoEF,KAAK,EAAE;IACvF,MAAM,IAAIG,KAAK,CAACD,GAAG,CAAC;;AAExB,CAAC;AALYE,OAAA,CAAAL,iBAAiB,GAAAA,iBAAA;AAO9B;;;;AAIO,MAAMM,cAAc,GAAG,SAAAA,CAAUL,KAAa;EACnD,IAAI,CAACM,MAAM,CAACC,QAAQ,CAACP,KAAK,CAAC,EAAE;IAC3B,MAAME,GAAG,GAAG,mDAAmDF,KAAK,EAAE;IACtE,MAAM,IAAIG,KAAK,CAACD,GAAG,CAAC;;AAExB,CAAC;AALYE,OAAA,CAAAC,cAAc,GAAAA,cAAA;AAO3B;;;;AAIO,MAAMG,aAAa,GAAG,SAAAA,CAAUR,KAAe;EACpD,IAAI,CAACS,KAAK,CAACC,OAAO,CAACV,KAAK,CAAC,EAAE;IACzB,MAAME,GAAG,GAAG,0DAA0DF,KAAK,EAAE;IAC7E,MAAM,IAAIG,KAAK,CAACD,GAAG,CAAC;;AAExB,CAAC;AALYE,OAAA,CAAAI,aAAa,GAAAA,aAAA;AAO1B;;;;AAIO,MAAMG,cAAc,GAAG,SAAAA,CAAUX,KAAa;EACnD,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,MAAME,GAAG,GAAG,oDAAoDF,KAAK,EAAE;IACvE,MAAM,IAAIG,KAAK,CAACD,GAAG,CAAC;;AAExB,CAAC;AALYE,OAAA,CAAAO,cAAc,GAAAA,cAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}