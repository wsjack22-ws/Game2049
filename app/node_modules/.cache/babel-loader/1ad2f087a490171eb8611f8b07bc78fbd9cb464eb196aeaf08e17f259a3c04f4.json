{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BorshAccountsCoder = exports.ACCOUNT_DISCRIMINATOR_SIZE = void 0;\nvar bs58_1 = __importDefault(require(\"bs58\"));\nvar buffer_1 = require(\"buffer\");\nvar camelcase_1 = __importDefault(require(\"camelcase\"));\nvar js_sha256_1 = require(\"js-sha256\");\nvar idl_js_1 = require(\"./idl.js\");\nvar common_js_1 = require(\"../common.js\");\n/**\n * Number of bytes of the account discriminator.\n */\nexports.ACCOUNT_DISCRIMINATOR_SIZE = 8;\n/**\n * Encodes and decodes account objects.\n */\nvar BorshAccountsCoder = /*#__PURE__*/function () {\n  function BorshAccountsCoder(idl) {\n    _classCallCheck(this, BorshAccountsCoder);\n    if (idl.accounts === undefined) {\n      this.accountLayouts = new Map();\n      return;\n    }\n    var layouts = idl.accounts.map(function (acc) {\n      return [acc.name, idl_js_1.IdlCoder.typeDefLayout(acc, idl.types)];\n    });\n    this.accountLayouts = new Map(layouts);\n    this.idl = idl;\n  }\n  _createClass(BorshAccountsCoder, [{\n    key: \"encode\",\n    value: function () {\n      var _encode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(accountName, account) {\n        var buffer, layout, len, accountData, discriminator;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              buffer = buffer_1.Buffer.alloc(1000); // TODO: use a tighter buffer.\n              layout = this.accountLayouts.get(accountName);\n              if (layout) {\n                _context.next = 4;\n                break;\n              }\n              throw new Error(\"Unknown account: \".concat(accountName));\n            case 4:\n              len = layout.encode(account, buffer);\n              accountData = buffer.slice(0, len);\n              discriminator = BorshAccountsCoder.accountDiscriminator(accountName);\n              return _context.abrupt(\"return\", buffer_1.Buffer.concat([discriminator, accountData]));\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function encode(_x, _x2) {\n        return _encode.apply(this, arguments);\n      }\n      return encode;\n    }()\n  }, {\n    key: \"decode\",\n    value: function decode(accountName, data) {\n      // Assert the account discriminator is correct.\n      var discriminator = BorshAccountsCoder.accountDiscriminator(accountName);\n      if (discriminator.compare(data.slice(0, 8))) {\n        throw new Error(\"Invalid account discriminator\");\n      }\n      return this.decodeUnchecked(accountName, data);\n    }\n  }, {\n    key: \"decodeUnchecked\",\n    value: function decodeUnchecked(accountName, ix) {\n      // Chop off the discriminator before decoding.\n      var data = ix.slice(exports.ACCOUNT_DISCRIMINATOR_SIZE);\n      var layout = this.accountLayouts.get(accountName);\n      if (!layout) {\n        throw new Error(\"Unknown account: \".concat(accountName));\n      }\n      return layout.decode(data);\n    }\n  }, {\n    key: \"memcmp\",\n    value: function memcmp(accountName, appendData) {\n      var discriminator = BorshAccountsCoder.accountDiscriminator(accountName);\n      return {\n        offset: 0,\n        bytes: bs58_1.default.encode(appendData ? buffer_1.Buffer.concat([discriminator, appendData]) : discriminator)\n      };\n    }\n  }, {\n    key: \"size\",\n    value: function size(idlAccount) {\n      var _a;\n      return exports.ACCOUNT_DISCRIMINATOR_SIZE + ((_a = (0, common_js_1.accountSize)(this.idl, idlAccount)) !== null && _a !== void 0 ? _a : 0);\n    }\n    /**\n     * Calculates and returns a unique 8 byte discriminator prepended to all anchor accounts.\n     *\n     * @param name The name of the account to calculate the discriminator.\n     */\n  }], [{\n    key: \"accountDiscriminator\",\n    value: function accountDiscriminator(name) {\n      return buffer_1.Buffer.from(js_sha256_1.sha256.digest(\"account:\".concat((0, camelcase_1.default)(name, {\n        pascalCase: true\n      })))).slice(0, exports.ACCOUNT_DISCRIMINATOR_SIZE);\n    }\n  }]);\n  return BorshAccountsCoder;\n}();\nexports.BorshAccountsCoder = BorshAccountsCoder;","map":{"version":3,"names":["bs58_1","__importDefault","require","buffer_1","camelcase_1","js_sha256_1","idl_js_1","common_js_1","exports","ACCOUNT_DISCRIMINATOR_SIZE","BorshAccountsCoder","idl","_classCallCheck","accounts","undefined","accountLayouts","Map","layouts","map","acc","name","IdlCoder","typeDefLayout","types","_createClass","key","value","_encode","_asyncToGenerator","_regeneratorRuntime","mark","_callee","accountName","account","buffer","layout","len","accountData","discriminator","wrap","_callee$","_context","prev","next","Buffer","alloc","get","Error","concat","encode","slice","accountDiscriminator","abrupt","stop","_x","_x2","apply","arguments","decode","data","compare","decodeUnchecked","ix","memcmp","appendData","offset","bytes","default","size","idlAccount","_a","accountSize","from","sha256","digest","pascalCase"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/coder/borsh/accounts.ts"],"sourcesContent":["import bs58 from \"bs58\";\nimport { Buffer } from \"buffer\";\nimport { Layout } from \"buffer-layout\";\nimport camelcase from \"camelcase\";\nimport { sha256 } from \"js-sha256\";\nimport { Idl, IdlTypeDef } from \"../../idl.js\";\nimport { IdlCoder } from \"./idl.js\";\nimport { AccountsCoder } from \"../index.js\";\nimport { accountSize } from \"../common.js\";\n\n/**\n * Number of bytes of the account discriminator.\n */\nexport const ACCOUNT_DISCRIMINATOR_SIZE = 8;\n\n/**\n * Encodes and decodes account objects.\n */\nexport class BorshAccountsCoder<A extends string = string>\n  implements AccountsCoder\n{\n  /**\n   * Maps account type identifier to a layout.\n   */\n  private accountLayouts: Map<A, Layout>;\n\n  /**\n   * IDL whose acconts will be coded.\n   */\n  private idl: Idl;\n\n  public constructor(idl: Idl) {\n    if (idl.accounts === undefined) {\n      this.accountLayouts = new Map();\n      return;\n    }\n    const layouts: [A, Layout][] = idl.accounts.map((acc) => {\n      return [acc.name as A, IdlCoder.typeDefLayout(acc, idl.types)];\n    });\n\n    this.accountLayouts = new Map(layouts);\n    this.idl = idl;\n  }\n\n  public async encode<T = any>(accountName: A, account: T): Promise<Buffer> {\n    const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n    const layout = this.accountLayouts.get(accountName);\n    if (!layout) {\n      throw new Error(`Unknown account: ${accountName}`);\n    }\n    const len = layout.encode(account, buffer);\n    let accountData = buffer.slice(0, len);\n    let discriminator = BorshAccountsCoder.accountDiscriminator(accountName);\n    return Buffer.concat([discriminator, accountData]);\n  }\n\n  public decode<T = any>(accountName: A, data: Buffer): T {\n    // Assert the account discriminator is correct.\n    const discriminator = BorshAccountsCoder.accountDiscriminator(accountName);\n    if (discriminator.compare(data.slice(0, 8))) {\n      throw new Error(\"Invalid account discriminator\");\n    }\n    return this.decodeUnchecked(accountName, data);\n  }\n\n  public decodeUnchecked<T = any>(accountName: A, ix: Buffer): T {\n    // Chop off the discriminator before decoding.\n    const data = ix.slice(ACCOUNT_DISCRIMINATOR_SIZE);\n    const layout = this.accountLayouts.get(accountName);\n    if (!layout) {\n      throw new Error(`Unknown account: ${accountName}`);\n    }\n    return layout.decode(data);\n  }\n\n  public memcmp(accountName: A, appendData?: Buffer): any {\n    const discriminator = BorshAccountsCoder.accountDiscriminator(accountName);\n    return {\n      offset: 0,\n      bytes: bs58.encode(\n        appendData ? Buffer.concat([discriminator, appendData]) : discriminator\n      ),\n    };\n  }\n\n  public size(idlAccount: IdlTypeDef): number {\n    return (\n      ACCOUNT_DISCRIMINATOR_SIZE + (accountSize(this.idl, idlAccount) ?? 0)\n    );\n  }\n\n  /**\n   * Calculates and returns a unique 8 byte discriminator prepended to all anchor accounts.\n   *\n   * @param name The name of the account to calculate the discriminator.\n   */\n  public static accountDiscriminator(name: string): Buffer {\n    return Buffer.from(\n      sha256.digest(`account:${camelcase(name, { pascalCase: true })}`)\n    ).slice(0, ACCOUNT_DISCRIMINATOR_SIZE);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}