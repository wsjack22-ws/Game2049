{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar _a;\nimport semver from \"semver\";\n/**\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\n *\n ** Model\n * Ledger Nano S : 0x10\n * Ledger Blue : 0x00\n * Ledger Nano X : 0x40\n *\n ** Interface support bitfield\n * Generic HID : 0x01\n * Keyboard HID : 0x02\n * U2F : 0x04\n * CCID : 0x08\n * WebUSB : 0x10\n */\nexport var IIGenericHID = 0x01;\nexport var IIKeyboardHID = 0x02;\nexport var IIU2F = 0x04;\nexport var IICCID = 0x08;\nexport var IIWebUSB = 0x10;\nexport var DeviceModelId;\n(function (DeviceModelId) {\n  DeviceModelId[\"blue\"] = \"blue\";\n  DeviceModelId[\"nanoS\"] = \"nanoS\";\n  DeviceModelId[\"nanoSP\"] = \"nanoSP\";\n  DeviceModelId[\"nanoX\"] = \"nanoX\";\n  DeviceModelId[\"nanoFTS\"] = \"nanoFTS\";\n})(DeviceModelId || (DeviceModelId = {}));\nvar devices = (_a = {}, _a[DeviceModelId.blue] = {\n  id: DeviceModelId.blue,\n  productName: \"Ledger Blue\",\n  productIdMM: 0x00,\n  legacyUsbProductId: 0x0000,\n  usbOnly: true,\n  memorySize: 480 * 1024,\n  masks: [0x31000000, 0x31010000],\n  getBlockSize: function (_firwareVersion) {\n    return 4 * 1024;\n  }\n}, _a[DeviceModelId.nanoS] = {\n  id: DeviceModelId.nanoS,\n  productName: \"Ledger Nano S\",\n  productIdMM: 0x10,\n  legacyUsbProductId: 0x0001,\n  usbOnly: true,\n  memorySize: 320 * 1024,\n  masks: [0x31100000],\n  getBlockSize: function (firmwareVersion) {\n    var _a;\n    return semver.lt((_a = semver.coerce(firmwareVersion)) !== null && _a !== void 0 ? _a : \"\", \"2.0.0\") ? 4 * 1024 : 2 * 1024;\n  }\n}, _a[DeviceModelId.nanoSP] = {\n  id: DeviceModelId.nanoSP,\n  productName: \"Ledger Nano S Plus\",\n  productIdMM: 0x50,\n  legacyUsbProductId: 0x0005,\n  usbOnly: true,\n  memorySize: 1536 * 1024,\n  masks: [0x33100000],\n  getBlockSize: function (_firmwareVersion) {\n    return 32;\n  }\n}, _a[DeviceModelId.nanoX] = {\n  id: DeviceModelId.nanoX,\n  productName: \"Ledger Nano X\",\n  productIdMM: 0x40,\n  legacyUsbProductId: 0x0004,\n  usbOnly: false,\n  memorySize: 2 * 1024 * 1024,\n  masks: [0x33000000],\n  getBlockSize: function (_firwareVersion) {\n    return 4 * 1024;\n  },\n  bluetoothSpec: [{\n    serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n    notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n    writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\",\n    writeCmdUuid: \"13d63400-2c97-0004-0003-4c6564676572\"\n  }]\n}, _a[DeviceModelId.nanoFTS] = {\n  id: DeviceModelId.nanoFTS,\n  productName: \"Ledger Nano FTS\",\n  productIdMM: 0x60,\n  legacyUsbProductId: 0x0006,\n  usbOnly: false,\n  memorySize: 2 * 1024 * 1024,\n  masks: [0x33200000],\n  getBlockSize: function (_firwareVersion) {\n    return 4 * 1024;\n  },\n  bluetoothSpec: [{\n    serviceUuid: \"13d63400-2c97-6004-0000-4c6564676572\",\n    notifyUuid: \"13d63400-2c97-6004-0001-4c6564676572\",\n    writeUuid: \"13d63400-2c97-6004-0002-4c6564676572\",\n    writeCmdUuid: \"13d63400-2c97-6004-0003-4c6564676572\"\n  }]\n}, _a);\nvar productMap = {\n  Blue: DeviceModelId.blue,\n  \"Nano S\": DeviceModelId.nanoS,\n  \"Nano S Plus\": DeviceModelId.nanoSP,\n  \"Nano X\": DeviceModelId.nanoX,\n  \"Nano FTS\": DeviceModelId.nanoFTS\n};\nvar devicesList = Object.values(devices);\n/**\n *\n */\nexport var ledgerUSBVendorId = 0x2c97;\n/**\n *\n */\nexport var getDeviceModel = function (id) {\n  var info = devices[id];\n  if (!info) throw new Error(\"device '\" + id + \"' does not exist\");\n  return info;\n};\n/**\n * Given a `targetId`, return the deviceModel associated to it,\n * based on the first two bytes.\n */\nexport var identifyTargetId = function (targetId) {\n  var deviceModel = devicesList.find(function (_a) {\n    var masks = _a.masks;\n    return masks.find(function (mask) {\n      return (targetId & 0xffff0000) === mask;\n    });\n  });\n  return deviceModel;\n};\n/**\n *\n */\nexport var identifyUSBProductId = function (usbProductId) {\n  var legacy = devicesList.find(function (d) {\n    return d.legacyUsbProductId === usbProductId;\n  });\n  if (legacy) return legacy;\n  var mm = usbProductId >> 8;\n  var deviceModel = devicesList.find(function (d) {\n    return d.productIdMM === mm;\n  });\n  return deviceModel;\n};\nexport var identifyProductName = function (productName) {\n  var deviceModel = devicesList.find(function (d) {\n    return d.id === productMap[productName];\n  });\n  return deviceModel;\n};\nvar bluetoothServices = [];\nvar serviceUuidToInfos = {};\nfor (var id in devices) {\n  var deviceModel = devices[id];\n  var bluetoothSpec = deviceModel.bluetoothSpec;\n  if (bluetoothSpec) {\n    for (var i = 0; i < bluetoothSpec.length; i++) {\n      var spec = bluetoothSpec[i];\n      bluetoothServices.push(spec.serviceUuid);\n      serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, \"\")] = __assign({\n        deviceModel: deviceModel\n      }, spec);\n    }\n  }\n}\n/**\n *\n */\nexport var getBluetoothServiceUuids = function () {\n  return bluetoothServices;\n};\n/**\n *\n */\nexport var getInfosForServiceUuid = function (uuid) {\n  return serviceUuidToInfos[uuid.toLowerCase()];\n};","map":{"version":3,"names":["semver","IIGenericHID","IIKeyboardHID","IIU2F","IICCID","IIWebUSB","DeviceModelId","devices","_a","blue","id","productName","productIdMM","legacyUsbProductId","usbOnly","memorySize","masks","getBlockSize","_firwareVersion","nanoS","firmwareVersion","lt","coerce","nanoSP","_firmwareVersion","nanoX","bluetoothSpec","serviceUuid","notifyUuid","writeUuid","writeCmdUuid","nanoFTS","productMap","Blue","devicesList","Object","values","ledgerUSBVendorId","getDeviceModel","info","Error","identifyTargetId","targetId","deviceModel","find","mask","identifyUSBProductId","usbProductId","legacy","d","mm","identifyProductName","bluetoothServices","serviceUuidToInfos","i","length","spec","push","replace","__assign","getBluetoothServiceUuids","getInfosForServiceUuid","uuid","toLowerCase"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@ledgerhq/devices/src/index.ts"],"sourcesContent":["import semver from \"semver\";\n\n/**\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\n *\n ** Model\n * Ledger Nano S : 0x10\n * Ledger Blue : 0x00\n * Ledger Nano X : 0x40\n *\n ** Interface support bitfield\n * Generic HID : 0x01\n * Keyboard HID : 0x02\n * U2F : 0x04\n * CCID : 0x08\n * WebUSB : 0x10\n */\nexport const IIGenericHID = 0x01;\nexport const IIKeyboardHID = 0x02;\nexport const IIU2F = 0x04;\nexport const IICCID = 0x08;\nexport const IIWebUSB = 0x10;\n\nexport enum DeviceModelId {\n  blue = \"blue\",\n  nanoS = \"nanoS\",\n  nanoSP = \"nanoSP\",\n  nanoX = \"nanoX\",\n  nanoFTS = \"nanoFTS\",\n}\n\nconst devices: { [key in DeviceModelId]: DeviceModel } = {\n  [DeviceModelId.blue]: {\n    id: DeviceModelId.blue,\n    productName: \"Ledger Blue\",\n    productIdMM: 0x00,\n    legacyUsbProductId: 0x0000,\n    usbOnly: true,\n    memorySize: 480 * 1024,\n    masks: [0x31000000, 0x31010000],\n    getBlockSize: (_firwareVersion: string): number => 4 * 1024,\n  },\n  [DeviceModelId.nanoS]: {\n    id: DeviceModelId.nanoS,\n    productName: \"Ledger Nano S\",\n    productIdMM: 0x10,\n    legacyUsbProductId: 0x0001,\n    usbOnly: true,\n    memorySize: 320 * 1024,\n    masks: [0x31100000],\n    getBlockSize: (firmwareVersion: string): number =>\n      semver.lt(semver.coerce(firmwareVersion) ?? \"\", \"2.0.0\")\n        ? 4 * 1024\n        : 2 * 1024,\n  },\n  [DeviceModelId.nanoSP]: {\n    id: DeviceModelId.nanoSP,\n    productName: \"Ledger Nano S Plus\",\n    productIdMM: 0x50,\n    legacyUsbProductId: 0x0005,\n    usbOnly: true,\n    memorySize: 1536 * 1024,\n    masks: [0x33100000],\n    getBlockSize: (_firmwareVersion: string): number => 32,\n  },\n  [DeviceModelId.nanoX]: {\n    id: DeviceModelId.nanoX,\n    productName: \"Ledger Nano X\",\n    productIdMM: 0x40,\n    legacyUsbProductId: 0x0004,\n    usbOnly: false,\n    memorySize: 2 * 1024 * 1024,\n    masks: [0x33000000],\n    getBlockSize: (_firwareVersion: string): number => 4 * 1024,\n    bluetoothSpec: [\n      {\n        serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n        notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n        writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\",\n        writeCmdUuid: \"13d63400-2c97-0004-0003-4c6564676572\",\n      },\n    ],\n  },\n  [DeviceModelId.nanoFTS]: {\n    id: DeviceModelId.nanoFTS,\n    productName: \"Ledger Nano FTS\",\n    productIdMM: 0x60,\n    legacyUsbProductId: 0x0006,\n    usbOnly: false,\n    memorySize: 2 * 1024 * 1024, // ← ↓ TODO Update with actual values\n    masks: [0x33200000],\n    getBlockSize: (_firwareVersion: string): number => 4 * 1024,\n    bluetoothSpec: [\n      {\n        serviceUuid: \"13d63400-2c97-6004-0000-4c6564676572\",\n        notifyUuid: \"13d63400-2c97-6004-0001-4c6564676572\",\n        writeUuid: \"13d63400-2c97-6004-0002-4c6564676572\",\n        writeCmdUuid: \"13d63400-2c97-6004-0003-4c6564676572\",\n      },\n    ],\n  },\n};\n\nconst productMap = {\n  Blue: DeviceModelId.blue,\n  \"Nano S\": DeviceModelId.nanoS,\n  \"Nano S Plus\": DeviceModelId.nanoSP,\n  \"Nano X\": DeviceModelId.nanoX,\n  \"Nano FTS\": DeviceModelId.nanoFTS,\n};\n\nconst devicesList: DeviceModel[] = Object.values(devices);\n\n/**\n *\n */\nexport const ledgerUSBVendorId = 0x2c97;\n\n/**\n *\n */\nexport const getDeviceModel = (id: DeviceModelId): DeviceModel => {\n  const info = devices[id];\n  if (!info) throw new Error(\"device '\" + id + \"' does not exist\");\n  return info;\n};\n\n/**\n * Given a `targetId`, return the deviceModel associated to it,\n * based on the first two bytes.\n */\nexport const identifyTargetId = (\n  targetId: number\n): DeviceModel | null | undefined => {\n  const deviceModel = devicesList.find(({ masks }) =>\n    masks.find((mask) => (targetId & 0xffff0000) === mask)\n  );\n\n  return deviceModel;\n};\n\n/**\n *\n */\nexport const identifyUSBProductId = (\n  usbProductId: number\n): DeviceModel | null | undefined => {\n  const legacy = devicesList.find((d) => d.legacyUsbProductId === usbProductId);\n  if (legacy) return legacy;\n  const mm = usbProductId >> 8;\n  const deviceModel = devicesList.find((d) => d.productIdMM === mm);\n  return deviceModel;\n};\n\nexport const identifyProductName = (\n  productName: string\n): DeviceModel | null | undefined => {\n  const deviceModel = devicesList.find((d) => d.id === productMap[productName]);\n  return deviceModel;\n};\n\nconst bluetoothServices: string[] = [];\nconst serviceUuidToInfos: Record<string, BluetoothInfos> = {};\n\nfor (const id in devices) {\n  const deviceModel = devices[id];\n  const { bluetoothSpec } = deviceModel;\n  if (bluetoothSpec) {\n    for (let i = 0; i < bluetoothSpec.length; i++) {\n      const spec = bluetoothSpec[i];\n      bluetoothServices.push(spec.serviceUuid);\n      serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[\n        spec.serviceUuid.replace(/-/g, \"\")\n      ] = {\n        deviceModel,\n        ...spec,\n      };\n    }\n  }\n}\n\n/**\n *\n */\nexport const getBluetoothServiceUuids = (): string[] => bluetoothServices;\n\n/**\n *\n */\nexport const getInfosForServiceUuid = (\n  uuid: string\n): BluetoothInfos | undefined => serviceUuidToInfos[uuid.toLowerCase()];\n\n/**\n *\n */\nexport interface DeviceModel {\n  id: DeviceModelId;\n  productName: string;\n  productIdMM: number;\n  legacyUsbProductId: number;\n  usbOnly: boolean;\n  memorySize: number;\n  masks: number[];\n  // blockSize: number, // THIS FIELD IS DEPRECATED, use getBlockSize\n  getBlockSize: (firmwareVersion: string) => number;\n  bluetoothSpec?: {\n    serviceUuid: string;\n    writeUuid: string;\n    writeCmdUuid: string;\n    notifyUuid: string;\n  }[];\n}\n\n/**\n *\n */\nexport interface BluetoothInfos {\n  deviceModel: DeviceModel;\n  serviceUuid: string;\n  writeUuid: string;\n  writeCmdUuid: string;\n  notifyUuid: string;\n}\n"],"mappings":";;;;;;;;;;;AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B;;;;;;;;;;;;;;;AAeA,OAAO,IAAMC,YAAY,GAAG,IAAI;AAChC,OAAO,IAAMC,aAAa,GAAG,IAAI;AACjC,OAAO,IAAMC,KAAK,GAAG,IAAI;AACzB,OAAO,IAAMC,MAAM,GAAG,IAAI;AAC1B,OAAO,IAAMC,QAAQ,GAAG,IAAI;AAE5B,WAAYC,aAMX;AAND,WAAYA,aAAa;EACvBA,aAAA,iBAAa;EACbA,aAAA,mBAAe;EACfA,aAAA,qBAAiB;EACjBA,aAAA,mBAAe;EACfA,aAAA,uBAAmB;AACrB,CAAC,EANWA,aAAa,KAAbA,aAAa;AAQzB,IAAMC,OAAO,IAAAC,EAAA,OACXA,EAAA,CAACF,aAAa,CAACG,IAAI,IAAG;EACpBC,EAAE,EAAEJ,aAAa,CAACG,IAAI;EACtBE,WAAW,EAAE,aAAa;EAC1BC,WAAW,EAAE,IAAI;EACjBC,kBAAkB,EAAE,MAAM;EAC1BC,OAAO,EAAE,IAAI;EACbC,UAAU,EAAE,GAAG,GAAG,IAAI;EACtBC,KAAK,EAAE,CAAC,UAAU,EAAE,UAAU,CAAC;EAC/BC,YAAY,EAAE,SAAAA,CAACC,eAAuB;IAAa,QAAC,GAAG,IAAI;EAAR;CACpD,EACDV,EAAA,CAACF,aAAa,CAACa,KAAK,IAAG;EACrBT,EAAE,EAAEJ,aAAa,CAACa,KAAK;EACvBR,WAAW,EAAE,eAAe;EAC5BC,WAAW,EAAE,IAAI;EACjBC,kBAAkB,EAAE,MAAM;EAC1BC,OAAO,EAAE,IAAI;EACbC,UAAU,EAAE,GAAG,GAAG,IAAI;EACtBC,KAAK,EAAE,CAAC,UAAU,CAAC;EACnBC,YAAY,EAAE,SAAAA,CAACG,eAAuB;;IACpC,OAAApB,MAAM,CAACqB,EAAE,CAAC,CAAAb,EAAA,GAAAR,MAAM,CAACsB,MAAM,CAACF,eAAe,CAAC,cAAAZ,EAAA,cAAAA,EAAA,GAAI,EAAE,EAAE,OAAO,CAAC,GACpD,CAAC,GAAG,IAAI,GACR,CAAC,GAAG,IAAI;;CACf,EACDA,EAAA,CAACF,aAAa,CAACiB,MAAM,IAAG;EACtBb,EAAE,EAAEJ,aAAa,CAACiB,MAAM;EACxBZ,WAAW,EAAE,oBAAoB;EACjCC,WAAW,EAAE,IAAI;EACjBC,kBAAkB,EAAE,MAAM;EAC1BC,OAAO,EAAE,IAAI;EACbC,UAAU,EAAE,IAAI,GAAG,IAAI;EACvBC,KAAK,EAAE,CAAC,UAAU,CAAC;EACnBC,YAAY,EAAE,SAAAA,CAACO,gBAAwB;IAAa,SAAE;EAAF;CACrD,EACDhB,EAAA,CAACF,aAAa,CAACmB,KAAK,IAAG;EACrBf,EAAE,EAAEJ,aAAa,CAACmB,KAAK;EACvBd,WAAW,EAAE,eAAe;EAC5BC,WAAW,EAAE,IAAI;EACjBC,kBAAkB,EAAE,MAAM;EAC1BC,OAAO,EAAE,KAAK;EACdC,UAAU,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI;EAC3BC,KAAK,EAAE,CAAC,UAAU,CAAC;EACnBC,YAAY,EAAE,SAAAA,CAACC,eAAuB;IAAa,QAAC,GAAG,IAAI;EAAR,CAAQ;EAC3DQ,aAAa,EAAE,CACb;IACEC,WAAW,EAAE,sCAAsC;IACnDC,UAAU,EAAE,sCAAsC;IAClDC,SAAS,EAAE,sCAAsC;IACjDC,YAAY,EAAE;GACf;CAEJ,EACDtB,EAAA,CAACF,aAAa,CAACyB,OAAO,IAAG;EACvBrB,EAAE,EAAEJ,aAAa,CAACyB,OAAO;EACzBpB,WAAW,EAAE,iBAAiB;EAC9BC,WAAW,EAAE,IAAI;EACjBC,kBAAkB,EAAE,MAAM;EAC1BC,OAAO,EAAE,KAAK;EACdC,UAAU,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI;EAC3BC,KAAK,EAAE,CAAC,UAAU,CAAC;EACnBC,YAAY,EAAE,SAAAA,CAACC,eAAuB;IAAa,QAAC,GAAG,IAAI;EAAR,CAAQ;EAC3DQ,aAAa,EAAE,CACb;IACEC,WAAW,EAAE,sCAAsC;IACnDC,UAAU,EAAE,sCAAsC;IAClDC,SAAS,EAAE,sCAAsC;IACjDC,YAAY,EAAE;GACf;CAEJ,E,GACF;AAED,IAAME,UAAU,GAAG;EACjBC,IAAI,EAAE3B,aAAa,CAACG,IAAI;EACxB,QAAQ,EAAEH,aAAa,CAACa,KAAK;EAC7B,aAAa,EAAEb,aAAa,CAACiB,MAAM;EACnC,QAAQ,EAAEjB,aAAa,CAACmB,KAAK;EAC7B,UAAU,EAAEnB,aAAa,CAACyB;CAC3B;AAED,IAAMG,WAAW,GAAkBC,MAAM,CAACC,MAAM,CAAC7B,OAAO,CAAC;AAEzD;;;AAGA,OAAO,IAAM8B,iBAAiB,GAAG,MAAM;AAEvC;;;AAGA,OAAO,IAAMC,cAAc,GAAG,SAAAA,CAAC5B,EAAiB;EAC9C,IAAM6B,IAAI,GAAGhC,OAAO,CAACG,EAAE,CAAC;EACxB,IAAI,CAAC6B,IAAI,EAAE,MAAM,IAAIC,KAAK,CAAC,UAAU,GAAG9B,EAAE,GAAG,kBAAkB,CAAC;EAChE,OAAO6B,IAAI;AACb,CAAC;AAED;;;;AAIA,OAAO,IAAME,gBAAgB,GAAG,SAAAA,CAC9BC,QAAgB;EAEhB,IAAMC,WAAW,GAAGT,WAAW,CAACU,IAAI,CAAC,UAACpC,EAAS;QAAPQ,KAAK,GAAAR,EAAA,CAAAQ,KAAA;IAC3C,OAAAA,KAAK,CAAC4B,IAAI,CAAC,UAACC,IAAI;MAAK,QAACH,QAAQ,GAAG,UAAU,MAAMG,IAAI;IAAhC,CAAgC,CAAC;EAAtD,CAAsD,CACvD;EAED,OAAOF,WAAW;AACpB,CAAC;AAED;;;AAGA,OAAO,IAAMG,oBAAoB,GAAG,SAAAA,CAClCC,YAAoB;EAEpB,IAAMC,MAAM,GAAGd,WAAW,CAACU,IAAI,CAAC,UAACK,CAAC;IAAK,OAAAA,CAAC,CAACpC,kBAAkB,KAAKkC,YAAY;EAArC,CAAqC,CAAC;EAC7E,IAAIC,MAAM,EAAE,OAAOA,MAAM;EACzB,IAAME,EAAE,GAAGH,YAAY,IAAI,CAAC;EAC5B,IAAMJ,WAAW,GAAGT,WAAW,CAACU,IAAI,CAAC,UAACK,CAAC;IAAK,OAAAA,CAAC,CAACrC,WAAW,KAAKsC,EAAE;EAApB,CAAoB,CAAC;EACjE,OAAOP,WAAW;AACpB,CAAC;AAED,OAAO,IAAMQ,mBAAmB,GAAG,SAAAA,CACjCxC,WAAmB;EAEnB,IAAMgC,WAAW,GAAGT,WAAW,CAACU,IAAI,CAAC,UAACK,CAAC;IAAK,OAAAA,CAAC,CAACvC,EAAE,KAAKsB,UAAU,CAACrB,WAAW,CAAC;EAAhC,CAAgC,CAAC;EAC7E,OAAOgC,WAAW;AACpB,CAAC;AAED,IAAMS,iBAAiB,GAAa,EAAE;AACtC,IAAMC,kBAAkB,GAAmC,EAAE;AAE7D,KAAK,IAAM3C,EAAE,IAAIH,OAAO,EAAE;EACxB,IAAMoC,WAAW,GAAGpC,OAAO,CAACG,EAAE,CAAC;EACvB,IAAAgB,aAAa,GAAKiB,WAAW,CAAAjB,aAAhB;EACrB,IAAIA,aAAa,EAAE;IACjB,KAAK,IAAI4B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG5B,aAAa,CAAC6B,MAAM,EAAED,CAAC,EAAE,EAAE;MAC7C,IAAME,IAAI,GAAG9B,aAAa,CAAC4B,CAAC,CAAC;MAC7BF,iBAAiB,CAACK,IAAI,CAACD,IAAI,CAAC7B,WAAW,CAAC;MACxC0B,kBAAkB,CAACG,IAAI,CAAC7B,WAAW,CAAC,GAAG0B,kBAAkB,CACvDG,IAAI,CAAC7B,WAAW,CAAC+B,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CACnC,GAAAC,QAAA;QACChB,WAAW,EAAAA;MAAA,GACRa,IAAI,CACR;;;;AAKP;;;AAGA,OAAO,IAAMI,wBAAwB,GAAG,SAAAA,CAAA;EAAgB,OAAAR,iBAAiB;AAAjB,CAAiB;AAEzE;;;AAGA,OAAO,IAAMS,sBAAsB,GAAG,SAAAA,CACpCC,IAAY;EACmB,OAAAT,kBAAkB,CAACS,IAAI,CAACC,WAAW,EAAE,CAAC;AAAtC,CAAsC"},"metadata":{},"sourceType":"module","externalDependencies":[]}