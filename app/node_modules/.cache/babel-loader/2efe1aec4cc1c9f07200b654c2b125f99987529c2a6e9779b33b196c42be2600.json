{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _regeneratorRuntime = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _asyncToGenerator = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.simulateTransaction = exports.getMultipleAccounts = exports.invoke = void 0;\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar common_js_1 = require(\"../utils/common.js\");\nvar common_js_2 = require(\"../program/common.js\");\nvar provider_js_1 = require(\"../provider.js\");\nvar superstruct_1 = require(\"superstruct\");\n/**\n * Sends a transaction to a program with the given accounts and instruction\n * data.\n */\nfunction invoke(_x, _x2, _x3, _x4) {\n  return _invoke.apply(this, arguments);\n}\nfunction _invoke() {\n  _invoke = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(programId, accounts, data, provider) {\n    var tx;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          programId = (0, common_js_2.translateAddress)(programId);\n          if (!provider) {\n            provider = (0, provider_js_1.getProvider)();\n          }\n          tx = new web3_js_1.Transaction();\n          tx.add(new web3_js_1.TransactionInstruction({\n            programId: programId,\n            keys: accounts !== null && accounts !== void 0 ? accounts : [],\n            data: data\n          }));\n          if (!(provider.sendAndConfirm === undefined)) {\n            _context.next = 6;\n            break;\n          }\n          throw new Error(\"This function requires 'Provider.sendAndConfirm' to be implemented.\");\n        case 6:\n          _context.next = 8;\n          return provider.sendAndConfirm(tx, []);\n        case 8:\n          return _context.abrupt(\"return\", _context.sent);\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _invoke.apply(this, arguments);\n}\nexports.invoke = invoke;\nvar GET_MULTIPLE_ACCOUNTS_LIMIT = 99;\nfunction getMultipleAccounts(_x5, _x6, _x7) {\n  return _getMultipleAccounts.apply(this, arguments);\n}\nfunction _getMultipleAccounts() {\n  _getMultipleAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(connection, publicKeys, commitment) {\n    var batches, results;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(publicKeys.length <= GET_MULTIPLE_ACCOUNTS_LIMIT)) {\n            _context2.next = 6;\n            break;\n          }\n          _context2.next = 3;\n          return getMultipleAccountsCore(connection, publicKeys, commitment);\n        case 3:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 6:\n          batches = (0, common_js_1.chunks)(publicKeys, GET_MULTIPLE_ACCOUNTS_LIMIT);\n          _context2.next = 9;\n          return Promise.all(batches.map(function (batch) {\n            return getMultipleAccountsCore(connection, batch, commitment);\n          }));\n        case 9:\n          results = _context2.sent;\n          return _context2.abrupt(\"return\", results.flat());\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _getMultipleAccounts.apply(this, arguments);\n}\nexports.getMultipleAccounts = getMultipleAccounts;\nfunction getMultipleAccountsCore(_x8, _x9, _x10) {\n  return _getMultipleAccountsCore.apply(this, arguments);\n} // copy from @solana/web3.js that has a commitment param\nfunction _getMultipleAccountsCore() {\n  _getMultipleAccountsCore = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(connection, publicKeys, commitmentOverride) {\n    var commitment, accounts;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          commitment = commitmentOverride !== null && commitmentOverride !== void 0 ? commitmentOverride : connection.commitment;\n          _context3.next = 3;\n          return connection.getMultipleAccountsInfo(publicKeys, commitment);\n        case 3:\n          accounts = _context3.sent;\n          return _context3.abrupt(\"return\", accounts.map(function (account, idx) {\n            if (account === null) {\n              return null;\n            }\n            return {\n              publicKey: publicKeys[idx],\n              account: account\n            };\n          }));\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _getMultipleAccountsCore.apply(this, arguments);\n}\nfunction simulateTransaction(_x11, _x12, _x13, _x14, _x15) {\n  return _simulateTransaction.apply(this, arguments);\n}\nfunction _simulateTransaction() {\n  _simulateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(connection, transaction, signers, commitment, includeAccounts) {\n    var message, signData, wireTransaction, encodedTransaction, config, addresses, args, unsafeRes, res, logs, traceIndent, logTrace;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          if (signers && signers.length > 0) {\n            transaction.sign.apply(transaction, _toConsumableArray(signers));\n          }\n          // @ts-expect-error\n          message = transaction._compile();\n          signData = message.serialize(); // @ts-expect-error\n          wireTransaction = transaction._serialize(signData);\n          encodedTransaction = wireTransaction.toString(\"base64\");\n          config = {\n            encoding: \"base64\",\n            commitment: commitment !== null && commitment !== void 0 ? commitment : connection.commitment\n          };\n          if (includeAccounts) {\n            addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(function (key) {\n              return key.toBase58();\n            });\n            config[\"accounts\"] = {\n              encoding: \"base64\",\n              addresses: addresses\n            };\n          }\n          if (signers) {\n            config.sigVerify = true;\n          }\n          args = [encodedTransaction, config]; // @ts-expect-error\n          _context4.next = 11;\n          return connection._rpcRequest(\"simulateTransaction\", args);\n        case 11:\n          unsafeRes = _context4.sent;\n          res = (0, superstruct_1.create)(unsafeRes, SimulatedTransactionResponseStruct);\n          if (!(\"error\" in res)) {\n            _context4.next = 16;\n            break;\n          }\n          if (\"data\" in res.error) {\n            logs = res.error.data.logs;\n            if (logs && Array.isArray(logs)) {\n              traceIndent = \"\\n    \";\n              logTrace = traceIndent + logs.join(traceIndent);\n              console.error(res.error.message, logTrace);\n            }\n          }\n          throw new web3_js_1.SendTransactionError(\"failed to simulate transaction: \" + res.error.message, logs);\n        case 16:\n          return _context4.abrupt(\"return\", res.result);\n        case 17:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _simulateTransaction.apply(this, arguments);\n}\nexports.simulateTransaction = simulateTransaction;\n// copy from @solana/web3.js\nfunction jsonRpcResult(schema) {\n  return (0, superstruct_1.coerce)(createRpcResult(schema), UnknownRpcResult, function (value) {\n    if (\"error\" in value) {\n      return value;\n    } else {\n      return _objectSpread(_objectSpread({}, value), {}, {\n        result: (0, superstruct_1.create)(value.result, schema)\n      });\n    }\n  });\n}\n// copy from @solana/web3.js\nvar UnknownRpcResult = createRpcResult((0, superstruct_1.unknown)());\n// copy from @solana/web3.js\nfunction createRpcResult(result) {\n  return (0, superstruct_1.union)([(0, superstruct_1.type)({\n    jsonrpc: (0, superstruct_1.literal)(\"2.0\"),\n    id: (0, superstruct_1.string)(),\n    result: result\n  }), (0, superstruct_1.type)({\n    jsonrpc: (0, superstruct_1.literal)(\"2.0\"),\n    id: (0, superstruct_1.string)(),\n    error: (0, superstruct_1.type)({\n      code: (0, superstruct_1.unknown)(),\n      message: (0, superstruct_1.string)(),\n      data: (0, superstruct_1.optional)((0, superstruct_1.any)())\n    })\n  })]);\n}\n// copy from @solana/web3.js\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult((0, superstruct_1.type)({\n    context: (0, superstruct_1.type)({\n      slot: (0, superstruct_1.number)()\n    }),\n    value: value\n  }));\n}\n// copy from @solana/web3.js\nvar SimulatedTransactionResponseStruct = jsonRpcResultAndContext((0, superstruct_1.type)({\n  err: (0, superstruct_1.nullable)((0, superstruct_1.union)([(0, superstruct_1.type)({}), (0, superstruct_1.string)()])),\n  logs: (0, superstruct_1.nullable)((0, superstruct_1.array)((0, superstruct_1.string)())),\n  accounts: (0, superstruct_1.optional)((0, superstruct_1.nullable)((0, superstruct_1.array)((0, superstruct_1.nullable)((0, superstruct_1.type)({\n    executable: (0, superstruct_1.boolean)(),\n    owner: (0, superstruct_1.string)(),\n    lamports: (0, superstruct_1.number)(),\n    data: (0, superstruct_1.array)((0, superstruct_1.string)()),\n    rentEpoch: (0, superstruct_1.optional)((0, superstruct_1.number)())\n  }))))),\n  unitsConsumed: (0, superstruct_1.optional)((0, superstruct_1.number)())\n}));","map":{"version":3,"names":["web3_js_1","require","common_js_1","common_js_2","provider_js_1","superstruct_1","invoke","_x","_x2","_x3","_x4","_invoke","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","programId","accounts","data","provider","tx","wrap","_callee$","_context","prev","next","translateAddress","getProvider","Transaction","add","TransactionInstruction","keys","sendAndConfirm","undefined","Error","abrupt","sent","stop","exports","GET_MULTIPLE_ACCOUNTS_LIMIT","getMultipleAccounts","_x5","_x6","_x7","_getMultipleAccounts","_callee2","connection","publicKeys","commitment","batches","results","_callee2$","_context2","length","getMultipleAccountsCore","chunks","Promise","all","map","batch","flat","_x8","_x9","_x10","_getMultipleAccountsCore","_callee3","commitmentOverride","_callee3$","_context3","getMultipleAccountsInfo","account","idx","publicKey","simulateTransaction","_x11","_x12","_x13","_x14","_x15","_simulateTransaction","_callee4","transaction","signers","includeAccounts","message","signData","wireTransaction","encodedTransaction","config","addresses","args","unsafeRes","res","logs","traceIndent","logTrace","_callee4$","_context4","sign","_toConsumableArray","_compile","serialize","_serialize","toString","encoding","Array","isArray","nonProgramIds","key","toBase58","sigVerify","_rpcRequest","create","SimulatedTransactionResponseStruct","error","join","console","SendTransactionError","result","jsonRpcResult","schema","coerce","createRpcResult","UnknownRpcResult","value","_objectSpread","unknown","union","type","jsonrpc","literal","id","string","code","optional","any","jsonRpcResultAndContext","context","slot","number","err","nullable","array","executable","boolean","owner","lamports","rentEpoch","unitsConsumed"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/utils/rpc.ts"],"sourcesContent":["import { Buffer } from \"buffer\";\nimport assert from \"assert\";\nimport {\n  AccountInfo,\n  AccountMeta,\n  Connection,\n  PublicKey,\n  TransactionSignature,\n  Transaction,\n  TransactionInstruction,\n  Commitment,\n  Signer,\n  RpcResponseAndContext,\n  SimulatedTransactionResponse,\n  SendTransactionError,\n} from \"@solana/web3.js\";\nimport { chunks } from \"../utils/common.js\";\nimport { Address, translateAddress } from \"../program/common.js\";\nimport Provider, { getProvider, Wallet } from \"../provider.js\";\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n  Struct,\n} from \"superstruct\";\n\n/**\n * Sends a transaction to a program with the given accounts and instruction\n * data.\n */\nexport async function invoke(\n  programId: Address,\n  accounts?: Array<AccountMeta>,\n  data?: Buffer,\n  provider?: Provider\n): Promise<TransactionSignature> {\n  programId = translateAddress(programId);\n  if (!provider) {\n    provider = getProvider();\n  }\n\n  const tx = new Transaction();\n  tx.add(\n    new TransactionInstruction({\n      programId,\n      keys: accounts ?? [],\n      data,\n    })\n  );\n\n  if (provider.sendAndConfirm === undefined) {\n    throw new Error(\n      \"This function requires 'Provider.sendAndConfirm' to be implemented.\"\n    );\n  }\n\n  return await provider.sendAndConfirm(tx, []);\n}\n\nconst GET_MULTIPLE_ACCOUNTS_LIMIT: number = 99;\n\nexport async function getMultipleAccounts(\n  connection: Connection,\n  publicKeys: PublicKey[],\n  commitment?: Commitment\n): Promise<\n  Array<null | { publicKey: PublicKey; account: AccountInfo<Buffer> }>\n> {\n  if (publicKeys.length <= GET_MULTIPLE_ACCOUNTS_LIMIT) {\n    return await getMultipleAccountsCore(connection, publicKeys, commitment);\n  } else {\n    const batches = chunks(publicKeys, GET_MULTIPLE_ACCOUNTS_LIMIT);\n    const results = await Promise.all<\n      Array<null | { publicKey: PublicKey; account: AccountInfo<Buffer> }>\n    >(\n      batches.map((batch) =>\n        getMultipleAccountsCore(connection, batch, commitment)\n      )\n    );\n    return results.flat();\n  }\n}\n\nasync function getMultipleAccountsCore(\n  connection: Connection,\n  publicKeys: PublicKey[],\n  commitmentOverride?: Commitment\n): Promise<\n  Array<null | { publicKey: PublicKey; account: AccountInfo<Buffer> }>\n> {\n  const commitment = commitmentOverride ?? connection.commitment;\n  const accounts = await connection.getMultipleAccountsInfo(\n    publicKeys,\n    commitment\n  );\n  return accounts.map((account, idx) => {\n    if (account === null) {\n      return null;\n    }\n    return {\n      publicKey: publicKeys[idx],\n      account,\n    };\n  });\n}\n\n// copy from @solana/web3.js that has a commitment param\nexport async function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers?: Array<Signer>,\n  commitment?: Commitment,\n  includeAccounts?: boolean | Array<PublicKey>\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  if (signers && signers.length > 0) {\n    transaction.sign(...signers);\n  }\n\n  // @ts-expect-error\n  const message = transaction._compile();\n  const signData = message.serialize();\n  // @ts-expect-error\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config: any = {\n    encoding: \"base64\",\n    commitment: commitment ?? connection.commitment,\n  };\n\n  if (includeAccounts) {\n    const addresses = (\n      Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()\n    ).map((key) => key.toBase58());\n\n    config[\"accounts\"] = {\n      encoding: \"base64\",\n      addresses,\n    };\n  }\n\n  if (signers) {\n    config.sigVerify = true;\n  }\n\n  const args = [encodedTransaction, config];\n  // @ts-expect-error\n  const unsafeRes = await connection._rpcRequest(\"simulateTransaction\", args);\n  const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n  if (\"error\" in res) {\n    let logs;\n    if (\"data\" in res.error) {\n      logs = res.error.data.logs;\n      if (logs && Array.isArray(logs)) {\n        const traceIndent = \"\\n    \";\n        const logTrace = traceIndent + logs.join(traceIndent);\n        console.error(res.error.message, logTrace);\n      }\n    }\n    throw new SendTransactionError(\n      \"failed to simulate transaction: \" + res.error.message,\n      logs\n    );\n  }\n  return res.result;\n}\n\n// copy from @solana/web3.js\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, (value) => {\n    if (\"error\" in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n// copy from @solana/web3.js\nconst UnknownRpcResult = createRpcResult(unknown());\n\n// copy from @solana/web3.js\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal(\"2.0\"),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal(\"2.0\"),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\n// copy from @solana/web3.js\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    })\n  );\n}\n\n// copy from @solana/web3.js\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            })\n          )\n        )\n      )\n    ),\n    unitsConsumed: optional(number()),\n  })\n);\n\nexport type SuccessfulTxSimulationResponse = Omit<\n  SimulatedTransactionResponse,\n  \"err\"\n>;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}