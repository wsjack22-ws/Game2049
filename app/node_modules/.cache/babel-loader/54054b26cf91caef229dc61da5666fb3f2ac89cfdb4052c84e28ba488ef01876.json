{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Program = void 0;\nconst pako_1 = require(\"pako\");\nconst provider_js_1 = require(\"../provider.js\");\nconst idl_js_1 = require(\"../idl.js\");\nconst index_js_1 = require(\"../coder/index.js\");\nconst index_js_2 = __importDefault(require(\"./namespace/index.js\"));\nconst index_js_3 = require(\"../utils/bytes/index.js\");\nconst event_js_1 = require(\"./event.js\");\nconst common_js_1 = require(\"./common.js\");\n__exportStar(require(\"./common.js\"), exports);\n__exportStar(require(\"./context.js\"), exports);\n__exportStar(require(\"./event.js\"), exports);\n__exportStar(require(\"./namespace/index.js\"), exports);\n/**\n * ## Program\n *\n * Program provides the IDL deserialized client representation of an Anchor\n * program.\n *\n * This API is the one stop shop for all things related to communicating with\n * on-chain programs. Among other things, one can send transactions, fetch\n * deserialized accounts, decode instruction data, subscribe to account\n * changes, and listen to events.\n *\n * In addition to field accessors and methods, the object provides a set of\n * dynamically generated properties, also known as namespaces, that\n * map one-to-one to program methods and accounts. These namespaces generally\n *  can be used as follows:\n *\n * ## Usage\n *\n * ```javascript\n * program.<namespace>.<program-specific-method>\n * ```\n *\n * API specifics are namespace dependent. The examples used in the documentation\n * below will refer to the two counter examples found\n * [here](https://github.com/project-serum/anchor#examples).\n */\nclass Program {\n  /**\n   * @param idl       The interface definition.\n   * @param programId The on-chain address of the program.\n   * @param provider  The network and wallet context to use. If not provided\n   *                  then uses [[getProvider]].\n   */\n  constructor(idl, programId, provider, coder) {\n    programId = (0, common_js_1.translateAddress)(programId);\n    if (!provider) {\n      provider = (0, provider_js_1.getProvider)();\n    }\n    // Fields.\n    this._idl = idl;\n    this._provider = provider;\n    this._programId = programId;\n    this._coder = coder !== null && coder !== void 0 ? coder : new index_js_1.BorshCoder(idl);\n    this._events = new event_js_1.EventManager(this._programId, provider, this._coder);\n    // Dynamic namespaces.\n    const [rpc, instruction, transaction, account, simulate, methods, state, views] = index_js_2.default.build(idl, this._coder, programId, provider);\n    this.rpc = rpc;\n    this.instruction = instruction;\n    this.transaction = transaction;\n    this.account = account;\n    this.simulate = simulate;\n    this.methods = methods;\n    this.state = state;\n    this.views = views;\n  }\n  /**\n   * Address of the program.\n   */\n  get programId() {\n    return this._programId;\n  }\n  /**\n   * IDL defining the program's interface.\n   */\n  get idl() {\n    return this._idl;\n  }\n  /**\n   * Coder for serializing requests.\n   */\n  get coder() {\n    return this._coder;\n  }\n  /**\n   * Wallet and network provider.\n   */\n  get provider() {\n    return this._provider;\n  }\n  /**\n   * Generates a Program client by fetching the IDL from the network.\n   *\n   * In order to use this method, an IDL must have been previously initialized\n   * via the anchor CLI's `anchor idl init` command.\n   *\n   * @param programId The on-chain address of the program.\n   * @param provider  The network and wallet context.\n   */\n  static async at(address, provider) {\n    const programId = (0, common_js_1.translateAddress)(address);\n    const idl = await Program.fetchIdl(programId, provider);\n    if (!idl) {\n      throw new Error(`IDL not found for program: ${address.toString()}`);\n    }\n    return new Program(idl, programId, provider);\n  }\n  /**\n   * Fetches an idl from the blockchain.\n   *\n   * In order to use this method, an IDL must have been previously initialized\n   * via the anchor CLI's `anchor idl init` command.\n   *\n   * @param programId The on-chain address of the program.\n   * @param provider  The network and wallet context.\n   */\n  static async fetchIdl(address, provider) {\n    provider = provider !== null && provider !== void 0 ? provider : (0, provider_js_1.getProvider)();\n    const programId = (0, common_js_1.translateAddress)(address);\n    const idlAddr = await (0, idl_js_1.idlAddress)(programId);\n    const accountInfo = await provider.connection.getAccountInfo(idlAddr);\n    if (!accountInfo) {\n      return null;\n    }\n    // Chop off account discriminator.\n    let idlAccount = (0, idl_js_1.decodeIdlAccount)(accountInfo.data.slice(8));\n    const inflatedIdl = (0, pako_1.inflate)(idlAccount.data);\n    return JSON.parse(index_js_3.utf8.decode(inflatedIdl));\n  }\n  /**\n   * Invokes the given callback every time the given event is emitted.\n   *\n   * @param eventName The PascalCase name of the event, provided by the IDL.\n   * @param callback  The function to invoke whenever the event is emitted from\n   *                  program logs.\n   */\n  addEventListener(eventName, callback) {\n    return this._events.addEventListener(eventName, callback);\n  }\n  /**\n   * Unsubscribes from the given eventName.\n   */\n  async removeEventListener(listener) {\n    return await this._events.removeEventListener(listener);\n  }\n}\nexports.Program = Program;","map":{"version":3,"names":["pako_1","require","provider_js_1","idl_js_1","index_js_1","index_js_2","__importDefault","index_js_3","event_js_1","common_js_1","__exportStar","exports","Program","constructor","idl","programId","provider","coder","translateAddress","getProvider","_idl","_provider","_programId","_coder","BorshCoder","_events","EventManager","rpc","instruction","transaction","account","simulate","methods","state","views","default","build","at","address","fetchIdl","Error","toString","idlAddr","idlAddress","accountInfo","connection","getAccountInfo","idlAccount","decodeIdlAccount","data","slice","inflatedIdl","inflate","JSON","parse","utf8","decode","addEventListener","eventName","callback","removeEventListener","listener"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/program/index.ts"],"sourcesContent":["import { inflate } from \"pako\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport Provider, { getProvider } from \"../provider.js\";\nimport { Idl, idlAddress, decodeIdlAccount } from \"../idl.js\";\nimport { Coder, BorshCoder } from \"../coder/index.js\";\nimport NamespaceFactory, {\n  RpcNamespace,\n  InstructionNamespace,\n  TransactionNamespace,\n  AccountNamespace,\n  StateClient,\n  SimulateNamespace,\n  MethodsNamespace,\n  ViewNamespace,\n} from \"./namespace/index.js\";\nimport { utf8 } from \"../utils/bytes/index.js\";\nimport { EventManager } from \"./event.js\";\nimport { Address, translateAddress } from \"./common.js\";\n\nexport * from \"./common.js\";\nexport * from \"./context.js\";\nexport * from \"./event.js\";\nexport * from \"./namespace/index.js\";\n\n/**\n * ## Program\n *\n * Program provides the IDL deserialized client representation of an Anchor\n * program.\n *\n * This API is the one stop shop for all things related to communicating with\n * on-chain programs. Among other things, one can send transactions, fetch\n * deserialized accounts, decode instruction data, subscribe to account\n * changes, and listen to events.\n *\n * In addition to field accessors and methods, the object provides a set of\n * dynamically generated properties, also known as namespaces, that\n * map one-to-one to program methods and accounts. These namespaces generally\n *  can be used as follows:\n *\n * ## Usage\n *\n * ```javascript\n * program.<namespace>.<program-specific-method>\n * ```\n *\n * API specifics are namespace dependent. The examples used in the documentation\n * below will refer to the two counter examples found\n * [here](https://github.com/project-serum/anchor#examples).\n */\nexport class Program<IDL extends Idl = Idl> {\n  /**\n   * Async methods to send signed transactions to *non*-state methods on the\n   * program, returning a [[TransactionSignature]].\n   *\n   * ## Usage\n   *\n   * ```javascript\n   * rpc.<method>(...args, ctx);\n   * ```\n   *\n   * ## Parameters\n   *\n   * 1. `args` - The positional arguments for the program. The type and number\n   *    of these arguments depend on the program being used.\n   * 2. `ctx`  - [[Context]] non-argument parameters to pass to the method.\n   *    Always the last parameter in the method call.\n   *\n   * ## Example\n   *\n   * To send a transaction invoking the `increment` method above,\n   *\n   * ```javascript\n   * const txSignature = await program.rpc.increment({\n   *   accounts: {\n   *     counter,\n   *     authority,\n   *   },\n   * });\n   * ```\n   * @deprecated\n   */\n  readonly rpc: RpcNamespace<IDL>;\n\n  /**\n   * The namespace provides handles to an [[AccountClient]] object for each\n   * account in the program.\n   *\n   * ## Usage\n   *\n   * ```javascript\n   * program.account.<account-client>\n   * ```\n   *\n   * ## Example\n   *\n   * To fetch a `Counter` account from the above example,\n   *\n   * ```javascript\n   * const counter = await program.account.counter.fetch(address);\n   * ```\n   *\n   * For the full API, see the [[AccountClient]] reference.\n   */\n  readonly account: AccountNamespace<IDL>;\n\n  /**\n   * The namespace provides functions to build [[TransactionInstruction]]\n   * objects for each method of a program.\n   *\n   * ## Usage\n   *\n   * ```javascript\n   * program.instruction.<method>(...args, ctx);\n   * ```\n   *\n   * ## Parameters\n   *\n   * 1. `args` - The positional arguments for the program. The type and number\n   *    of these arguments depend on the program being used.\n   * 2. `ctx`  - [[Context]] non-argument parameters to pass to the method.\n   *    Always the last parameter in the method call.\n   *\n   * ## Example\n   *\n   * To create an instruction for the `increment` method above,\n   *\n   * ```javascript\n   * const tx = await program.instruction.increment({\n   *   accounts: {\n   *     counter,\n   *   },\n   * });\n   * ```\n   * @deprecated\n   */\n  readonly instruction: InstructionNamespace<IDL>;\n\n  /**\n   * The namespace provides functions to build [[Transaction]] objects for each\n   * method of a program.\n   *\n   * ## Usage\n   *\n   * ```javascript\n   * program.transaction.<method>(...args, ctx);\n   * ```\n   *\n   * ## Parameters\n   *\n   * 1. `args` - The positional arguments for the program. The type and number\n   *    of these arguments depend on the program being used.\n   * 2. `ctx`  - [[Context]] non-argument parameters to pass to the method.\n   *    Always the last parameter in the method call.\n   *\n   * ## Example\n   *\n   * To create an instruction for the `increment` method above,\n   *\n   * ```javascript\n   * const tx = await program.transaction.increment({\n   *   accounts: {\n   *     counter,\n   *   },\n   * });\n   * ```\n   * @deprecated\n   */\n  readonly transaction: TransactionNamespace<IDL>;\n\n  /**\n   * The namespace provides functions to simulate transactions for each method\n   * of a program, returning a list of deserialized events *and* raw program\n   * logs.\n   *\n   * One can use this to read data calculated from a program on chain, by\n   * emitting an event in the program and reading the emitted event client side\n   * via the `simulate` namespace.\n   *\n   * ## simulate\n   *\n   * ```javascript\n   * program.simulate.<method>(...args, ctx);\n   * ```\n   *\n   * ## Parameters\n   *\n   * 1. `args` - The positional arguments for the program. The type and number\n   *    of these arguments depend on the program being used.\n   * 2. `ctx`  - [[Context]] non-argument parameters to pass to the method.\n   *    Always the last parameter in the method call.\n   *\n   * ## Example\n   *\n   * To simulate the `increment` method above,\n   *\n   * ```javascript\n   * const events = await program.simulate.increment({\n   *   accounts: {\n   *     counter,\n   *   },\n   * });\n   * ```\n   * @deprecated\n   */\n  readonly simulate: SimulateNamespace<IDL>;\n\n  /**\n   * A client for the program state. Similar to the base [[Program]] client,\n   * one can use this to send transactions and read accounts for the state\n   * abstraction.\n   */\n  readonly state?: StateClient<IDL>;\n\n  /**\n   * The namespace provides a builder API for all APIs on the program.\n   * This is an alternative to using namespace the other namespaces..\n   */\n  readonly methods: MethodsNamespace<IDL>;\n\n  readonly views?: ViewNamespace<IDL>;\n\n  /**\n   * Address of the program.\n   */\n  public get programId(): PublicKey {\n    return this._programId;\n  }\n  private _programId: PublicKey;\n\n  /**\n   * IDL defining the program's interface.\n   */\n  public get idl(): IDL {\n    return this._idl;\n  }\n  private _idl: IDL;\n\n  /**\n   * Coder for serializing requests.\n   */\n  public get coder(): Coder {\n    return this._coder;\n  }\n  private _coder: Coder;\n\n  /**\n   * Wallet and network provider.\n   */\n  public get provider(): Provider {\n    return this._provider;\n  }\n  private _provider: Provider;\n\n  /**\n   * Handles event subscriptions.\n   */\n  private _events: EventManager;\n\n  /**\n   * @param idl       The interface definition.\n   * @param programId The on-chain address of the program.\n   * @param provider  The network and wallet context to use. If not provided\n   *                  then uses [[getProvider]].\n   */\n  public constructor(\n    idl: IDL,\n    programId: Address,\n    provider?: Provider,\n    coder?: Coder\n  ) {\n    programId = translateAddress(programId);\n\n    if (!provider) {\n      provider = getProvider();\n    }\n\n    // Fields.\n    this._idl = idl;\n    this._provider = provider;\n    this._programId = programId;\n    this._coder = coder ?? new BorshCoder(idl);\n    this._events = new EventManager(this._programId, provider, this._coder);\n\n    // Dynamic namespaces.\n    const [\n      rpc,\n      instruction,\n      transaction,\n      account,\n      simulate,\n      methods,\n      state,\n      views,\n    ] = NamespaceFactory.build(idl, this._coder, programId, provider);\n    this.rpc = rpc;\n    this.instruction = instruction;\n    this.transaction = transaction;\n    this.account = account;\n    this.simulate = simulate;\n    this.methods = methods;\n    this.state = state;\n    this.views = views;\n  }\n\n  /**\n   * Generates a Program client by fetching the IDL from the network.\n   *\n   * In order to use this method, an IDL must have been previously initialized\n   * via the anchor CLI's `anchor idl init` command.\n   *\n   * @param programId The on-chain address of the program.\n   * @param provider  The network and wallet context.\n   */\n  public static async at<IDL extends Idl = Idl>(\n    address: Address,\n    provider?: Provider\n  ): Promise<Program<IDL>> {\n    const programId = translateAddress(address);\n\n    const idl = await Program.fetchIdl<IDL>(programId, provider);\n    if (!idl) {\n      throw new Error(`IDL not found for program: ${address.toString()}`);\n    }\n\n    return new Program(idl, programId, provider);\n  }\n\n  /**\n   * Fetches an idl from the blockchain.\n   *\n   * In order to use this method, an IDL must have been previously initialized\n   * via the anchor CLI's `anchor idl init` command.\n   *\n   * @param programId The on-chain address of the program.\n   * @param provider  The network and wallet context.\n   */\n  public static async fetchIdl<IDL extends Idl = Idl>(\n    address: Address,\n    provider?: Provider\n  ): Promise<IDL | null> {\n    provider = provider ?? getProvider();\n    const programId = translateAddress(address);\n\n    const idlAddr = await idlAddress(programId);\n    const accountInfo = await provider.connection.getAccountInfo(idlAddr);\n    if (!accountInfo) {\n      return null;\n    }\n    // Chop off account discriminator.\n    let idlAccount = decodeIdlAccount(accountInfo.data.slice(8));\n    const inflatedIdl = inflate(idlAccount.data);\n    return JSON.parse(utf8.decode(inflatedIdl));\n  }\n\n  /**\n   * Invokes the given callback every time the given event is emitted.\n   *\n   * @param eventName The PascalCase name of the event, provided by the IDL.\n   * @param callback  The function to invoke whenever the event is emitted from\n   *                  program logs.\n   */\n  public addEventListener(\n    eventName: string,\n    callback: (event: any, slot: number) => void\n  ): number {\n    return this._events.addEventListener(eventName, callback);\n  }\n\n  /**\n   * Unsubscribes from the given eventName.\n   */\n  public async removeEventListener(listener: number): Promise<void> {\n    return await this._events.removeEventListener(listener);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}