{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.providerErrors = exports.rpcErrors = void 0;\nconst classes_1 = require(\"./classes\");\nconst error_constants_1 = require(\"./error-constants\");\nconst utils_1 = require(\"./utils\");\nexports.rpcErrors = {\n  /**\n   * Get a JSON RPC 2.0 Parse (-32700) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  parse: arg => getJsonRpcError(error_constants_1.errorCodes.rpc.parse, arg),\n  /**\n   * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidRequest: arg => getJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest, arg),\n  /**\n   * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidParams: arg => getJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams, arg),\n  /**\n   * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  methodNotFound: arg => getJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound, arg),\n  /**\n   * Get a JSON RPC 2.0 Internal (-32603) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  internal: arg => getJsonRpcError(error_constants_1.errorCodes.rpc.internal, arg),\n  /**\n   * Get a JSON RPC 2.0 Server error.\n   * Permits integer error codes in the [ -32099 <= -32005 ] range.\n   * Codes -32000 through -32004 are reserved by EIP-1474.\n   *\n   * @param opts - The error options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  server: opts => {\n    if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n      throw new Error('Ethereum RPC Server errors must provide single object argument.');\n    }\n    const {\n      code\n    } = opts;\n    if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n      throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n    }\n    return getJsonRpcError(code, opts);\n  },\n  /**\n   * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidInput: arg => getJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput, arg),\n  /**\n   * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  resourceNotFound: arg => getJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound, arg),\n  /**\n   * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  resourceUnavailable: arg => getJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable, arg),\n  /**\n   * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  transactionRejected: arg => getJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected, arg),\n  /**\n   * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  methodNotSupported: arg => getJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported, arg),\n  /**\n   * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  limitExceeded: arg => getJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded, arg)\n};\nexports.providerErrors = {\n  /**\n   * Get an Ethereum Provider User Rejected Request (4001) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  userRejectedRequest: arg => {\n    return getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest, arg);\n  },\n  /**\n   * Get an Ethereum Provider Unauthorized (4100) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  unauthorized: arg => {\n    return getEthProviderError(error_constants_1.errorCodes.provider.unauthorized, arg);\n  },\n  /**\n   * Get an Ethereum Provider Unsupported Method (4200) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  unsupportedMethod: arg => {\n    return getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod, arg);\n  },\n  /**\n   * Get an Ethereum Provider Not Connected (4900) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  disconnected: arg => {\n    return getEthProviderError(error_constants_1.errorCodes.provider.disconnected, arg);\n  },\n  /**\n   * Get an Ethereum Provider Chain Not Connected (4901) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  chainDisconnected: arg => {\n    return getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected, arg);\n  },\n  /**\n   * Get a custom Ethereum Provider error.\n   *\n   * @param opts - The error options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  custom: opts => {\n    if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n      throw new Error('Ethereum Provider custom errors must provide single object argument.');\n    }\n    const {\n      code,\n      message,\n      data\n    } = opts;\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a nonempty string');\n    }\n    return new classes_1.EthereumProviderError(code, message, data);\n  }\n};\n/**\n * Get a generic JSON-RPC error class instance.\n *\n * @param code - The error code.\n * @param arg - The error message or options bag.\n * @returns An instance of the {@link JsonRpcError} class.\n */\nfunction getJsonRpcError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new classes_1.JsonRpcError(code, message ?? (0, utils_1.getMessageFromCode)(code), data);\n}\n/**\n * Get an Ethereum Provider error class instance.\n *\n * @param code - The error code.\n * @param arg - The error message or options bag.\n * @returns An instance of the {@link EthereumProviderError} class.\n */\nfunction getEthProviderError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new classes_1.EthereumProviderError(code, message ?? (0, utils_1.getMessageFromCode)(code), data);\n}\n/**\n * Get an error message and optional data from an options bag.\n *\n * @param arg - The error message or options bag.\n * @returns A tuple containing the error message and optional data.\n */\nfunction parseOpts(arg) {\n  if (arg) {\n    if (typeof arg === 'string') {\n      return [arg];\n    } else if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const {\n        message,\n        data\n      } = arg;\n      if (message && typeof message !== 'string') {\n        throw new Error('Must specify string message.');\n      }\n      return [message ?? undefined, data];\n    }\n  }\n  return [];\n}","map":{"version":3,"names":["classes_1","require","error_constants_1","utils_1","exports","rpcErrors","parse","arg","getJsonRpcError","errorCodes","rpc","invalidRequest","invalidParams","methodNotFound","internal","server","opts","Array","isArray","Error","code","Number","isInteger","invalidInput","resourceNotFound","resourceUnavailable","transactionRejected","methodNotSupported","limitExceeded","providerErrors","userRejectedRequest","getEthProviderError","provider","unauthorized","unsupportedMethod","disconnected","chainDisconnected","custom","message","data","EthereumProviderError","parseOpts","JsonRpcError","getMessageFromCode","undefined"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@metamask/rpc-errors/src/errors.ts"],"sourcesContent":["import { JsonRpcError, EthereumProviderError } from './classes';\nimport { errorCodes } from './error-constants';\nimport { DataWithOptionalCause, getMessageFromCode } from './utils';\n\ntype EthereumErrorOptions<T extends DataWithOptionalCause> = {\n  message?: string;\n  data?: T;\n};\n\ntype ServerErrorOptions<T extends DataWithOptionalCause> = {\n  code: number;\n} & EthereumErrorOptions<T>;\n\ntype CustomErrorArg<T extends DataWithOptionalCause> = ServerErrorOptions<T>;\n\ntype JsonRpcErrorsArg<T extends DataWithOptionalCause> =\n  | EthereumErrorOptions<T>\n  | string;\n\nexport const rpcErrors = {\n  /**\n   * Get a JSON RPC 2.0 Parse (-32700) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  parse: <T extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T>) =>\n    getJsonRpcError(errorCodes.rpc.parse, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidRequest: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.invalidRequest, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidParams: <T extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T>) =>\n    getJsonRpcError(errorCodes.rpc.invalidParams, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  methodNotFound: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.methodNotFound, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Internal (-32603) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  internal: <T extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T>) =>\n    getJsonRpcError(errorCodes.rpc.internal, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Server error.\n   * Permits integer error codes in the [ -32099 <= -32005 ] range.\n   * Codes -32000 through -32004 are reserved by EIP-1474.\n   *\n   * @param opts - The error options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  server: <T extends DataWithOptionalCause>(opts: ServerErrorOptions<T>) => {\n    if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n      throw new Error(\n        'Ethereum RPC Server errors must provide single object argument.',\n      );\n    }\n    const { code } = opts;\n    if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n      throw new Error(\n        '\"code\" must be an integer such that: -32099 <= code <= -32005',\n      );\n    }\n    return getJsonRpcError(code, opts);\n  },\n\n  /**\n   * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidInput: <T extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T>) =>\n    getJsonRpcError(errorCodes.rpc.invalidInput, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  resourceNotFound: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.resourceNotFound, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  resourceUnavailable: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.resourceUnavailable, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  transactionRejected: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.transactionRejected, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  methodNotSupported: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.methodNotSupported, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  limitExceeded: <T extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T>) =>\n    getJsonRpcError(errorCodes.rpc.limitExceeded, arg),\n};\n\nexport const providerErrors = {\n  /**\n   * Get an Ethereum Provider User Rejected Request (4001) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  userRejectedRequest: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.userRejectedRequest, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Unauthorized (4100) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  unauthorized: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.unauthorized, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Unsupported Method (4200) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  unsupportedMethod: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.unsupportedMethod, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Not Connected (4900) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  disconnected: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.disconnected, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Chain Not Connected (4901) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  chainDisconnected: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.chainDisconnected, arg);\n  },\n\n  /**\n   * Get a custom Ethereum Provider error.\n   *\n   * @param opts - The error options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  custom: <T extends DataWithOptionalCause>(opts: CustomErrorArg<T>) => {\n    if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n      throw new Error(\n        'Ethereum Provider custom errors must provide single object argument.',\n      );\n    }\n\n    const { code, message, data } = opts;\n\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a nonempty string');\n    }\n    return new EthereumProviderError(code, message, data);\n  },\n};\n\n/**\n * Get a generic JSON-RPC error class instance.\n *\n * @param code - The error code.\n * @param arg - The error message or options bag.\n * @returns An instance of the {@link JsonRpcError} class.\n */\nfunction getJsonRpcError<T extends DataWithOptionalCause>(\n  code: number,\n  arg?: JsonRpcErrorsArg<T>,\n): JsonRpcError<T> {\n  const [message, data] = parseOpts(arg);\n  return new JsonRpcError(code, message ?? getMessageFromCode(code), data);\n}\n\n/**\n * Get an Ethereum Provider error class instance.\n *\n * @param code - The error code.\n * @param arg - The error message or options bag.\n * @returns An instance of the {@link EthereumProviderError} class.\n */\nfunction getEthProviderError<T extends DataWithOptionalCause>(\n  code: number,\n  arg?: JsonRpcErrorsArg<T>,\n): EthereumProviderError<T> {\n  const [message, data] = parseOpts(arg);\n  return new EthereumProviderError(\n    code,\n    message ?? getMessageFromCode(code),\n    data,\n  );\n}\n\n/**\n * Get an error message and optional data from an options bag.\n *\n * @param arg - The error message or options bag.\n * @returns A tuple containing the error message and optional data.\n */\nfunction parseOpts<T extends DataWithOptionalCause>(\n  arg?: JsonRpcErrorsArg<T>,\n): [message?: string | undefined, data?: T | undefined] {\n  if (arg) {\n    if (typeof arg === 'string') {\n      return [arg];\n    } else if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const { message, data } = arg;\n\n      if (message && typeof message !== 'string') {\n        throw new Error('Must specify string message.');\n      }\n      return [message ?? undefined, data];\n    }\n  }\n\n  return [];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}