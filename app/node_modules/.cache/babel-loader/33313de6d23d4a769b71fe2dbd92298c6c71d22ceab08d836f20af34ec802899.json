{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MethodsBuilder = exports.MethodsBuilderFactory = void 0;\nconst accounts_resolver_js_1 = require(\"../accounts-resolver.js\");\nclass MethodsBuilderFactory {\n  static build(provider, programId, idlIx, ixFn, txFn, rpcFn, simulateFn, viewFn, accountNamespace) {\n    return (...args) => new MethodsBuilder(args, ixFn, txFn, rpcFn, simulateFn, viewFn, provider, programId, idlIx, accountNamespace);\n  }\n}\nexports.MethodsBuilderFactory = MethodsBuilderFactory;\nclass MethodsBuilder {\n  constructor(_args, _ixFn, _txFn, _rpcFn, _simulateFn, _viewFn, _provider, _programId, _idlIx, _accountNamespace) {\n    this._args = _args;\n    this._ixFn = _ixFn;\n    this._txFn = _txFn;\n    this._rpcFn = _rpcFn;\n    this._simulateFn = _simulateFn;\n    this._viewFn = _viewFn;\n    this._accounts = {};\n    this._remainingAccounts = [];\n    this._signers = [];\n    this._preInstructions = [];\n    this._postInstructions = [];\n    this._accountsResolver = new accounts_resolver_js_1.AccountsResolver(_args, this._accounts, _provider, _programId, _idlIx, _accountNamespace);\n  }\n  async pubkeys() {\n    await this._accountsResolver.resolve();\n    return this._accounts;\n  }\n  accounts(accounts) {\n    Object.assign(this._accounts, accounts);\n    return this;\n  }\n  signers(signers) {\n    this._signers = this._signers.concat(signers);\n    return this;\n  }\n  remainingAccounts(accounts) {\n    this._remainingAccounts = this._remainingAccounts.concat(accounts);\n    return this;\n  }\n  preInstructions(ixs) {\n    this._preInstructions = this._preInstructions.concat(ixs);\n    return this;\n  }\n  postInstructions(ixs) {\n    this._postInstructions = this._postInstructions.concat(ixs);\n    return this;\n  }\n  async rpc(options) {\n    await this._accountsResolver.resolve();\n    // @ts-ignore\n    return this._rpcFn(...this._args, {\n      accounts: this._accounts,\n      signers: this._signers,\n      remainingAccounts: this._remainingAccounts,\n      preInstructions: this._preInstructions,\n      postInstructions: this._postInstructions,\n      options: options\n    });\n  }\n  async view(options) {\n    await this._accountsResolver.resolve();\n    if (!this._viewFn) {\n      throw new Error(\"Method does not support views\");\n    }\n    // @ts-ignore\n    return this._viewFn(...this._args, {\n      accounts: this._accounts,\n      signers: this._signers,\n      remainingAccounts: this._remainingAccounts,\n      preInstructions: this._preInstructions,\n      postInstructions: this._postInstructions,\n      options: options\n    });\n  }\n  async simulate(options) {\n    await this._accountsResolver.resolve();\n    // @ts-ignore\n    return this._simulateFn(...this._args, {\n      accounts: this._accounts,\n      signers: this._signers,\n      remainingAccounts: this._remainingAccounts,\n      preInstructions: this._preInstructions,\n      postInstructions: this._postInstructions,\n      options: options\n    });\n  }\n  async instruction() {\n    await this._accountsResolver.resolve();\n    // @ts-ignore\n    return this._ixFn(...this._args, {\n      accounts: this._accounts,\n      signers: this._signers,\n      remainingAccounts: this._remainingAccounts,\n      preInstructions: this._preInstructions,\n      postInstructions: this._postInstructions\n    });\n  }\n  async transaction() {\n    await this._accountsResolver.resolve();\n    // @ts-ignore\n    return this._txFn(...this._args, {\n      accounts: this._accounts,\n      signers: this._signers,\n      remainingAccounts: this._remainingAccounts,\n      preInstructions: this._preInstructions,\n      postInstructions: this._postInstructions\n    });\n  }\n}\nexports.MethodsBuilder = MethodsBuilder;","map":{"version":3,"names":["accounts_resolver_js_1","require","MethodsBuilderFactory","build","provider","programId","idlIx","ixFn","txFn","rpcFn","simulateFn","viewFn","accountNamespace","args","MethodsBuilder","exports","constructor","_args","_ixFn","_txFn","_rpcFn","_simulateFn","_viewFn","_provider","_programId","_idlIx","_accountNamespace","_accounts","_remainingAccounts","_signers","_preInstructions","_postInstructions","_accountsResolver","AccountsResolver","pubkeys","resolve","accounts","Object","assign","signers","concat","remainingAccounts","preInstructions","ixs","postInstructions","rpc","options","view","Error","simulate","instruction","transaction"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/program/namespace/methods.ts"],"sourcesContent":["import {\n  ConfirmOptions,\n  AccountMeta,\n  Signer,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport { SimulateResponse } from \"./simulate.js\";\nimport { TransactionFn } from \"./transaction.js\";\nimport { Idl } from \"../../idl.js\";\nimport {\n  AllInstructions,\n  MethodsFn,\n  MakeMethodsNamespace,\n  InstructionAccountAddresses,\n} from \"./types.js\";\nimport { InstructionFn } from \"./instruction.js\";\nimport { RpcFn } from \"./rpc.js\";\nimport { SimulateFn } from \"./simulate.js\";\nimport { ViewFn } from \"./views.js\";\nimport Provider from \"../../provider.js\";\nimport { AccountNamespace } from \"./account.js\";\nimport { AccountsResolver } from \"../accounts-resolver.js\";\nimport { Accounts } from \"../context.js\";\n\nexport type MethodsNamespace<\n  IDL extends Idl = Idl,\n  I extends AllInstructions<IDL> = AllInstructions<IDL>\n> = MakeMethodsNamespace<IDL, I>;\n\nexport class MethodsBuilderFactory {\n  public static build<IDL extends Idl, I extends AllInstructions<IDL>>(\n    provider: Provider,\n    programId: PublicKey,\n    idlIx: AllInstructions<IDL>,\n    ixFn: InstructionFn<IDL>,\n    txFn: TransactionFn<IDL>,\n    rpcFn: RpcFn<IDL>,\n    simulateFn: SimulateFn<IDL>,\n    viewFn: ViewFn<IDL> | undefined,\n    accountNamespace: AccountNamespace<IDL>\n  ): MethodsFn<IDL, I, MethodsBuilder<IDL, I>> {\n    return (...args) =>\n      new MethodsBuilder(\n        args,\n        ixFn,\n        txFn,\n        rpcFn,\n        simulateFn,\n        viewFn,\n        provider,\n        programId,\n        idlIx,\n        accountNamespace\n      );\n  }\n}\n\nexport class MethodsBuilder<IDL extends Idl, I extends AllInstructions<IDL>> {\n  private readonly _accounts: { [name: string]: PublicKey } = {};\n  private _remainingAccounts: Array<AccountMeta> = [];\n  private _signers: Array<Signer> = [];\n  private _preInstructions: Array<TransactionInstruction> = [];\n  private _postInstructions: Array<TransactionInstruction> = [];\n  private _accountsResolver: AccountsResolver<IDL, I>;\n\n  constructor(\n    private _args: Array<any>,\n    private _ixFn: InstructionFn<IDL>,\n    private _txFn: TransactionFn<IDL>,\n    private _rpcFn: RpcFn<IDL>,\n    private _simulateFn: SimulateFn<IDL>,\n    private _viewFn: ViewFn<IDL> | undefined,\n    _provider: Provider,\n    _programId: PublicKey,\n    _idlIx: AllInstructions<IDL>,\n    _accountNamespace: AccountNamespace<IDL>\n  ) {\n    this._accountsResolver = new AccountsResolver(\n      _args,\n      this._accounts,\n      _provider,\n      _programId,\n      _idlIx,\n      _accountNamespace\n    );\n  }\n\n  public async pubkeys(): Promise<\n    Partial<InstructionAccountAddresses<IDL, I>>\n  > {\n    await this._accountsResolver.resolve();\n    return this._accounts as Partial<InstructionAccountAddresses<IDL, I>>;\n  }\n\n  public accounts(\n    accounts: Partial<Accounts<I[\"accounts\"][number]>>\n  ): MethodsBuilder<IDL, I> {\n    Object.assign(this._accounts, accounts);\n    return this;\n  }\n\n  public signers(signers: Array<Signer>): MethodsBuilder<IDL, I> {\n    this._signers = this._signers.concat(signers);\n    return this;\n  }\n\n  public remainingAccounts(\n    accounts: Array<AccountMeta>\n  ): MethodsBuilder<IDL, I> {\n    this._remainingAccounts = this._remainingAccounts.concat(accounts);\n    return this;\n  }\n\n  public preInstructions(\n    ixs: Array<TransactionInstruction>\n  ): MethodsBuilder<IDL, I> {\n    this._preInstructions = this._preInstructions.concat(ixs);\n    return this;\n  }\n\n  public postInstructions(\n    ixs: Array<TransactionInstruction>\n  ): MethodsBuilder<IDL, I> {\n    this._postInstructions = this._postInstructions.concat(ixs);\n    return this;\n  }\n\n  public async rpc(options?: ConfirmOptions): Promise<TransactionSignature> {\n    await this._accountsResolver.resolve();\n    // @ts-ignore\n    return this._rpcFn(...this._args, {\n      accounts: this._accounts,\n      signers: this._signers,\n      remainingAccounts: this._remainingAccounts,\n      preInstructions: this._preInstructions,\n      postInstructions: this._postInstructions,\n      options: options,\n    });\n  }\n\n  public async view(options?: ConfirmOptions): Promise<any> {\n    await this._accountsResolver.resolve();\n    if (!this._viewFn) {\n      throw new Error(\"Method does not support views\");\n    }\n    // @ts-ignore\n    return this._viewFn(...this._args, {\n      accounts: this._accounts,\n      signers: this._signers,\n      remainingAccounts: this._remainingAccounts,\n      preInstructions: this._preInstructions,\n      postInstructions: this._postInstructions,\n      options: options,\n    });\n  }\n\n  public async simulate(\n    options?: ConfirmOptions\n  ): Promise<SimulateResponse<any, any>> {\n    await this._accountsResolver.resolve();\n    // @ts-ignore\n    return this._simulateFn(...this._args, {\n      accounts: this._accounts,\n      signers: this._signers,\n      remainingAccounts: this._remainingAccounts,\n      preInstructions: this._preInstructions,\n      postInstructions: this._postInstructions,\n      options: options,\n    });\n  }\n\n  public async instruction(): Promise<TransactionInstruction> {\n    await this._accountsResolver.resolve();\n    // @ts-ignore\n    return this._ixFn(...this._args, {\n      accounts: this._accounts,\n      signers: this._signers,\n      remainingAccounts: this._remainingAccounts,\n      preInstructions: this._preInstructions,\n      postInstructions: this._postInstructions,\n    });\n  }\n\n  public async transaction(): Promise<Transaction> {\n    await this._accountsResolver.resolve();\n    // @ts-ignore\n    return this._txFn(...this._args, {\n      accounts: this._accounts,\n      signers: this._signers,\n      remainingAccounts: this._remainingAccounts,\n      preInstructions: this._preInstructions,\n      postInstructions: this._postInstructions,\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}