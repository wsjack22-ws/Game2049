{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\";\n// #region API Keys\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nlet sentry = null;\nconst tracingOrigins = [];\nconst tracingPaths = [];\nfunction enableSentryTracing(_sentry, _tracingOrigins, _tracingPaths) {\n  sentry = _sentry;\n  tracingOrigins.push(..._tracingOrigins);\n  tracingPaths.push(..._tracingPaths);\n}\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n}\n// #endregion\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\nasync function fetchAndTrace(url, init) {\n  let _url = null;\n  try {\n    _url = new URL(url);\n  } catch (error) {}\n  if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n    const transaction = sentry.startTransaction({\n      name: url\n    });\n    const span = transaction.startChild({\n      op: \"http\"\n    }); // This function returns a Span\n    const response = await fetch(url, init);\n    span.finish(); // Remember that only finished spans will be sent with the transaction\n    transaction.finish(); // Finishing the transaction will send it to Sentry\n    return response;\n  }\n  return fetch(url, init);\n}\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\nfunction debugLogResponse(response) {\n  log.info(`Response: ${response.status} ${response.statusText}`);\n  log.info(`Url: ${response.url}`);\n}\nfunction logTracingHeader(response) {\n  log.info(`Request tracing with traceID=${response.headers.get(\"x-web3-correlation-id\")}`);\n}\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(`Timed out in ${ms}ms`));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  return promiseTimeout(customOptions.timeout || 60000, fetchAndTrace(url, options).then(response => {\n    if (customOptions.logTracingHeader) {\n      logTracingHeader(response);\n    }\n    if (response.ok) {\n      return response.json();\n    }\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst put = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"PUT\"\n  });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\nexport { clearAPIKey, clearEmbedHost, enableSentryTracing, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, put, remove, setAPIKey, setEmbedHost, setLogLevel };","map":{"version":3,"names":["log","logLevel","getLogger","setLevel","levels","INFO","apiKey","embedHost","gatewayAuthHeader","gatewayEmbedHostHeader","sentry","tracingOrigins","tracingPaths","enableSentryTracing","_sentry","_tracingOrigins","_tracingPaths","push","setEmbedHost","embedHost_","clearEmbedHost","getEmbedHost","setAPIKey","apiKey_","clearAPIKey","getAPIKey","setLogLevel","level","fetchAndTrace","url","init","_url","URL","error","includes","origin","pathname","transaction","startTransaction","name","span","startChild","op","response","fetch","finish","getApiKeyHeaders","headers","debugLogResponse","info","status","statusText","logTracingHeader","get","promiseTimeout","ms","promise","timeout","Promise","resolve","reject","id","setTimeout","clearTimeout","Error","race","options_","arguments","length","undefined","customOptions","defaultOptions","mode","useAPIKey","_objectSpread","options","merge","method","ok","json","post","data","isUrlEncodedData","body","JSON","stringify","then","patch","put","remove","generateJsonRPCObject","parameters","jsonrpc","params","promiseRace"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@toruslabs/http-helpers/src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-throw-literal */\nimport type { SpanContext, TransactionContext } from \"@sentry/types\";\nimport merge from \"lodash.merge\";\nimport logLevel, { levels, LogLevelDesc } from \"loglevel\";\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nexport interface CustomOptions {\n  [key: string]: unknown;\n  useAPIKey?: boolean;\n  isUrlEncodedData?: boolean;\n  timeout?: number;\n  logTracingHeader?: boolean;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Data {}\n\nlet apiKey = \"torus-default\";\nlet embedHost = \"\";\n\n// #region API Keys\nexport const gatewayAuthHeader = \"x-api-key\";\nexport const gatewayEmbedHostHeader = \"x-embed-host\";\n\ninterface Sentry {\n  startTransaction(_: TransactionContext): {\n    startChild(a: SpanContext): {\n      finish(): void;\n    };\n    finish(): void;\n  };\n}\n\nlet sentry: Sentry | null = null;\nconst tracingOrigins: string[] = [];\nconst tracingPaths: string[] = [];\n\nexport function enableSentryTracing(_sentry: Sentry, _tracingOrigins: string[], _tracingPaths: string[]) {\n  sentry = _sentry;\n  tracingOrigins.push(..._tracingOrigins);\n  tracingPaths.push(..._tracingPaths);\n}\n\nexport function setEmbedHost(embedHost_: string): void {\n  embedHost = embedHost_;\n}\n\nexport function clearEmbedHost(): void {\n  embedHost = \"\";\n}\n\nexport function getEmbedHost(): string {\n  return embedHost;\n}\n\nexport function setAPIKey(apiKey_: string): void {\n  apiKey = apiKey_;\n}\n\nexport function clearAPIKey(): void {\n  apiKey = \"torus-default\";\n}\n\nexport function getAPIKey(): string {\n  return apiKey;\n}\n\n// #endregion\n\nexport function setLogLevel(level: LogLevelDesc) {\n  log.setLevel(level);\n}\n\nasync function fetchAndTrace(url: string, init: RequestInit): Promise<Response> {\n  let _url: URL | null = null;\n  try {\n    _url = new URL(url);\n  } catch (error) {}\n  if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n    const transaction = sentry.startTransaction({\n      name: url,\n    });\n    const span = transaction.startChild({\n      op: \"http\",\n    }); // This function returns a Span\n\n    const response = await fetch(url, init);\n    span.finish(); // Remember that only finished spans will be sent with the transaction\n\n    transaction.finish(); // Finishing the transaction will send it to Sentry\n\n    return response;\n  }\n\n  return fetch(url, init);\n}\nfunction getApiKeyHeaders(): Record<string, string> {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response: Response) {\n  log.info(`Response: ${response.status} ${response.statusText}`);\n  log.info(`Url: ${response.url}`);\n}\n\nfunction logTracingHeader(response: Response) {\n  log.info(`Request tracing with traceID=${response.headers.get(\"x-web3-correlation-id\")}`);\n}\n\nexport const promiseTimeout = <T>(ms: number, promise: Promise<T>): Promise<T> => {\n  const timeout = new Promise<T>((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(`Timed out in ${ms}ms`));\n    }, ms);\n  });\n  return Promise.race<T>([promise, timeout]);\n};\n\nexport const get = async <T>(url: string, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {},\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"GET\" });\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json() as Promise<T>;\n  }\n  debugLogResponse(response);\n  throw response;\n};\n\nexport const post = <T>(url: string, data: Data = {}, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    },\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"POST\" });\n\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data as string;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout<T>(\n    (customOptions.timeout as number) || 60000,\n    fetchAndTrace(url, options).then((response) => {\n      if (customOptions.logTracingHeader) {\n        logTracingHeader(response);\n      }\n      if (response.ok) {\n        return response.json() as Promise<T>;\n      }\n      debugLogResponse(response);\n      throw response;\n    })\n  );\n};\n\nexport const patch = async <T>(url: string, data: Data = {}, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    },\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"PATCH\" });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data as string;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json() as Promise<T>;\n  }\n  debugLogResponse(response);\n  throw response;\n};\n\nexport const put = async <T>(url: string, data: Data = {}, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    },\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"PUT\" });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data as string;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json() as Promise<T>;\n  }\n  debugLogResponse(response);\n  throw response;\n};\n\nexport const remove = async <T>(url: string, data: Data = {}, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    },\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"DELETE\" });\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data as string;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json() as Promise<T>;\n  }\n  debugLogResponse(response);\n  throw response;\n};\n\nexport const generateJsonRPCObject = (method: string, parameters: unknown) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters,\n});\n\nexport const promiseRace = <T>(url: string, options: RequestInit, timeout = 60000) =>\n  Promise.race([\n    get<T>(url, options),\n    new Promise<T>((resolve, reject) => {\n      setTimeout(() => {\n        reject(new Error(\"timed out\"));\n      }, timeout);\n    }),\n  ]);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}