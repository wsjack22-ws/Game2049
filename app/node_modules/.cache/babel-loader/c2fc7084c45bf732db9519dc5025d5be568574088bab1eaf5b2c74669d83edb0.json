{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport EventEmitter from \"events\";\nimport { TransportRaceCondition, TransportError, StatusCodes, getAltStatusMessage, TransportStatusError } from \"@ledgerhq/errors\";\nexport { TransportError, TransportStatusError, StatusCodes, getAltStatusMessage };\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */\nvar Transport = /** @class */function () {\n  function Transport() {\n    var _this = this;\n    this.exchangeTimeout = 30000;\n    this.unresponsiveTimeout = 15000;\n    this.deviceModel = null;\n    this._events = new EventEmitter();\n    /**\n     * wrapper on top of exchange to simplify work of the implementation.\n     * @param cla\n     * @param ins\n     * @param p1\n     * @param p2\n     * @param data\n     * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n     * @return a Promise of response buffer\n     */\n    this.send = function (cla, ins, p1, p2, data, statusList) {\n      if (data === void 0) {\n        data = Buffer.alloc(0);\n      }\n      if (statusList === void 0) {\n        statusList = [StatusCodes.OK];\n      }\n      return __awaiter(_this, void 0, void 0, function () {\n        var response, sw;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (data.length >= 256) {\n                throw new TransportError(\"data.length exceed 256 bytes limit. Got: \" + data.length, \"DataLengthTooBig\");\n              }\n              return [4 /*yield*/, this.exchange(Buffer.concat([Buffer.from([cla, ins, p1, p2]), Buffer.from([data.length]), data]))];\n            case 1:\n              response = _a.sent();\n              sw = response.readUInt16BE(response.length - 2);\n              if (!statusList.some(function (s) {\n                return s === sw;\n              })) {\n                throw new TransportStatusError(sw);\n              }\n              return [2 /*return*/, response];\n          }\n        });\n      });\n    };\n    this.exchangeAtomicImpl = function (f) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var resolveBusy, busyPromise, unresponsiveReached, timeout, res;\n        var _this = this;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (this.exchangeBusyPromise) {\n                throw new TransportRaceCondition(\"An action was already pending on the Ledger device. Please deny or reconnect.\");\n              }\n              busyPromise = new Promise(function (r) {\n                resolveBusy = r;\n              });\n              this.exchangeBusyPromise = busyPromise;\n              unresponsiveReached = false;\n              timeout = setTimeout(function () {\n                unresponsiveReached = true;\n                _this.emit(\"unresponsive\");\n              }, this.unresponsiveTimeout);\n              _a.label = 1;\n            case 1:\n              _a.trys.push([1,, 3, 4]);\n              return [4 /*yield*/, f()];\n            case 2:\n              res = _a.sent();\n              if (unresponsiveReached) {\n                this.emit(\"responsive\");\n              }\n              return [2 /*return*/, res];\n            case 3:\n              clearTimeout(timeout);\n              if (resolveBusy) resolveBusy();\n              this.exchangeBusyPromise = null;\n              return [7 /*endfinally*/];\n            case 4:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    this._appAPIlock = null;\n  }\n  /**\n   * low level api to communicate with the device\n   * This method is for implementations to implement but should not be directly called.\n   * Instead, the recommanded way is to use send() method\n   * @param apdu the data to send\n   * @return a Promise of response data\n   */\n  Transport.prototype.exchange = function (_apdu) {\n    throw new Error(\"exchange not implemented\");\n  };\n  /**\n   * set the \"scramble key\" for the next exchanges with the device.\n   * Each App can have a different scramble key and they internally will set it at instanciation.\n   * @param key the scramble key\n   */\n  Transport.prototype.setScrambleKey = function (_key) {};\n  /**\n   * close the exchange with the device.\n   * @return a Promise that ends when the transport is closed.\n   */\n  Transport.prototype.close = function () {\n    return Promise.resolve();\n  };\n  /**\n   * Listen to an event on an instance of transport.\n   * Transport implementation can have specific events. Here is the common events:\n   * * `\"disconnect\"` : triggered if Transport is disconnected\n   */\n  Transport.prototype.on = function (eventName, cb) {\n    this._events.on(eventName, cb);\n  };\n  /**\n   * Stop listening to an event on an instance of transport.\n   */\n  Transport.prototype.off = function (eventName, cb) {\n    this._events.removeListener(eventName, cb);\n  };\n  Transport.prototype.emit = function (event) {\n    var _a;\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    (_a = this._events).emit.apply(_a, __spreadArray([event], __read(args), false));\n  };\n  /**\n   * Enable or not logs of the binary exchange\n   */\n  Transport.prototype.setDebugMode = function () {\n    console.warn(\"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\");\n  };\n  /**\n   * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n   */\n  Transport.prototype.setExchangeTimeout = function (exchangeTimeout) {\n    this.exchangeTimeout = exchangeTimeout;\n  };\n  /**\n   * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n   */\n  Transport.prototype.setExchangeUnresponsiveTimeout = function (unresponsiveTimeout) {\n    this.unresponsiveTimeout = unresponsiveTimeout;\n  };\n  /**\n   * create() allows to open the first descriptor available or\n   * throw if there is none or if timeout is reached.\n   * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n   * @example\n  TransportFoo.create().then(transport => ...)\n   */\n  Transport.create = function (openTimeout, listenTimeout) {\n    var _this = this;\n    if (openTimeout === void 0) {\n      openTimeout = 3000;\n    }\n    return new Promise(function (resolve, reject) {\n      var found = false;\n      var sub = _this.listen({\n        next: function (e) {\n          found = true;\n          if (sub) sub.unsubscribe();\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          _this.open(e.descriptor, openTimeout).then(resolve, reject);\n        },\n        error: function (e) {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          reject(e);\n        },\n        complete: function () {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          if (!found) {\n            reject(new TransportError(_this.ErrorMessage_NoDeviceFound, \"NoDeviceFound\"));\n          }\n        }\n      });\n      var listenTimeoutId = listenTimeout ? setTimeout(function () {\n        sub.unsubscribe();\n        reject(new TransportError(_this.ErrorMessage_ListenTimeout, \"ListenTimeout\"));\n      }, listenTimeout) : null;\n    });\n  };\n  Transport.prototype.decorateAppAPIMethods = function (self, methods, scrambleKey) {\n    var e_1, _a;\n    try {\n      for (var methods_1 = __values(methods), methods_1_1 = methods_1.next(); !methods_1_1.done; methods_1_1 = methods_1.next()) {\n        var methodName = methods_1_1.value;\n        self[methodName] = this.decorateAppAPIMethod(methodName, self[methodName], self, scrambleKey);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (methods_1_1 && !methods_1_1.done && (_a = methods_1[\"return\"])) _a.call(methods_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  Transport.prototype.decorateAppAPIMethod = function (methodName, f, ctx, scrambleKey) {\n    var _this = this;\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return __awaiter(_this, void 0, void 0, function () {\n        var _appAPIlock;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _appAPIlock = this._appAPIlock;\n              if (_appAPIlock) {\n                return [2 /*return*/, Promise.reject(new TransportError(\"Ledger Device is busy (lock \" + _appAPIlock + \")\", \"TransportLocked\"))];\n              }\n              _a.label = 1;\n            case 1:\n              _a.trys.push([1,, 3, 4]);\n              this._appAPIlock = methodName;\n              this.setScrambleKey(scrambleKey);\n              return [4 /*yield*/, f.apply(ctx, args)];\n            case 2:\n              return [2 /*return*/, _a.sent()];\n            case 3:\n              this._appAPIlock = null;\n              return [7 /*endfinally*/];\n            case 4:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n  };\n\n  Transport.ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\n  Transport.ErrorMessage_NoDeviceFound = \"No Ledger device found\";\n  return Transport;\n}();\nexport default Transport;","map":{"version":3,"names":["EventEmitter","TransportRaceCondition","TransportError","StatusCodes","getAltStatusMessage","TransportStatusError","Transport","_this","exchangeTimeout","unresponsiveTimeout","deviceModel","_events","send","cla","ins","p1","p2","data","statusList","Buffer","alloc","OK","length","exchange","concat","from","response","_a","sent","sw","readUInt16BE","some","s","exchangeAtomicImpl","f","__awaiter","exchangeBusyPromise","busyPromise","Promise","r","resolveBusy","unresponsiveReached","timeout","setTimeout","emit","res","clearTimeout","_appAPIlock","prototype","_apdu","Error","setScrambleKey","_key","close","resolve","on","eventName","cb","off","removeListener","event","args","_i","arguments","apply","__spreadArray","__read","setDebugMode","console","warn","setExchangeTimeout","setExchangeUnresponsiveTimeout","create","openTimeout","listenTimeout","reject","found","sub","listen","next","e","unsubscribe","listenTimeoutId","open","descriptor","then","error","complete","ErrorMessage_NoDeviceFound","ErrorMessage_ListenTimeout","decorateAppAPIMethods","self","methods","scrambleKey","methods_1","__values","methods_1_1","done","methodName","value","decorateAppAPIMethod","ctx"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@ledgerhq/hw-transport/src/Transport.ts"],"sourcesContent":["import EventEmitter from \"events\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\nimport {\n  TransportRaceCondition,\n  TransportError,\n  StatusCodes,\n  getAltStatusMessage,\n  TransportStatusError,\n} from \"@ledgerhq/errors\";\nexport {\n  TransportError,\n  TransportStatusError,\n  StatusCodes,\n  getAltStatusMessage,\n};\n\n/**\n */\nexport type Subscription = {\n  unsubscribe: () => void;\n};\n\n/**\n */\nexport type Device = any; // Should be a union type of all possible Device object's shape\n\n/**\n * type: add or remove event\n * descriptor: a parameter that can be passed to open(descriptor)\n * deviceModel: device info on the model (is it a nano s, nano x, ...)\n * device: transport specific device info\n */\nexport interface DescriptorEvent<Descriptor> {\n  type: \"add\" | \"remove\";\n  descriptor: Descriptor;\n  deviceModel?: DeviceModel | null | undefined;\n  device?: Device;\n}\n\n/**\n */\nexport type Observer<Ev> = Readonly<{\n  next: (event: Ev) => unknown;\n  error: (e: any) => unknown;\n  complete: () => unknown;\n}>;\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */\n\nexport default class Transport {\n  exchangeTimeout = 30000;\n  unresponsiveTimeout = 15000;\n  deviceModel: DeviceModel | null | undefined = null;\n\n  /**\n   * Statically check if a transport is supported on the user's platform/browser.\n   */\n  static readonly isSupported: () => Promise<boolean>;\n\n  /**\n   * List once all available descriptors. For a better granularity, checkout `listen()`.\n   * @return a promise of descriptors\n   * @example\n   * TransportFoo.list().then(descriptors => ...)\n   */\n  static readonly list: () => Promise<Array<any>>;\n\n  /**\n   * Listen all device events for a given Transport. The method takes an Obverver of DescriptorEvent and returns a Subscription (according to Observable paradigm https://github.com/tc39/proposal-observable )\n   * a DescriptorEvent is a `{ descriptor, type }` object. type can be `\"add\"` or `\"remove\"` and descriptor is a value you can pass to `open(descriptor)`.\n   * each listen() call will first emit all potential device already connected and then will emit events can come over times,\n   * for instance if you plug a USB device after listen() or a bluetooth device become discoverable.\n   * @param observer is an object with a next, error and complete function (compatible with observer pattern)\n   * @return a Subscription object on which you can `.unsubscribe()` to stop listening descriptors.\n   * @example\n  const sub = TransportFoo.listen({\n  next: e => {\n    if (e.type===\"add\") {\n      sub.unsubscribe();\n      const transport = await TransportFoo.open(e.descriptor);\n      ...\n    }\n  },\n  error: error => {},\n  complete: () => {}\n  })\n   */\n  static readonly listen: (\n    observer: Observer<DescriptorEvent<any>>\n  ) => Subscription;\n\n  /**\n   * attempt to create a Transport instance with potentially a descriptor.\n   * @param descriptor: the descriptor to open the transport with.\n   * @param timeout: an optional timeout\n   * @return a Promise of Transport instance\n   * @example\n  TransportFoo.open(descriptor).then(transport => ...)\n   */\n  static readonly open: (\n    descriptor?: any,\n    timeout?: number\n  ) => Promise<Transport>;\n\n  /**\n   * low level api to communicate with the device\n   * This method is for implementations to implement but should not be directly called.\n   * Instead, the recommanded way is to use send() method\n   * @param apdu the data to send\n   * @return a Promise of response data\n   */\n  exchange(_apdu: Buffer): Promise<Buffer> {\n    throw new Error(\"exchange not implemented\");\n  }\n\n  /**\n   * set the \"scramble key\" for the next exchanges with the device.\n   * Each App can have a different scramble key and they internally will set it at instanciation.\n   * @param key the scramble key\n   */\n  setScrambleKey(_key: string) {}\n\n  /**\n   * close the exchange with the device.\n   * @return a Promise that ends when the transport is closed.\n   */\n  close(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  _events = new EventEmitter();\n\n  /**\n   * Listen to an event on an instance of transport.\n   * Transport implementation can have specific events. Here is the common events:\n   * * `\"disconnect\"` : triggered if Transport is disconnected\n   */\n  on(eventName: string, cb: (...args: Array<any>) => any): void {\n    this._events.on(eventName, cb);\n  }\n\n  /**\n   * Stop listening to an event on an instance of transport.\n   */\n  off(eventName: string, cb: (...args: Array<any>) => any): void {\n    this._events.removeListener(eventName, cb);\n  }\n\n  emit(event: string, ...args: any): void {\n    this._events.emit(event, ...args);\n  }\n\n  /**\n   * Enable or not logs of the binary exchange\n   */\n  setDebugMode() {\n    console.warn(\n      \"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\"\n    );\n  }\n\n  /**\n   * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n   */\n  setExchangeTimeout(exchangeTimeout: number): void {\n    this.exchangeTimeout = exchangeTimeout;\n  }\n\n  /**\n   * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n   */\n  setExchangeUnresponsiveTimeout(unresponsiveTimeout: number): void {\n    this.unresponsiveTimeout = unresponsiveTimeout;\n  }\n\n  /**\n   * wrapper on top of exchange to simplify work of the implementation.\n   * @param cla\n   * @param ins\n   * @param p1\n   * @param p2\n   * @param data\n   * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n   * @return a Promise of response buffer\n   */\n  send = async (\n    cla: number,\n    ins: number,\n    p1: number,\n    p2: number,\n    data: Buffer = Buffer.alloc(0),\n    statusList: Array<number> = [StatusCodes.OK]\n  ): Promise<Buffer> => {\n    if (data.length >= 256) {\n      throw new TransportError(\n        \"data.length exceed 256 bytes limit. Got: \" + data.length,\n        \"DataLengthTooBig\"\n      );\n    }\n\n    const response = await this.exchange(\n      Buffer.concat([\n        Buffer.from([cla, ins, p1, p2]),\n        Buffer.from([data.length]),\n        data,\n      ])\n    );\n    const sw = response.readUInt16BE(response.length - 2);\n\n    if (!statusList.some((s) => s === sw)) {\n      throw new TransportStatusError(sw);\n    }\n\n    return response;\n  };\n\n  /**\n   * create() allows to open the first descriptor available or\n   * throw if there is none or if timeout is reached.\n   * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n   * @example\n  TransportFoo.create().then(transport => ...)\n   */\n  static create(\n    openTimeout = 3000,\n    listenTimeout?: number\n  ): Promise<Transport> {\n    return new Promise((resolve, reject) => {\n      let found = false;\n      const sub = this.listen({\n        next: (e) => {\n          found = true;\n          if (sub) sub.unsubscribe();\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          this.open(e.descriptor, openTimeout).then(resolve, reject);\n        },\n        error: (e) => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          reject(e);\n        },\n        complete: () => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n\n          if (!found) {\n            reject(\n              new TransportError(\n                this.ErrorMessage_NoDeviceFound,\n                \"NoDeviceFound\"\n              )\n            );\n          }\n        },\n      });\n      const listenTimeoutId = listenTimeout\n        ? setTimeout(() => {\n            sub.unsubscribe();\n            reject(\n              new TransportError(\n                this.ErrorMessage_ListenTimeout,\n                \"ListenTimeout\"\n              )\n            );\n          }, listenTimeout)\n        : null;\n    });\n  }\n\n  exchangeBusyPromise: Promise<void> | null | undefined;\n  exchangeAtomicImpl = async (\n    f: () => Promise<Buffer | void>\n  ): Promise<Buffer | void> => {\n    if (this.exchangeBusyPromise) {\n      throw new TransportRaceCondition(\n        \"An action was already pending on the Ledger device. Please deny or reconnect.\"\n      );\n    }\n\n    let resolveBusy;\n    const busyPromise: Promise<void> = new Promise((r) => {\n      resolveBusy = r;\n    });\n    this.exchangeBusyPromise = busyPromise;\n    let unresponsiveReached = false;\n    const timeout = setTimeout(() => {\n      unresponsiveReached = true;\n      this.emit(\"unresponsive\");\n    }, this.unresponsiveTimeout);\n\n    try {\n      const res = await f();\n\n      if (unresponsiveReached) {\n        this.emit(\"responsive\");\n      }\n\n      return res;\n    } finally {\n      clearTimeout(timeout);\n      if (resolveBusy) resolveBusy();\n      this.exchangeBusyPromise = null;\n    }\n  };\n\n  decorateAppAPIMethods(\n    self: Record<string, any>,\n    methods: Array<string>,\n    scrambleKey: string\n  ) {\n    for (const methodName of methods) {\n      self[methodName] = this.decorateAppAPIMethod(\n        methodName,\n        self[methodName],\n        self,\n        scrambleKey\n      );\n    }\n  }\n\n  _appAPIlock: string | null = null;\n\n  decorateAppAPIMethod<R, A extends any[]>(\n    methodName: string,\n    f: (...args: A) => Promise<R>,\n    ctx: any,\n    scrambleKey: string\n  ): (...args: A) => Promise<R> {\n    return async (...args) => {\n      const { _appAPIlock } = this;\n\n      if (_appAPIlock) {\n        return Promise.reject(\n          new TransportError(\n            \"Ledger Device is busy (lock \" + _appAPIlock + \")\",\n            \"TransportLocked\"\n          )\n        );\n      }\n\n      try {\n        this._appAPIlock = methodName;\n        this.setScrambleKey(scrambleKey);\n        return await f.apply(ctx, args);\n      } finally {\n        this._appAPIlock = null;\n      }\n    };\n  }\n\n  static ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\n  static ErrorMessage_NoDeviceFound = \"No Ledger device found\";\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}