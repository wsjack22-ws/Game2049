{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst context_js_1 = require(\"../context.js\");\nconst event_js_1 = require(\"../event.js\");\nconst error_js_1 = require(\"../../error.js\");\nclass SimulateFactory {\n  static build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {\n    const simulate = async (...args) => {\n      var _a;\n      const tx = txFn(...args);\n      const [, ctx] = (0, context_js_1.splitArgsAndCtx)(idlIx, [...args]);\n      let resp = undefined;\n      if (provider.simulate === undefined) {\n        throw new Error(\"This function requires 'Provider.simulate' to be implemented.\");\n      }\n      try {\n        resp = await provider.simulate(tx, ctx.signers, (_a = ctx.options) === null || _a === void 0 ? void 0 : _a.commitment);\n      } catch (err) {\n        throw (0, error_js_1.translateError)(err, idlErrors);\n      }\n      if (resp === undefined) {\n        throw new Error(\"Unable to simulate transaction\");\n      }\n      const logs = resp.logs;\n      if (!logs) {\n        throw new Error(\"Simulated logs not found\");\n      }\n      const events = [];\n      if (idl.events) {\n        let parser = new event_js_1.EventParser(programId, coder);\n        parser.parseLogs(logs, event => {\n          events.push(event);\n        });\n      }\n      return {\n        events,\n        raw: logs\n      };\n    };\n    return simulate;\n  }\n}\nexports.default = SimulateFactory;","map":{"version":3,"names":["context_js_1","require","event_js_1","error_js_1","SimulateFactory","build","idlIx","txFn","idlErrors","provider","coder","programId","idl","simulate","args","tx","ctx","splitArgsAndCtx","resp","undefined","Error","signers","_a","options","commitment","err","translateError","logs","events","parser","EventParser","parseLogs","event","push","raw","exports","default"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/program/namespace/simulate.ts"],"sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport Provider from \"../../provider.js\";\nimport { SuccessfulTxSimulationResponse } from \"src/utils/rpc.js\";\nimport { splitArgsAndCtx } from \"../context.js\";\nimport { TransactionFn } from \"./transaction.js\";\nimport { EventParser, Event } from \"../event.js\";\nimport { Coder } from \"../../coder/index.js\";\nimport { Idl, IdlEvent } from \"../../idl.js\";\nimport { translateError } from \"../../error.js\";\nimport {\n  AllInstructions,\n  IdlTypes,\n  InstructionContextFn,\n  MakeInstructionsNamespace,\n} from \"./types\";\n\nexport default class SimulateFactory {\n  public static build<IDL extends Idl, I extends AllInstructions<IDL>>(\n    idlIx: AllInstructions<IDL>,\n    txFn: TransactionFn<IDL>,\n    idlErrors: Map<number, string>,\n    provider: Provider,\n    coder: Coder,\n    programId: PublicKey,\n    idl: IDL\n  ): SimulateFn<IDL, I> {\n    const simulate: SimulateFn<IDL> = async (...args) => {\n      const tx = txFn(...args);\n      const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n      let resp: SuccessfulTxSimulationResponse | undefined = undefined;\n      if (provider.simulate === undefined) {\n        throw new Error(\n          \"This function requires 'Provider.simulate' to be implemented.\"\n        );\n      }\n      try {\n        resp = await provider!.simulate(\n          tx,\n          ctx.signers,\n          ctx.options?.commitment\n        );\n      } catch (err) {\n        throw translateError(err, idlErrors);\n      }\n      if (resp === undefined) {\n        throw new Error(\"Unable to simulate transaction\");\n      }\n      const logs = resp.logs;\n      if (!logs) {\n        throw new Error(\"Simulated logs not found\");\n      }\n\n      const events: Event<IdlEvent, IdlTypes<IDL>>[] = [];\n      if (idl.events) {\n        let parser = new EventParser(programId, coder);\n        parser.parseLogs(logs, (event) => {\n          events.push(event);\n        });\n      }\n      return { events, raw: logs };\n    };\n\n    return simulate;\n  }\n}\n\n/**\n * The namespace provides functions to simulate transactions for each method\n * of a program, returning a list of deserialized events *and* raw program\n * logs.\n *\n * One can use this to read data calculated from a program on chain, by\n * emitting an event in the program and reading the emitted event client side\n * via the `simulate` namespace.\n *\n * ## Usage\n *\n * ```javascript\n * program.simulate.<method>(...args, ctx);\n * ```\n *\n * ## Parameters\n *\n * 1. `args` - The positional arguments for the program. The type and number\n *    of these arguments depend on the program being used.\n * 2. `ctx`  - [[Context]] non-argument parameters to pass to the method.\n *    Always the last parameter in the method call.\n *\n * ## Example\n *\n * To simulate the `increment` method above,\n *\n * ```javascript\n * const events = await program.simulate.increment({\n *   accounts: {\n *     counter,\n *   },\n * });\n * ```\n */\nexport type SimulateNamespace<\n  IDL extends Idl = Idl,\n  I extends AllInstructions<IDL> = AllInstructions<IDL>\n> = MakeInstructionsNamespace<\n  IDL,\n  I,\n  Promise<SimulateResponse<NullableEvents<IDL>, IdlTypes<IDL>>>\n>;\n\ntype NullableEvents<IDL extends Idl> = IDL[\"events\"] extends undefined\n  ? IdlEvent\n  : NonNullable<IDL[\"events\"]>[number];\n\n/**\n * SimulateFn is a single method generated from an IDL. It simulates a method\n * against a cluster configured by the provider, returning a list of all the\n * events and raw logs that were emitted during the execution of the\n * method.\n */\nexport type SimulateFn<\n  IDL extends Idl = Idl,\n  I extends AllInstructions<IDL> = AllInstructions<IDL>\n> = InstructionContextFn<\n  IDL,\n  I,\n  Promise<SimulateResponse<NullableEvents<IDL>, IdlTypes<IDL>>>\n>;\n\nexport type SimulateResponse<E extends IdlEvent, Defined> = {\n  events: readonly Event<E, Defined>[];\n  raw: readonly string[];\n};\n"],"mappings":";;;;;AAGA,MAAAA,YAAA,GAAAC,OAAA;AAEA,MAAAC,UAAA,GAAAD,OAAA;AAGA,MAAAE,UAAA,GAAAF,OAAA;AAQA,MAAqBG,eAAe;EAC3B,OAAOC,KAAKA,CACjBC,KAA2B,EAC3BC,IAAwB,EACxBC,SAA8B,EAC9BC,QAAkB,EAClBC,KAAY,EACZC,SAAoB,EACpBC,GAAQ;IAER,MAAMC,QAAQ,GAAoB,MAAAA,CAAO,GAAGC,IAAI,KAAI;;MAClD,MAAMC,EAAE,GAAGR,IAAI,CAAC,GAAGO,IAAI,CAAC;MACxB,MAAM,GAAGE,GAAG,CAAC,GAAG,IAAAhB,YAAA,CAAAiB,eAAe,EAACX,KAAK,EAAE,CAAC,GAAGQ,IAAI,CAAC,CAAC;MACjD,IAAII,IAAI,GAA+CC,SAAS;MAChE,IAAIV,QAAQ,CAACI,QAAQ,KAAKM,SAAS,EAAE;QACnC,MAAM,IAAIC,KAAK,CACb,+DAA+D,CAChE;;MAEH,IAAI;QACFF,IAAI,GAAG,MAAMT,QAAS,CAACI,QAAQ,CAC7BE,EAAE,EACFC,GAAG,CAACK,OAAO,EACX,CAAAC,EAAA,GAAAN,GAAG,CAACO,OAAO,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,UAAU,CACxB;OACF,CAAC,OAAOC,GAAG,EAAE;QACZ,MAAM,IAAAtB,UAAA,CAAAuB,cAAc,EAACD,GAAG,EAAEjB,SAAS,CAAC;;MAEtC,IAAIU,IAAI,KAAKC,SAAS,EAAE;QACtB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;;MAEnD,MAAMO,IAAI,GAAGT,IAAI,CAACS,IAAI;MACtB,IAAI,CAACA,IAAI,EAAE;QACT,MAAM,IAAIP,KAAK,CAAC,0BAA0B,CAAC;;MAG7C,MAAMQ,MAAM,GAAqC,EAAE;MACnD,IAAIhB,GAAG,CAACgB,MAAM,EAAE;QACd,IAAIC,MAAM,GAAG,IAAI3B,UAAA,CAAA4B,WAAW,CAACnB,SAAS,EAAED,KAAK,CAAC;QAC9CmB,MAAM,CAACE,SAAS,CAACJ,IAAI,EAAGK,KAAK,IAAI;UAC/BJ,MAAM,CAACK,IAAI,CAACD,KAAK,CAAC;QACpB,CAAC,CAAC;;MAEJ,OAAO;QAAEJ,MAAM;QAAEM,GAAG,EAAEP;MAAI,CAAE;IAC9B,CAAC;IAED,OAAOd,QAAQ;EACjB;;AA/CFsB,OAAA,CAAAC,OAAA,GAAAhC,eAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}