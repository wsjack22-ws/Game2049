{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst idl_1 = require(\"../../coder/borsh/idl\");\nconst base64_1 = require(\"../../utils/bytes/base64\");\nclass ViewFactory {\n  static build(programId, idlIx, simulateFn, idl) {\n    const isMut = idlIx.accounts.find(a => a.isMut);\n    const hasReturn = !!idlIx.returns;\n    if (isMut || !hasReturn) return;\n    const view = async (...args) => {\n      var _a, _b;\n      let simulationResult = await simulateFn(...args);\n      const returnPrefix = `Program return: ${programId} `;\n      let returnLog = simulationResult.raw.find(l => l.startsWith(returnPrefix));\n      if (!returnLog) {\n        throw new Error(\"View expected return log\");\n      }\n      let returnData = (0, base64_1.decode)(returnLog.slice(returnPrefix.length));\n      let returnType = idlIx.returns;\n      if (!returnType) {\n        throw new Error(\"View expected return type\");\n      }\n      const coder = idl_1.IdlCoder.fieldLayout({\n        type: returnType\n      }, Array.from([...((_a = idl.accounts) !== null && _a !== void 0 ? _a : []), ...((_b = idl.types) !== null && _b !== void 0 ? _b : [])]));\n      return coder.decode(returnData);\n    };\n    return view;\n  }\n}\nexports.default = ViewFactory;","map":{"version":3,"names":["idl_1","require","base64_1","ViewFactory","build","programId","idlIx","simulateFn","idl","isMut","accounts","find","a","hasReturn","returns","view","args","simulationResult","returnPrefix","returnLog","raw","l","startsWith","Error","returnData","decode","slice","length","returnType","coder","IdlCoder","fieldLayout","type","Array","from","_a","_b","types","exports","default"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/program/namespace/views.ts"],"sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport { Idl, IdlAccount } from \"../../idl.js\";\nimport { SimulateFn } from \"./simulate.js\";\nimport {\n  AllInstructions,\n  InstructionContextFn,\n  MakeInstructionsNamespace,\n} from \"./types\";\nimport { IdlCoder } from \"../../coder/borsh/idl\";\nimport { decode } from \"../../utils/bytes/base64\";\n\nexport default class ViewFactory {\n  public static build<IDL extends Idl, I extends AllInstructions<IDL>>(\n    programId: PublicKey,\n    idlIx: AllInstructions<IDL>,\n    simulateFn: SimulateFn<IDL>,\n    idl: IDL\n  ): ViewFn<IDL, I> | undefined {\n    const isMut = idlIx.accounts.find((a: IdlAccount) => a.isMut);\n    const hasReturn = !!idlIx.returns;\n    if (isMut || !hasReturn) return;\n\n    const view: ViewFn<IDL> = async (...args) => {\n      let simulationResult = await simulateFn(...args);\n      const returnPrefix = `Program return: ${programId} `;\n      let returnLog = simulationResult.raw.find((l) =>\n        l.startsWith(returnPrefix)\n      );\n      if (!returnLog) {\n        throw new Error(\"View expected return log\");\n      }\n      let returnData = decode(returnLog.slice(returnPrefix.length));\n      let returnType = idlIx.returns;\n      if (!returnType) {\n        throw new Error(\"View expected return type\");\n      }\n      const coder = IdlCoder.fieldLayout(\n        { type: returnType },\n        Array.from([...(idl.accounts ?? []), ...(idl.types ?? [])])\n      );\n      return coder.decode(returnData);\n    };\n    return view;\n  }\n}\n\nexport type ViewNamespace<\n  IDL extends Idl = Idl,\n  I extends AllInstructions<IDL> = AllInstructions<IDL>\n> = MakeInstructionsNamespace<IDL, I, Promise<any>>;\n\n/**\n * ViewFn is a single method generated from an IDL. It simulates a method\n * against a cluster configured by the provider, and then parses the events\n * and extracts return data from the raw logs emitted during the simulation.\n */\nexport type ViewFn<\n  IDL extends Idl = Idl,\n  I extends AllInstructions<IDL> = AllInstructions<IDL>\n> = InstructionContextFn<IDL, I, Promise<any>>;\n"],"mappings":";;;;;AAQA,MAAAA,KAAA,GAAAC,OAAA;AACA,MAAAC,QAAA,GAAAD,OAAA;AAEA,MAAqBE,WAAW;EACvB,OAAOC,KAAKA,CACjBC,SAAoB,EACpBC,KAA2B,EAC3BC,UAA2B,EAC3BC,GAAQ;IAER,MAAMC,KAAK,GAAGH,KAAK,CAACI,QAAQ,CAACC,IAAI,CAAEC,CAAa,IAAKA,CAAC,CAACH,KAAK,CAAC;IAC7D,MAAMI,SAAS,GAAG,CAAC,CAACP,KAAK,CAACQ,OAAO;IACjC,IAAIL,KAAK,IAAI,CAACI,SAAS,EAAE;IAEzB,MAAME,IAAI,GAAgB,MAAAA,CAAO,GAAGC,IAAI,KAAI;;MAC1C,IAAIC,gBAAgB,GAAG,MAAMV,UAAU,CAAC,GAAGS,IAAI,CAAC;MAChD,MAAME,YAAY,GAAG,mBAAmBb,SAAS,GAAG;MACpD,IAAIc,SAAS,GAAGF,gBAAgB,CAACG,GAAG,CAACT,IAAI,CAAEU,CAAC,IAC1CA,CAAC,CAACC,UAAU,CAACJ,YAAY,CAAC,CAC3B;MACD,IAAI,CAACC,SAAS,EAAE;QACd,MAAM,IAAII,KAAK,CAAC,0BAA0B,CAAC;;MAE7C,IAAIC,UAAU,GAAG,IAAAtB,QAAA,CAAAuB,MAAM,EAACN,SAAS,CAACO,KAAK,CAACR,YAAY,CAACS,MAAM,CAAC,CAAC;MAC7D,IAAIC,UAAU,GAAGtB,KAAK,CAACQ,OAAO;MAC9B,IAAI,CAACc,UAAU,EAAE;QACf,MAAM,IAAIL,KAAK,CAAC,2BAA2B,CAAC;;MAE9C,MAAMM,KAAK,GAAG7B,KAAA,CAAA8B,QAAQ,CAACC,WAAW,CAChC;QAAEC,IAAI,EAAEJ;MAAU,CAAE,EACpBK,KAAK,CAACC,IAAI,CAAC,CAAC,IAAI,CAAAC,EAAA,GAAA3B,GAAG,CAACE,QAAQ,cAAAyB,EAAA,cAAAA,EAAA,GAAI,EAAE,CAAC,EAAE,IAAI,CAAAC,EAAA,GAAA5B,GAAG,CAAC6B,KAAK,cAAAD,EAAA,cAAAA,EAAA,GAAI,EAAE,CAAC,CAAC,CAAC,CAC5D;MACD,OAAOP,KAAK,CAACJ,MAAM,CAACD,UAAU,CAAC;IACjC,CAAC;IACD,OAAOT,IAAI;EACb;;AAhCFuB,OAAA,CAAAC,OAAA,GAAApC,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}