{"ast":null,"code":"import camelCase from \"camelcase\";\nimport * as toml from \"toml\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Program } from \"./program\";\nimport { isBrowser } from \"./utils/common\";\nlet _populatedWorkspace = false;\n/**\n * The `workspace` namespace provides a convenience API to automatically\n * search for and deserialize [[Program]] objects defined by compiled IDLs\n * in an Anchor workspace.\n *\n * This API is for Node only.\n */\nconst workspace = new Proxy({}, {\n  get(workspaceCache, programName) {\n    if (isBrowser) {\n      console.log(\"Workspaces aren't available in the browser\");\n      return undefined;\n    }\n    const fs = require(\"fs\");\n    const process = require(\"process\");\n    if (!_populatedWorkspace) {\n      const path = require(\"path\");\n      let projectRoot = process.cwd();\n      while (!fs.existsSync(path.join(projectRoot, \"Anchor.toml\"))) {\n        const parentDir = path.dirname(projectRoot);\n        if (parentDir === projectRoot) {\n          projectRoot = undefined;\n        }\n        projectRoot = parentDir;\n      }\n      if (projectRoot === undefined) {\n        throw new Error(\"Could not find workspace root.\");\n      }\n      const idlFolder = `${projectRoot}/target/idl`;\n      if (!fs.existsSync(idlFolder)) {\n        throw new Error(`${idlFolder} doesn't exist. Did you use \"anchor build\"?`);\n      }\n      const idlMap = new Map();\n      fs.readdirSync(idlFolder).forEach(file => {\n        const filePath = `${idlFolder}/${file}`;\n        const idlStr = fs.readFileSync(filePath);\n        const idl = JSON.parse(idlStr);\n        idlMap.set(idl.name, idl);\n        const name = camelCase(idl.name, {\n          pascalCase: true\n        });\n        if (idl.metadata && idl.metadata.address) {\n          workspaceCache[name] = new Program(idl, new PublicKey(idl.metadata.address));\n        }\n      });\n      // Override the workspace programs if the user put them in the config.\n      const anchorToml = toml.parse(fs.readFileSync(path.join(projectRoot, \"Anchor.toml\"), \"utf-8\"));\n      const clusterId = anchorToml.provider.cluster;\n      if (anchorToml.programs && anchorToml.programs[clusterId]) {\n        attachWorkspaceOverride(workspaceCache, anchorToml.programs[clusterId], idlMap);\n      }\n      _populatedWorkspace = true;\n    }\n    return workspaceCache[programName];\n  }\n});\nfunction attachWorkspaceOverride(workspaceCache, overrideConfig, idlMap) {\n  Object.keys(overrideConfig).forEach(programName => {\n    const wsProgramName = camelCase(programName, {\n      pascalCase: true\n    });\n    const entry = overrideConfig[programName];\n    const overrideAddress = new PublicKey(typeof entry === \"string\" ? entry : entry.address);\n    let idl = idlMap.get(programName);\n    if (typeof entry !== \"string\" && entry.idl) {\n      idl = JSON.parse(require(\"fs\").readFileSync(entry.idl, \"utf-8\"));\n    }\n    if (!idl) {\n      throw new Error(`Error loading workspace IDL for ${programName}`);\n    }\n    workspaceCache[wsProgramName] = new Program(idl, overrideAddress);\n  });\n}\nexport default workspace;","map":{"version":3,"names":["camelCase","toml","PublicKey","Program","isBrowser","_populatedWorkspace","workspace","Proxy","get","workspaceCache","programName","console","log","undefined","fs","require","process","path","projectRoot","cwd","existsSync","join","parentDir","dirname","Error","idlFolder","idlMap","Map","readdirSync","forEach","file","filePath","idlStr","readFileSync","idl","JSON","parse","set","name","pascalCase","metadata","address","anchorToml","clusterId","provider","cluster","programs","attachWorkspaceOverride","overrideConfig","Object","keys","wsProgramName","entry","overrideAddress"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/workspace.ts"],"sourcesContent":["import camelCase from \"camelcase\";\nimport * as toml from \"toml\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Program } from \"./program\";\nimport { Idl } from \"./idl\";\nimport { isBrowser } from \"./utils/common\";\n\nlet _populatedWorkspace = false;\n\n/**\n * The `workspace` namespace provides a convenience API to automatically\n * search for and deserialize [[Program]] objects defined by compiled IDLs\n * in an Anchor workspace.\n *\n * This API is for Node only.\n */\nconst workspace = new Proxy({} as any, {\n  get(workspaceCache: { [key: string]: Program }, programName: string) {\n    if (isBrowser) {\n      console.log(\"Workspaces aren't available in the browser\");\n      return undefined;\n    }\n\n    const fs = require(\"fs\");\n    const process = require(\"process\");\n\n    if (!_populatedWorkspace) {\n      const path = require(\"path\");\n\n      let projectRoot = process.cwd();\n      while (!fs.existsSync(path.join(projectRoot, \"Anchor.toml\"))) {\n        const parentDir = path.dirname(projectRoot);\n        if (parentDir === projectRoot) {\n          projectRoot = undefined;\n        }\n        projectRoot = parentDir;\n      }\n\n      if (projectRoot === undefined) {\n        throw new Error(\"Could not find workspace root.\");\n      }\n\n      const idlFolder = `${projectRoot}/target/idl`;\n      if (!fs.existsSync(idlFolder)) {\n        throw new Error(\n          `${idlFolder} doesn't exist. Did you use \"anchor build\"?`\n        );\n      }\n\n      const idlMap = new Map<string, Idl>();\n      fs.readdirSync(idlFolder).forEach((file) => {\n        const filePath = `${idlFolder}/${file}`;\n        const idlStr = fs.readFileSync(filePath);\n        const idl = JSON.parse(idlStr);\n        idlMap.set(idl.name, idl);\n        const name = camelCase(idl.name, { pascalCase: true });\n        if (idl.metadata && idl.metadata.address) {\n          workspaceCache[name] = new Program(\n            idl,\n            new PublicKey(idl.metadata.address)\n          );\n        }\n      });\n\n      // Override the workspace programs if the user put them in the config.\n      const anchorToml = toml.parse(\n        fs.readFileSync(path.join(projectRoot, \"Anchor.toml\"), \"utf-8\")\n      );\n      const clusterId = anchorToml.provider.cluster;\n      if (anchorToml.programs && anchorToml.programs[clusterId]) {\n        attachWorkspaceOverride(\n          workspaceCache,\n          anchorToml.programs[clusterId],\n          idlMap\n        );\n      }\n\n      _populatedWorkspace = true;\n    }\n\n    return workspaceCache[programName];\n  },\n});\n\nfunction attachWorkspaceOverride(\n  workspaceCache: { [key: string]: Program },\n  overrideConfig: { [key: string]: string | { address: string; idl?: string } },\n  idlMap: Map<string, Idl>\n) {\n  Object.keys(overrideConfig).forEach((programName) => {\n    const wsProgramName = camelCase(programName, { pascalCase: true });\n    const entry = overrideConfig[programName];\n    const overrideAddress = new PublicKey(\n      typeof entry === \"string\" ? entry : entry.address\n    );\n    let idl = idlMap.get(programName);\n    if (typeof entry !== \"string\" && entry.idl) {\n      idl = JSON.parse(require(\"fs\").readFileSync(entry.idl, \"utf-8\"));\n    }\n    if (!idl) {\n      throw new Error(`Error loading workspace IDL for ${programName}`);\n    }\n    workspaceCache[wsProgramName] = new Program(idl, overrideAddress);\n  });\n}\n\nexport default workspace;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}