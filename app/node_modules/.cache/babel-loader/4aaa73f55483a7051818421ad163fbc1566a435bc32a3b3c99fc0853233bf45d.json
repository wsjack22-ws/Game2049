{"ast":null,"code":"import { splitArgsAndCtx } from \"../context\";\nimport { ProgramError } from \"../../error\";\nexport default class RpcFactory {\n  static build(idlIx, txFn, idlErrors, provider) {\n    const rpc = async (...args) => {\n      const tx = txFn(...args);\n      const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n      try {\n        const txSig = await provider.send(tx, ctx.signers, ctx.options);\n        return txSig;\n      } catch (err) {\n        console.log(\"Translating error\", err);\n        let translatedErr = ProgramError.parse(err, idlErrors);\n        if (translatedErr === null) {\n          throw err;\n        }\n        throw translatedErr;\n      }\n    };\n    return rpc;\n  }\n}","map":{"version":3,"names":["splitArgsAndCtx","ProgramError","RpcFactory","build","idlIx","txFn","idlErrors","provider","rpc","args","tx","ctx","txSig","send","signers","options","err","console","log","translatedErr","parse"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/program/namespace/rpc.ts"],"sourcesContent":["import { TransactionSignature } from \"@solana/web3.js\";\nimport Provider from \"../../provider\";\nimport { Idl } from \"../../idl\";\nimport { splitArgsAndCtx } from \"../context\";\nimport { TransactionFn } from \"./transaction\";\nimport { ProgramError } from \"../../error\";\nimport {\n  AllInstructions,\n  InstructionContextFn,\n  MakeInstructionsNamespace,\n} from \"./types\";\n\nexport default class RpcFactory {\n  public static build<IDL extends Idl, I extends AllInstructions<IDL>>(\n    idlIx: I,\n    txFn: TransactionFn<IDL, I>,\n    idlErrors: Map<number, string>,\n    provider: Provider\n  ): RpcFn {\n    const rpc: RpcFn<IDL, I> = async (...args) => {\n      const tx = txFn(...args);\n      const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n      try {\n        const txSig = await provider.send(tx, ctx.signers, ctx.options);\n        return txSig;\n      } catch (err) {\n        console.log(\"Translating error\", err);\n        let translatedErr = ProgramError.parse(err, idlErrors);\n        if (translatedErr === null) {\n          throw err;\n        }\n        throw translatedErr;\n      }\n    };\n\n    return rpc;\n  }\n}\n\n/**\n * The namespace provides async methods to send signed transactions for each\n * *non*-state method on Anchor program.\n *\n * Keys are method names, values are RPC functions returning a\n * [[TransactionInstruction]].\n *\n * ## Usage\n *\n * ```javascript\n * rpc.<method>(...args, ctx);\n * ```\n *\n * ## Parameters\n *\n * 1. `args` - The positional arguments for the program. The type and number\n *    of these arguments depend on the program being used.\n * 2. `ctx`  - [[Context]] non-argument parameters to pass to the method.\n *    Always the last parameter in the method call.\n * ```\n *\n * ## Example\n *\n * To send a transaction invoking the `increment` method above,\n *\n * ```javascript\n * const txSignature = await program.rpc.increment({\n *   accounts: {\n *     counter,\n *     authority,\n *   },\n * });\n * ```\n */\nexport type RpcNamespace<\n  IDL extends Idl = Idl,\n  I extends AllInstructions<IDL> = AllInstructions<IDL>\n> = MakeInstructionsNamespace<IDL, I, Promise<TransactionSignature>>;\n\n/**\n * RpcFn is a single RPC method generated from an IDL, sending a transaction\n * paid for and signed by the configured provider.\n */\nexport type RpcFn<\n  IDL extends Idl = Idl,\n  I extends AllInstructions<IDL> = AllInstructions<IDL>\n> = InstructionContextFn<IDL, I, Promise<TransactionSignature>>;\n"],"mappings":"AAGA,SAASA,eAAe,QAAQ,YAAY;AAE5C,SAASC,YAAY,QAAQ,aAAa;AAO1C,eAAc,MAAOC,UAAU;EACtB,OAAOC,KAAKA,CACjBC,KAAQ,EACRC,IAA2B,EAC3BC,SAA8B,EAC9BC,QAAkB;IAElB,MAAMC,GAAG,GAAkB,MAAAA,CAAO,GAAGC,IAAI,KAAI;MAC3C,MAAMC,EAAE,GAAGL,IAAI,CAAC,GAAGI,IAAI,CAAC;MACxB,MAAM,GAAGE,GAAG,CAAC,GAAGX,eAAe,CAACI,KAAK,EAAE,CAAC,GAAGK,IAAI,CAAC,CAAC;MACjD,IAAI;QACF,MAAMG,KAAK,GAAG,MAAML,QAAQ,CAACM,IAAI,CAACH,EAAE,EAAEC,GAAG,CAACG,OAAO,EAAEH,GAAG,CAACI,OAAO,CAAC;QAC/D,OAAOH,KAAK;OACb,CAAC,OAAOI,GAAG,EAAE;QACZC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,GAAG,CAAC;QACrC,IAAIG,aAAa,GAAGlB,YAAY,CAACmB,KAAK,CAACJ,GAAG,EAAEV,SAAS,CAAC;QACtD,IAAIa,aAAa,KAAK,IAAI,EAAE;UAC1B,MAAMH,GAAG;;QAEX,MAAMG,aAAa;;IAEvB,CAAC;IAED,OAAOX,GAAG;EACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}