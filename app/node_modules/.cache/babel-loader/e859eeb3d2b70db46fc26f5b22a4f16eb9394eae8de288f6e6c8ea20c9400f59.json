{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeRandomSource = void 0;\nconst wipe_1 = require(\"@stablelib/wipe\");\nclass NodeRandomSource {\n  constructor() {\n    this.isAvailable = false;\n    this.isInstantiated = false;\n    if (typeof require !== \"undefined\") {\n      const nodeCrypto = require(\"crypto\");\n      if (nodeCrypto && nodeCrypto.randomBytes) {\n        this._crypto = nodeCrypto;\n        this.isAvailable = true;\n        this.isInstantiated = true;\n      }\n    }\n  }\n  randomBytes(length) {\n    if (!this.isAvailable || !this._crypto) {\n      throw new Error(\"Node.js random byte generator is not available.\");\n    }\n    // Get random bytes (result is Buffer).\n    let buffer = this._crypto.randomBytes(length);\n    // Make sure we got the length that we requested.\n    if (buffer.length !== length) {\n      throw new Error(\"NodeRandomSource: got fewer bytes than requested\");\n    }\n    // Allocate output array.\n    const out = new Uint8Array(length);\n    // Copy bytes from buffer to output.\n    for (let i = 0; i < out.length; i++) {\n      out[i] = buffer[i];\n    }\n    // Cleanup.\n    (0, wipe_1.wipe)(buffer);\n    return out;\n  }\n}\nexports.NodeRandomSource = NodeRandomSource;","map":{"version":3,"names":["wipe_1","require","NodeRandomSource","constructor","isAvailable","isInstantiated","nodeCrypto","randomBytes","_crypto","length","Error","buffer","out","Uint8Array","i","wipe","exports"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@stablelib/random/source/node.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nimport { RandomSource } from \"./\";\nimport { wipe } from \"@stablelib/wipe\";\n\ndeclare function require(name: string): any;\n\nexport class NodeRandomSource implements RandomSource {\n    isAvailable = false;\n    isInstantiated = false;\n\n    private _crypto: { randomBytes(n: number): Uint8Array } | undefined;\n\n    constructor() {\n        if (typeof require !== \"undefined\") {\n            const nodeCrypto = require(\"crypto\");\n            if (nodeCrypto && nodeCrypto.randomBytes) {\n                this._crypto = nodeCrypto;\n                this.isAvailable = true;\n                this.isInstantiated = true;\n            }\n        }\n    }\n\n    randomBytes(length: number): Uint8Array {\n        if (!this.isAvailable || !this._crypto) {\n            throw new Error(\"Node.js random byte generator is not available.\");\n        }\n\n        // Get random bytes (result is Buffer).\n        let buffer = this._crypto.randomBytes(length);\n\n        // Make sure we got the length that we requested.\n        if (buffer.length !== length) {\n            throw new Error(\"NodeRandomSource: got fewer bytes than requested\");\n        }\n\n        // Allocate output array.\n        const out = new Uint8Array(length);\n\n        // Copy bytes from buffer to output.\n        for (let i = 0; i < out.length; i++) {\n            out[i] = buffer[i];\n        }\n\n        // Cleanup.\n        wipe(buffer);\n\n        return out;\n    }\n}\n"],"mappings":";;AAAA;AACA;;;;;AAGA,MAAAA,MAAA,GAAAC,OAAA;AAIA,MAAaC,gBAAgB;EAMzBC,YAAA;IALA,KAAAC,WAAW,GAAG,KAAK;IACnB,KAAAC,cAAc,GAAG,KAAK;IAKlB,IAAI,OAAOJ,OAAO,KAAK,WAAW,EAAE;MAChC,MAAMK,UAAU,GAAGL,OAAO,CAAC,QAAQ,CAAC;MACpC,IAAIK,UAAU,IAAIA,UAAU,CAACC,WAAW,EAAE;QACtC,IAAI,CAACC,OAAO,GAAGF,UAAU;QACzB,IAAI,CAACF,WAAW,GAAG,IAAI;QACvB,IAAI,CAACC,cAAc,GAAG,IAAI;;;EAGtC;EAEAE,WAAWA,CAACE,MAAc;IACtB,IAAI,CAAC,IAAI,CAACL,WAAW,IAAI,CAAC,IAAI,CAACI,OAAO,EAAE;MACpC,MAAM,IAAIE,KAAK,CAAC,iDAAiD,CAAC;;IAGtE;IACA,IAAIC,MAAM,GAAG,IAAI,CAACH,OAAO,CAACD,WAAW,CAACE,MAAM,CAAC;IAE7C;IACA,IAAIE,MAAM,CAACF,MAAM,KAAKA,MAAM,EAAE;MAC1B,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;;IAGvE;IACA,MAAME,GAAG,GAAG,IAAIC,UAAU,CAACJ,MAAM,CAAC;IAElC;IACA,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACH,MAAM,EAAEK,CAAC,EAAE,EAAE;MACjCF,GAAG,CAACE,CAAC,CAAC,GAAGH,MAAM,CAACG,CAAC,CAAC;;IAGtB;IACA,IAAAd,MAAA,CAAAe,IAAI,EAACJ,MAAM,CAAC;IAEZ,OAAOC,GAAG;EACd;;AA1CJI,OAAA,CAAAd,gBAAA,GAAAA,gBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}