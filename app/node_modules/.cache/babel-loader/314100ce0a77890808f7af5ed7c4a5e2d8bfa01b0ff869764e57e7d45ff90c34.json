{"ast":null,"code":"\"use strict\";\n\nvar _inherits = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _wrapNativeSuper = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\nvar _regeneratorRuntime = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getProvider = exports.setProvider = exports.AnchorProvider = void 0;\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar index_js_1 = require(\"./utils/bytes/index.js\");\nvar common_js_1 = require(\"./utils/common.js\");\nvar rpc_js_1 = require(\"./utils/rpc.js\");\n/**\n * The network and wallet context used to send transactions paid for and signed\n * by the provider.\n */\nvar AnchorProvider = /*#__PURE__*/function () {\n  /**\n   * @param connection The cluster connection where the program is deployed.\n   * @param wallet     The wallet used to pay for and sign all transactions.\n   * @param opts       Transaction confirmation options to use by default.\n   */\n  function AnchorProvider(connection, wallet, opts) {\n    _classCallCheck(this, AnchorProvider);\n    this.connection = connection;\n    this.wallet = wallet;\n    this.opts = opts;\n  }\n  _createClass(AnchorProvider, [{\n    key: \"sendAndConfirm\",\n    value:\n    /**\n     * Sends the given transaction, paid for and signed by the provider's wallet.\n     *\n     * @param tx      The transaction to send.\n     * @param signers The signers of the transaction.\n     * @param opts    Transaction confirmation options.\n     */\n    function () {\n      var _sendAndConfirm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(tx, signers, opts) {\n        var _a, rawTx, failedTx, logs;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (opts === undefined) {\n                opts = this.opts;\n              }\n              tx.feePayer = this.wallet.publicKey;\n              _context.next = 4;\n              return this.connection.getRecentBlockhash(opts.preflightCommitment);\n            case 4:\n              tx.recentBlockhash = _context.sent.blockhash;\n              _context.next = 7;\n              return this.wallet.signTransaction(tx);\n            case 7:\n              tx = _context.sent;\n              (signers !== null && signers !== void 0 ? signers : []).forEach(function (kp) {\n                tx.partialSign(kp);\n              });\n              rawTx = tx.serialize();\n              _context.prev = 10;\n              _context.next = 13;\n              return sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n            case 13:\n              return _context.abrupt(\"return\", _context.sent);\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](10);\n              if (!(_context.t0 instanceof ConfirmError)) {\n                _context.next = 30;\n                break;\n              }\n              _context.next = 21;\n              return this.connection.getTransaction(index_js_1.bs58.encode(tx.signature), {\n                commitment: \"confirmed\"\n              });\n            case 21:\n              failedTx = _context.sent;\n              if (failedTx) {\n                _context.next = 26;\n                break;\n              }\n              throw _context.t0;\n            case 26:\n              logs = (_a = failedTx.meta) === null || _a === void 0 ? void 0 : _a.logMessages;\n              throw !logs ? _context.t0 : new web3_js_1.SendTransactionError(_context.t0.message, logs);\n            case 28:\n              _context.next = 31;\n              break;\n            case 30:\n              throw _context.t0;\n            case 31:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[10, 16]]);\n      }));\n      function sendAndConfirm(_x, _x2, _x3) {\n        return _sendAndConfirm.apply(this, arguments);\n      }\n      return sendAndConfirm;\n    }()\n    /**\n     * Similar to `send`, but for an array of transactions and signers.\n     */\n  }, {\n    key: \"sendAll\",\n    value: function () {\n      var _sendAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(txWithSigners, opts) {\n        var _this = this;\n        var blockhash, txs, signedTxs, sigs, k, tx, rawTx;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (opts === undefined) {\n                opts = this.opts;\n              }\n              _context2.next = 3;\n              return this.connection.getRecentBlockhash(opts.preflightCommitment);\n            case 3:\n              blockhash = _context2.sent;\n              txs = txWithSigners.map(function (r) {\n                var _a;\n                var tx = r.tx;\n                var signers = (_a = r.signers) !== null && _a !== void 0 ? _a : [];\n                tx.feePayer = _this.wallet.publicKey;\n                tx.recentBlockhash = blockhash.blockhash;\n                signers.forEach(function (kp) {\n                  tx.partialSign(kp);\n                });\n                return tx;\n              });\n              _context2.next = 7;\n              return this.wallet.signAllTransactions(txs);\n            case 7:\n              signedTxs = _context2.sent;\n              sigs = [];\n              k = 0;\n            case 10:\n              if (!(k < txs.length)) {\n                _context2.next = 21;\n                break;\n              }\n              tx = signedTxs[k];\n              rawTx = tx.serialize();\n              _context2.t0 = sigs;\n              _context2.next = 16;\n              return sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n            case 16:\n              _context2.t1 = _context2.sent;\n              _context2.t0.push.call(_context2.t0, _context2.t1);\n            case 18:\n              k += 1;\n              _context2.next = 10;\n              break;\n            case 21:\n              return _context2.abrupt(\"return\", sigs);\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function sendAll(_x4, _x5) {\n        return _sendAll.apply(this, arguments);\n      }\n      return sendAll;\n    }()\n    /**\n     * Simulates the given transaction, returning emitted logs from execution.\n     *\n     * @param tx      The transaction to send.\n     * @param signers The signers of the transaction.\n     * @param opts    Transaction confirmation options.\n     */\n  }, {\n    key: \"simulate\",\n    value: function () {\n      var _simulate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(tx, signers, commitment, includeAccounts) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              tx.feePayer = this.wallet.publicKey;\n              _context3.next = 3;\n              return this.connection.getLatestBlockhash(commitment !== null && commitment !== void 0 ? commitment : this.connection.commitment);\n            case 3:\n              tx.recentBlockhash = _context3.sent.blockhash;\n              _context3.next = 6;\n              return this.wallet.signTransaction(tx);\n            case 6:\n              tx = _context3.sent;\n              _context3.next = 9;\n              return (0, rpc_js_1.simulateTransaction)(this.connection, tx, signers, commitment, includeAccounts);\n            case 9:\n              result = _context3.sent;\n              if (!result.value.err) {\n                _context3.next = 12;\n                break;\n              }\n              throw new SimulateError(result.value);\n            case 12:\n              return _context3.abrupt(\"return\", result.value);\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function simulate(_x6, _x7, _x8, _x9) {\n        return _simulate.apply(this, arguments);\n      }\n      return simulate;\n    }()\n  }], [{\n    key: \"defaultOptions\",\n    value: function defaultOptions() {\n      return {\n        preflightCommitment: \"processed\",\n        commitment: \"processed\"\n      };\n    }\n    /**\n     * Returns a `Provider` with a wallet read from the local filesystem.\n     *\n     * @param url  The network cluster url.\n     * @param opts The default transaction confirmation options.\n     *\n     * (This api is for Node only.)\n     */\n  }, {\n    key: \"local\",\n    value: function local(url, opts) {\n      if (common_js_1.isBrowser) {\n        throw new Error(\"Provider local is not available on browser.\");\n      }\n      opts = opts !== null && opts !== void 0 ? opts : AnchorProvider.defaultOptions();\n      var connection = new web3_js_1.Connection(url !== null && url !== void 0 ? url : \"http://localhost:8899\", opts.preflightCommitment);\n      var NodeWallet = require(\"./nodewallet.js\").default;\n      var wallet = NodeWallet.local();\n      return new AnchorProvider(connection, wallet, opts);\n    }\n    /**\n     * Returns a `Provider` read from the `ANCHOR_PROVIDER_URL` environment\n     * variable\n     *\n     * (This api is for Node only.)\n     */\n  }, {\n    key: \"env\",\n    value: function env() {\n      if (common_js_1.isBrowser) {\n        throw new Error(\"Provider env is not available on browser.\");\n      }\n      var process = require(\"process\");\n      var url = process.env.ANCHOR_PROVIDER_URL;\n      if (url === undefined) {\n        throw new Error(\"ANCHOR_PROVIDER_URL is not defined\");\n      }\n      var options = AnchorProvider.defaultOptions();\n      var connection = new web3_js_1.Connection(url, options.commitment);\n      var NodeWallet = require(\"./nodewallet.js\").default;\n      var wallet = NodeWallet.local();\n      return new AnchorProvider(connection, wallet, options);\n    }\n  }]);\n  return AnchorProvider;\n}();\nexports.AnchorProvider = AnchorProvider;\nvar SimulateError = /*#__PURE__*/function (_Error) {\n  _inherits(SimulateError, _Error);\n  var _super = _createSuper(SimulateError);\n  function SimulateError(simulationResponse, message) {\n    var _this2;\n    _classCallCheck(this, SimulateError);\n    _this2 = _super.call(this, message);\n    _this2.simulationResponse = simulationResponse;\n    return _this2;\n  }\n  return _createClass(SimulateError);\n}( /*#__PURE__*/_wrapNativeSuper(Error)); // Copy of Connection.sendAndConfirmRawTransaction that throws\n// a better error if 'confirmTransaction` returns an error status\nfunction sendAndConfirmRawTransaction(_x10, _x11, _x12) {\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\nfunction _sendAndConfirmRawTransaction() {\n  _sendAndConfirmRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(connection, rawTransaction, options) {\n    var sendOptions, signature, status;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          sendOptions = options && {\n            skipPreflight: options.skipPreflight,\n            preflightCommitment: options.preflightCommitment || options.commitment\n          };\n          _context4.next = 3;\n          return connection.sendRawTransaction(rawTransaction, sendOptions);\n        case 3:\n          signature = _context4.sent;\n          _context4.next = 6;\n          return connection.confirmTransaction(signature, options && options.commitment);\n        case 6:\n          status = _context4.sent.value;\n          if (!status.err) {\n            _context4.next = 9;\n            break;\n          }\n          throw new ConfirmError(\"Raw transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n        case 9:\n          return _context4.abrupt(\"return\", signature);\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\nvar ConfirmError = /*#__PURE__*/function (_Error2) {\n  _inherits(ConfirmError, _Error2);\n  var _super2 = _createSuper(ConfirmError);\n  function ConfirmError(message) {\n    _classCallCheck(this, ConfirmError);\n    return _super2.call(this, message);\n  }\n  return _createClass(ConfirmError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * Sets the default provider on the client.\n */\nfunction setProvider(provider) {\n  _provider = provider;\n}\nexports.setProvider = setProvider;\n/**\n * Returns the default provider being used by the client.\n */\nfunction getProvider() {\n  if (_provider === null) {\n    return AnchorProvider.local();\n  }\n  return _provider;\n}\nexports.getProvider = getProvider;\n// Global provider used as the default when a provider is not given.\nvar _provider = null;","map":{"version":3,"names":["web3_js_1","require","index_js_1","common_js_1","rpc_js_1","AnchorProvider","connection","wallet","opts","_classCallCheck","_createClass","key","value","_sendAndConfirm","_asyncToGenerator","_regeneratorRuntime","mark","_callee","tx","signers","_a","rawTx","failedTx","logs","wrap","_callee$","_context","prev","next","undefined","feePayer","publicKey","getRecentBlockhash","preflightCommitment","recentBlockhash","sent","blockhash","signTransaction","forEach","kp","partialSign","serialize","sendAndConfirmRawTransaction","abrupt","t0","ConfirmError","getTransaction","bs58","encode","signature","commitment","meta","logMessages","SendTransactionError","message","stop","sendAndConfirm","_x","_x2","_x3","apply","arguments","_sendAll","_callee2","txWithSigners","_this","txs","signedTxs","sigs","k","_callee2$","_context2","map","r","signAllTransactions","length","t1","push","call","sendAll","_x4","_x5","_simulate","_callee3","includeAccounts","result","_callee3$","_context3","getLatestBlockhash","simulateTransaction","err","SimulateError","simulate","_x6","_x7","_x8","_x9","defaultOptions","local","url","isBrowser","Error","Connection","NodeWallet","default","env","process","ANCHOR_PROVIDER_URL","options","exports","_Error","_inherits","_super","_createSuper","simulationResponse","_this2","_wrapNativeSuper","_x10","_x11","_x12","_sendAndConfirmRawTransaction","_callee4","rawTransaction","sendOptions","status","_callee4$","_context4","skipPreflight","sendRawTransaction","confirmTransaction","concat","JSON","stringify","_Error2","_super2","setProvider","provider","_provider","getProvider"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/provider.ts"],"sourcesContent":["import {\n  Connection,\n  Signer,\n  PublicKey,\n  Transaction,\n  TransactionSignature,\n  ConfirmOptions,\n  SimulatedTransactionResponse,\n  Commitment,\n  SendTransactionError,\n  SendOptions,\n  RpcResponseAndContext,\n} from \"@solana/web3.js\";\nimport { bs58 } from \"./utils/bytes/index.js\";\nimport { isBrowser } from \"./utils/common.js\";\nimport {\n  simulateTransaction,\n  SuccessfulTxSimulationResponse,\n} from \"./utils/rpc.js\";\n\nexport default interface Provider {\n  readonly connection: Connection;\n\n  send?(\n    tx: Transaction,\n    signers?: Signer[],\n    opts?: SendOptions\n  ): Promise<TransactionSignature>;\n  sendAndConfirm?(\n    tx: Transaction,\n    signers?: Signer[],\n    opts?: ConfirmOptions\n  ): Promise<TransactionSignature>;\n  sendAll?(\n    txWithSigners: { tx: Transaction; signers?: Signer[] }[],\n    opts?: ConfirmOptions\n  ): Promise<Array<TransactionSignature>>;\n  simulate?(\n    tx: Transaction,\n    signers?: Signer[],\n    commitment?: Commitment,\n    includeAccounts?: boolean | PublicKey[]\n  ): Promise<SuccessfulTxSimulationResponse>;\n}\n\n/**\n * The network and wallet context used to send transactions paid for and signed\n * by the provider.\n */\nexport class AnchorProvider implements Provider {\n  /**\n   * @param connection The cluster connection where the program is deployed.\n   * @param wallet     The wallet used to pay for and sign all transactions.\n   * @param opts       Transaction confirmation options to use by default.\n   */\n  constructor(\n    readonly connection: Connection,\n    readonly wallet: Wallet,\n    readonly opts: ConfirmOptions\n  ) {}\n\n  static defaultOptions(): ConfirmOptions {\n    return {\n      preflightCommitment: \"processed\",\n      commitment: \"processed\",\n    };\n  }\n\n  /**\n   * Returns a `Provider` with a wallet read from the local filesystem.\n   *\n   * @param url  The network cluster url.\n   * @param opts The default transaction confirmation options.\n   *\n   * (This api is for Node only.)\n   */\n  static local(url?: string, opts?: ConfirmOptions): AnchorProvider {\n    if (isBrowser) {\n      throw new Error(`Provider local is not available on browser.`);\n    }\n    opts = opts ?? AnchorProvider.defaultOptions();\n    const connection = new Connection(\n      url ?? \"http://localhost:8899\",\n      opts.preflightCommitment\n    );\n    const NodeWallet = require(\"./nodewallet.js\").default;\n    const wallet = NodeWallet.local();\n    return new AnchorProvider(connection, wallet, opts);\n  }\n\n  /**\n   * Returns a `Provider` read from the `ANCHOR_PROVIDER_URL` environment\n   * variable\n   *\n   * (This api is for Node only.)\n   */\n  static env(): AnchorProvider {\n    if (isBrowser) {\n      throw new Error(`Provider env is not available on browser.`);\n    }\n\n    const process = require(\"process\");\n    const url = process.env.ANCHOR_PROVIDER_URL;\n    if (url === undefined) {\n      throw new Error(\"ANCHOR_PROVIDER_URL is not defined\");\n    }\n    const options = AnchorProvider.defaultOptions();\n    const connection = new Connection(url, options.commitment);\n    const NodeWallet = require(\"./nodewallet.js\").default;\n    const wallet = NodeWallet.local();\n\n    return new AnchorProvider(connection, wallet, options);\n  }\n\n  /**\n   * Sends the given transaction, paid for and signed by the provider's wallet.\n   *\n   * @param tx      The transaction to send.\n   * @param signers The signers of the transaction.\n   * @param opts    Transaction confirmation options.\n   */\n  async sendAndConfirm(\n    tx: Transaction,\n    signers?: Signer[],\n    opts?: ConfirmOptions\n  ): Promise<TransactionSignature> {\n    if (opts === undefined) {\n      opts = this.opts;\n    }\n\n    tx.feePayer = this.wallet.publicKey;\n    tx.recentBlockhash = (\n      await this.connection.getRecentBlockhash(opts.preflightCommitment)\n    ).blockhash;\n\n    tx = await this.wallet.signTransaction(tx);\n    (signers ?? []).forEach((kp) => {\n      tx.partialSign(kp);\n    });\n\n    const rawTx = tx.serialize();\n\n    try {\n      return await sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n    } catch (err) {\n      // thrown if the underlying 'confirmTransaction' encounters a failed tx\n      // the 'confirmTransaction' error does not return logs so we make another rpc call to get them\n      if (err instanceof ConfirmError) {\n        // choose the shortest available commitment for 'getTransaction'\n        // (the json RPC does not support any shorter than \"confirmed\" for 'getTransaction')\n        // because that will see the tx sent with `sendAndConfirmRawTransaction` no matter which\n        // commitment `sendAndConfirmRawTransaction` used\n        const failedTx = await this.connection.getTransaction(\n          bs58.encode(tx.signature!),\n          { commitment: \"confirmed\" }\n        );\n        if (!failedTx) {\n          throw err;\n        } else {\n          const logs = failedTx.meta?.logMessages;\n          throw !logs ? err : new SendTransactionError(err.message, logs);\n        }\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Similar to `send`, but for an array of transactions and signers.\n   */\n  async sendAll(\n    txWithSigners: { tx: Transaction; signers?: Signer[] }[],\n    opts?: ConfirmOptions\n  ): Promise<Array<TransactionSignature>> {\n    if (opts === undefined) {\n      opts = this.opts;\n    }\n    const blockhash = await this.connection.getRecentBlockhash(\n      opts.preflightCommitment\n    );\n\n    let txs = txWithSigners.map((r) => {\n      let tx = r.tx;\n      let signers = r.signers ?? [];\n\n      tx.feePayer = this.wallet.publicKey;\n      tx.recentBlockhash = blockhash.blockhash;\n\n      signers.forEach((kp) => {\n        tx.partialSign(kp);\n      });\n\n      return tx;\n    });\n\n    const signedTxs = await this.wallet.signAllTransactions(txs);\n\n    const sigs: TransactionSignature[] = [];\n\n    for (let k = 0; k < txs.length; k += 1) {\n      const tx = signedTxs[k];\n      const rawTx = tx.serialize();\n      sigs.push(\n        await sendAndConfirmRawTransaction(this.connection, rawTx, opts)\n      );\n    }\n\n    return sigs;\n  }\n\n  /**\n   * Simulates the given transaction, returning emitted logs from execution.\n   *\n   * @param tx      The transaction to send.\n   * @param signers The signers of the transaction.\n   * @param opts    Transaction confirmation options.\n   */\n  async simulate(\n    tx: Transaction,\n    signers?: Signer[],\n    commitment?: Commitment,\n    includeAccounts?: boolean | PublicKey[]\n  ): Promise<SuccessfulTxSimulationResponse> {\n    tx.feePayer = this.wallet.publicKey;\n    tx.recentBlockhash = (\n      await this.connection.getLatestBlockhash(\n        commitment ?? this.connection.commitment\n      )\n    ).blockhash;\n\n    tx = await this.wallet.signTransaction(tx);\n    const result = await simulateTransaction(\n      this.connection,\n      tx,\n      signers,\n      commitment,\n      includeAccounts\n    );\n\n    if (result.value.err) {\n      throw new SimulateError(result.value);\n    }\n\n    return result.value;\n  }\n}\n\nclass SimulateError extends Error {\n  constructor(\n    readonly simulationResponse: SimulatedTransactionResponse,\n    message?: string\n  ) {\n    super(message);\n  }\n}\n\nexport type SendTxRequest = {\n  tx: Transaction;\n  signers: Array<Signer | undefined>;\n};\n\n/**\n * Wallet interface for objects that can be used to sign provider transactions.\n */\nexport interface Wallet {\n  signTransaction(tx: Transaction): Promise<Transaction>;\n  signAllTransactions(txs: Transaction[]): Promise<Transaction[]>;\n  publicKey: PublicKey;\n}\n\n// Copy of Connection.sendAndConfirmRawTransaction that throws\n// a better error if 'confirmTransaction` returns an error status\nasync function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment\n    )\n  ).value;\n\n  if (status.err) {\n    throw new ConfirmError(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`\n    );\n  }\n\n  return signature;\n}\n\nclass ConfirmError extends Error {\n  constructor(message?: string) {\n    super(message);\n  }\n}\n\n/**\n * Sets the default provider on the client.\n */\nexport function setProvider(provider: Provider) {\n  _provider = provider;\n}\n\n/**\n * Returns the default provider being used by the client.\n */\nexport function getProvider(): Provider {\n  if (_provider === null) {\n    return AnchorProvider.local();\n  }\n  return _provider;\n}\n\n// Global provider used as the default when a provider is not given.\nlet _provider: Provider | null = null;\n"],"mappings":";;;;;;;;;;;;;AAAA,IAAAA,SAAA,GAAAC,OAAA;AAaA,IAAAC,UAAA,GAAAD,OAAA;AACA,IAAAE,WAAA,GAAAF,OAAA;AACA,IAAAG,QAAA,GAAAH,OAAA;AA8BA;;;;AAAA,IAIaI,cAAc;EACzB;;;;;EAKA,SAAAA,eACWC,UAAsB,EACtBC,MAAc,EACdC,IAAoB;IAAAC,eAAA,OAAAJ,cAAA;IAFpB,KAAAC,UAAU,GAAVA,UAAU;IACV,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,IAAI,GAAJA,IAAI;EACZ;EAACE,YAAA,CAAAL,cAAA;IAAAM,GAAA;IAAAC,KAAA;IAuDJ;;;;;;;IAAA;MAAA,IAAAC,eAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAOA,SAAAC,QACEC,EAAe,EACfC,OAAkB,EAClBX,IAAqB;QAAA,IAAAY,EAAA,EAAAC,KAAA,EAAAC,QAAA,EAAAC,IAAA;QAAA,OAAAR,mBAAA,GAAAS,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAErB,IAAIpB,IAAI,KAAKqB,SAAS,EAAE;gBACtBrB,IAAI,GAAG,IAAI,CAACA,IAAI;;cAGlBU,EAAE,CAACY,QAAQ,GAAG,IAAI,CAACvB,MAAM,CAACwB,SAAS;cAACL,QAAA,CAAAE,IAAA;cAAA,OAE5B,IAAI,CAACtB,UAAU,CAAC0B,kBAAkB,CAACxB,IAAI,CAACyB,mBAAmB,CAAC;YAAA;cADpEf,EAAE,CAACgB,eAAe,GAAAR,QAAA,CAAAS,IAAA,CAEhBC,SAAS;cAAAV,QAAA,CAAAE,IAAA;cAAA,OAEA,IAAI,CAACrB,MAAM,CAAC8B,eAAe,CAACnB,EAAE,CAAC;YAAA;cAA1CA,EAAE,GAAAQ,QAAA,CAAAS,IAAA;cACF,CAAChB,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,EAAE,EAAEmB,OAAO,CAAC,UAACC,EAAE,EAAI;gBAC7BrB,EAAE,CAACsB,WAAW,CAACD,EAAE,CAAC;cACpB,CAAC,CAAC;cAEIlB,KAAK,GAAGH,EAAE,CAACuB,SAAS,EAAE;cAAAf,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAGbc,4BAA4B,CAAC,IAAI,CAACpC,UAAU,EAAEe,KAAK,EAAEb,IAAI,CAAC;YAAA;cAAA,OAAAkB,QAAA,CAAAiB,MAAA,WAAAjB,QAAA,CAAAS,IAAA;YAAA;cAAAT,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAkB,EAAA,GAAAlB,QAAA;cAAA,MAInEA,QAAA,CAAAkB,EAAA,YAAeC,YAAY;gBAAAnB,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA,OAKN,IAAI,CAACtB,UAAU,CAACwC,cAAc,CACnD5C,UAAA,CAAA6C,IAAI,CAACC,MAAM,CAAC9B,EAAE,CAAC+B,SAAU,CAAC,EAC1B;gBAAEC,UAAU,EAAE;cAAW,CAAE,CAC5B;YAAA;cAHK5B,QAAQ,GAAAI,QAAA,CAAAS,IAAA;cAAA,IAITb,QAAQ;gBAAAI,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,MAAAF,QAAA,CAAAkB,EAAA;YAAA;cAGLrB,IAAI,GAAG,CAAAH,EAAA,GAAAE,QAAQ,CAAC6B,IAAI,cAAA/B,EAAA,uBAAAA,EAAA,CAAEgC,WAAW;cAAA,MACjC,CAAC7B,IAAI,GAAAG,QAAA,CAAAkB,EAAA,GAAS,IAAI5C,SAAA,CAAAqD,oBAAoB,CAAC3B,QAAA,CAAAkB,EAAA,CAAIU,OAAO,EAAE/B,IAAI,CAAC;YAAA;cAAAG,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAA,MAAAF,QAAA,CAAAkB,EAAA;YAAA;YAAA;cAAA,OAAAlB,QAAA,CAAA6B,IAAA;UAAA;QAAA,GAAAtC,OAAA;MAAA,CAMtE;MAAA,SAAAuC,eAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;QAAA,OAAA9C,eAAA,CAAA+C,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAL,cAAA;IAAA;IAED;;;EAAA;IAAA7C,GAAA;IAAAC,KAAA;MAAA,IAAAkD,QAAA,GAAAhD,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAGA,SAAA+C,SACEC,aAAwD,EACxDxD,IAAqB;QAAA,IAAAyD,KAAA;QAAA,IAAA7B,SAAA,EAAA8B,GAAA,EAAAC,SAAA,EAAAC,IAAA,EAAAC,CAAA,EAAAnD,EAAA,EAAAG,KAAA;QAAA,OAAAN,mBAAA,GAAAS,IAAA,UAAA8C,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA5C,IAAA,GAAA4C,SAAA,CAAA3C,IAAA;YAAA;cAErB,IAAIpB,IAAI,KAAKqB,SAAS,EAAE;gBACtBrB,IAAI,GAAG,IAAI,CAACA,IAAI;;cACjB+D,SAAA,CAAA3C,IAAA;cAAA,OACuB,IAAI,CAACtB,UAAU,CAAC0B,kBAAkB,CACxDxB,IAAI,CAACyB,mBAAmB,CACzB;YAAA;cAFKG,SAAS,GAAAmC,SAAA,CAAApC,IAAA;cAIX+B,GAAG,GAAGF,aAAa,CAACQ,GAAG,CAAC,UAACC,CAAC,EAAI;;gBAChC,IAAIvD,EAAE,GAAGuD,CAAC,CAACvD,EAAE;gBACb,IAAIC,OAAO,GAAG,CAAAC,EAAA,GAAAqD,CAAC,CAACtD,OAAO,cAAAC,EAAA,cAAAA,EAAA,GAAI,EAAE;gBAE7BF,EAAE,CAACY,QAAQ,GAAGmC,KAAI,CAAC1D,MAAM,CAACwB,SAAS;gBACnCb,EAAE,CAACgB,eAAe,GAAGE,SAAS,CAACA,SAAS;gBAExCjB,OAAO,CAACmB,OAAO,CAAC,UAACC,EAAE,EAAI;kBACrBrB,EAAE,CAACsB,WAAW,CAACD,EAAE,CAAC;gBACpB,CAAC,CAAC;gBAEF,OAAOrB,EAAE;cACX,CAAC,CAAC;cAAAqD,SAAA,CAAA3C,IAAA;cAAA,OAEsB,IAAI,CAACrB,MAAM,CAACmE,mBAAmB,CAACR,GAAG,CAAC;YAAA;cAAtDC,SAAS,GAAAI,SAAA,CAAApC,IAAA;cAETiC,IAAI,GAA2B,EAAE;cAE9BC,CAAC,GAAG,CAAC;YAAA;cAAA,MAAEA,CAAC,GAAGH,GAAG,CAACS,MAAM;gBAAAJ,SAAA,CAAA3C,IAAA;gBAAA;cAAA;cACtBV,EAAE,GAAGiD,SAAS,CAACE,CAAC,CAAC;cACjBhD,KAAK,GAAGH,EAAE,CAACuB,SAAS,EAAE;cAAA8B,SAAA,CAAA3B,EAAA,GAC5BwB,IAAI;cAAAG,SAAA,CAAA3C,IAAA;cAAA,OACIc,4BAA4B,CAAC,IAAI,CAACpC,UAAU,EAAEe,KAAK,EAAEb,IAAI,CAAC;YAAA;cAAA+D,SAAA,CAAAK,EAAA,GAAAL,SAAA,CAAApC,IAAA;cAAAoC,SAAA,CAAA3B,EAAA,CAD7DiC,IAAI,CAAAC,IAAA,CAAAP,SAAA,CAAA3B,EAAA,EAAA2B,SAAA,CAAAK,EAAA;YAAA;cAHqBP,CAAC,IAAI,CAAC;cAAAE,SAAA,CAAA3C,IAAA;cAAA;YAAA;cAAA,OAAA2C,SAAA,CAAA5B,MAAA,WAQ/ByB,IAAI;YAAA;YAAA;cAAA,OAAAG,SAAA,CAAAhB,IAAA;UAAA;QAAA,GAAAQ,QAAA;MAAA,CACZ;MAAA,SAAAgB,QAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAnB,QAAA,CAAAF,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAkB,OAAA;IAAA;IAED;;;;;;;EAAA;IAAApE,GAAA;IAAAC,KAAA;MAAA,IAAAsE,SAAA,GAAApE,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAOA,SAAAmE,SACEjE,EAAe,EACfC,OAAkB,EAClB+B,UAAuB,EACvBkC,eAAuC;QAAA,IAAAC,MAAA;QAAA,OAAAtE,mBAAA,GAAAS,IAAA,UAAA8D,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA5D,IAAA,GAAA4D,SAAA,CAAA3D,IAAA;YAAA;cAEvCV,EAAE,CAACY,QAAQ,GAAG,IAAI,CAACvB,MAAM,CAACwB,SAAS;cAACwD,SAAA,CAAA3D,IAAA;cAAA,OAE5B,IAAI,CAACtB,UAAU,CAACkF,kBAAkB,CACtCtC,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAI,IAAI,CAAC5C,UAAU,CAAC4C,UAAU,CACzC;YAAA;cAHHhC,EAAE,CAACgB,eAAe,GAAAqD,SAAA,CAAApD,IAAA,CAIhBC,SAAS;cAAAmD,SAAA,CAAA3D,IAAA;cAAA,OAEA,IAAI,CAACrB,MAAM,CAAC8B,eAAe,CAACnB,EAAE,CAAC;YAAA;cAA1CA,EAAE,GAAAqE,SAAA,CAAApD,IAAA;cAAAoD,SAAA,CAAA3D,IAAA;cAAA,OACmB,IAAAxB,QAAA,CAAAqF,mBAAmB,EACtC,IAAI,CAACnF,UAAU,EACfY,EAAE,EACFC,OAAO,EACP+B,UAAU,EACVkC,eAAe,CAChB;YAAA;cANKC,MAAM,GAAAE,SAAA,CAAApD,IAAA;cAAA,KAQRkD,MAAM,CAACzE,KAAK,CAAC8E,GAAG;gBAAAH,SAAA,CAAA3D,IAAA;gBAAA;cAAA;cAAA,MACZ,IAAI+D,aAAa,CAACN,MAAM,CAACzE,KAAK,CAAC;YAAA;cAAA,OAAA2E,SAAA,CAAA5C,MAAA,WAGhC0C,MAAM,CAACzE,KAAK;YAAA;YAAA;cAAA,OAAA2E,SAAA,CAAAhC,IAAA;UAAA;QAAA,GAAA4B,QAAA;MAAA,CACpB;MAAA,SAAAS,SAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAd,SAAA,CAAAtB,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAA+B,QAAA;IAAA;EAAA;IAAAjF,GAAA;IAAAC,KAAA,EAxLD,SAAAqF,eAAA,EAAqB;MACnB,OAAO;QACLhE,mBAAmB,EAAE,WAAW;QAChCiB,UAAU,EAAE;OACb;IACH;IAEA;;;;;;;;EAAA;IAAAvC,GAAA;IAAAC,KAAA,EAQA,SAAAsF,MAAaC,GAAY,EAAE3F,IAAqB;MAC9C,IAAIL,WAAA,CAAAiG,SAAS,EAAE;QACb,MAAM,IAAIC,KAAK,8CAA8C,CAAC;;MAEhE7F,IAAI,GAAGA,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAIH,cAAc,CAAC4F,cAAc,EAAE;MAC9C,IAAM3F,UAAU,GAAG,IAAIN,SAAA,CAAAsG,UAAU,CAC/BH,GAAG,aAAHA,GAAG,cAAHA,GAAG,GAAI,uBAAuB,EAC9B3F,IAAI,CAACyB,mBAAmB,CACzB;MACD,IAAMsE,UAAU,GAAGtG,OAAO,CAAC,iBAAiB,CAAC,CAACuG,OAAO;MACrD,IAAMjG,MAAM,GAAGgG,UAAU,CAACL,KAAK,EAAE;MACjC,OAAO,IAAI7F,cAAc,CAACC,UAAU,EAAEC,MAAM,EAAEC,IAAI,CAAC;IACrD;IAEA;;;;;;EAAA;IAAAG,GAAA;IAAAC,KAAA,EAMA,SAAA6F,IAAA,EAAU;MACR,IAAItG,WAAA,CAAAiG,SAAS,EAAE;QACb,MAAM,IAAIC,KAAK,4CAA4C,CAAC;;MAG9D,IAAMK,OAAO,GAAGzG,OAAO,CAAC,SAAS,CAAC;MAClC,IAAMkG,GAAG,GAAGO,OAAO,CAACD,GAAG,CAACE,mBAAmB;MAC3C,IAAIR,GAAG,KAAKtE,SAAS,EAAE;QACrB,MAAM,IAAIwE,KAAK,CAAC,oCAAoC,CAAC;;MAEvD,IAAMO,OAAO,GAAGvG,cAAc,CAAC4F,cAAc,EAAE;MAC/C,IAAM3F,UAAU,GAAG,IAAIN,SAAA,CAAAsG,UAAU,CAACH,GAAG,EAAES,OAAO,CAAC1D,UAAU,CAAC;MAC1D,IAAMqD,UAAU,GAAGtG,OAAO,CAAC,iBAAiB,CAAC,CAACuG,OAAO;MACrD,IAAMjG,MAAM,GAAGgG,UAAU,CAACL,KAAK,EAAE;MAEjC,OAAO,IAAI7F,cAAc,CAACC,UAAU,EAAEC,MAAM,EAAEqG,OAAO,CAAC;IACxD;EAAC;EAAA,OAAAvG,cAAA;AAAA;AA/DHwG,OAAA,CAAAxG,cAAA,GAAAA,cAAA;AAqMC,IAEKsF,aAAc,0BAAAmB,MAAA;EAAAC,SAAA,CAAApB,aAAA,EAAAmB,MAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAtB,aAAA;EAClB,SAAAA,cACWuB,kBAAgD,EACzD5D,OAAgB;IAAA,IAAA6D,MAAA;IAAA1G,eAAA,OAAAkF,aAAA;IAEhBwB,MAAA,GAAAH,MAAA,CAAAlC,IAAA,OAAMxB,OAAO;IAHJ6D,MAAA,CAAAD,kBAAkB,GAAlBA,kBAAkB;IAA8B,OAAAC,MAAA;EAI3D;EAAC,OAAAzG,YAAA,CAAAiF,aAAA;AAAA,gBAAAyB,gBAAA,CANyBf,KAAK,IAuBjC;AACA;AAAA,SACe3D,4BAA4BA,CAAA2E,IAAA,EAAAC,IAAA,EAAAC,IAAA;EAAA,OAAAC,6BAAA,CAAA5D,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAA2D,8BAAA;EAAAA,6BAAA,GAAA1G,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAA3C,SAAAyG,SACEnH,UAAsB,EACtBoH,cAAsB,EACtBd,OAAwB;IAAA,IAAAe,WAAA,EAAA1E,SAAA,EAAA2E,MAAA;IAAA,OAAA7G,mBAAA,GAAAS,IAAA,UAAAqG,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAAnG,IAAA,GAAAmG,SAAA,CAAAlG,IAAA;QAAA;UAElB+F,WAAW,GAAGf,OAAO,IAAI;YAC7BmB,aAAa,EAAEnB,OAAO,CAACmB,aAAa;YACpC9F,mBAAmB,EAAE2E,OAAO,CAAC3E,mBAAmB,IAAI2E,OAAO,CAAC1D;WAC7D;UAAA4E,SAAA,CAAAlG,IAAA;UAAA,OAEuBtB,UAAU,CAAC0H,kBAAkB,CACnDN,cAAc,EACdC,WAAW,CACZ;QAAA;UAHK1E,SAAS,GAAA6E,SAAA,CAAA3F,IAAA;UAAA2F,SAAA,CAAAlG,IAAA;UAAA,OAMPtB,UAAU,CAAC2H,kBAAkB,CACjChF,SAAS,EACT2D,OAAO,IAAIA,OAAO,CAAC1D,UAAU,CAC9B;QAAA;UAJG0E,MAAM,GAAAE,SAAA,CAAA3F,IAAA,CAKVvB,KAAK;UAAA,KAEHgH,MAAM,CAAClC,GAAG;YAAAoC,SAAA,CAAAlG,IAAA;YAAA;UAAA;UAAA,MACN,IAAIiB,YAAY,oBAAAqF,MAAA,CACDjF,SAAS,eAAAiF,MAAA,CAAYC,IAAI,CAACC,SAAS,CAACR,MAAM,CAAC,MAAG,CAClE;QAAA;UAAA,OAAAE,SAAA,CAAAnF,MAAA,WAGIM,SAAS;QAAA;QAAA;UAAA,OAAA6E,SAAA,CAAAvE,IAAA;MAAA;IAAA,GAAAkE,QAAA;EAAA,CACjB;EAAA,OAAAD,6BAAA,CAAA5D,KAAA,OAAAC,SAAA;AAAA;AAAA,IAEKhB,YAAa,0BAAAwF,OAAA;EAAAtB,SAAA,CAAAlE,YAAA,EAAAwF,OAAA;EAAA,IAAAC,OAAA,GAAArB,YAAA,CAAApE,YAAA;EACjB,SAAAA,aAAYS,OAAgB;IAAA7C,eAAA,OAAAoC,YAAA;IAAA,OAAAyF,OAAA,CAAAxD,IAAA,OACpBxB,OAAO;EACf;EAAC,OAAA5C,YAAA,CAAAmC,YAAA;AAAA,gBAAAuE,gBAAA,CAHwBf,KAAK;AAMhC;;;AAGA,SAAgBkC,WAAWA,CAACC,QAAkB;EAC5CC,SAAS,GAAGD,QAAQ;AACtB;AAFA3B,OAAA,CAAA0B,WAAA,GAAAA,WAAA;AAIA;;;AAGA,SAAgBG,WAAWA,CAAA;EACzB,IAAID,SAAS,KAAK,IAAI,EAAE;IACtB,OAAOpI,cAAc,CAAC6F,KAAK,EAAE;;EAE/B,OAAOuC,SAAS;AAClB;AALA5B,OAAA,CAAA6B,WAAA,GAAAA,WAAA;AAOA;AACA,IAAID,SAAS,GAAoB,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}