{"ast":null,"code":"'use strict';\n\nconst zlib_deflate = require('./zlib/deflate');\nconst utils = require('./utils/common');\nconst strings = require('./utils/strings');\nconst msg = require('./zlib/messages');\nconst ZStream = require('./zlib/zstream');\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH,\n  Z_SYNC_FLUSH,\n  Z_FULL_FLUSH,\n  Z_FINISH,\n  Z_OK,\n  Z_STREAM_END,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED\n} = require('./zlib/constants');\n\n/* ===========================================================================*/\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n  let opt = this.options;\n  if (opt.raw && opt.windowBits > 0) {\n    opt.windowBits = -opt.windowBits;\n  } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {\n    opt.windowBits += 16;\n  }\n  this.err = 0; // error code, if happens (0 = Z_OK)\n  this.msg = ''; // error message\n  this.ended = false; // used to avoid multiple onEnd() calls\n  this.chunks = []; // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n  let status = zlib_deflate.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n  if (this.ended) {\n    return false;\n  }\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n    status = zlib_deflate.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = zlib_deflate.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n    if (strm.avail_in === 0) break;\n  }\n  return true;\n};\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    this.result = utils.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  const deflator = new Deflate(options);\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) {\n    throw deflator.msg || msg[deflator.err];\n  }\n  return deflator.result;\n}\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\nmodule.exports.Deflate = Deflate;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateRaw = deflateRaw;\nmodule.exports.gzip = gzip;\nmodule.exports.constants = require('./zlib/constants');","map":{"version":3,"names":["zlib_deflate","require","utils","strings","msg","ZStream","toString","Object","prototype","Z_NO_FLUSH","Z_SYNC_FLUSH","Z_FULL_FLUSH","Z_FINISH","Z_OK","Z_STREAM_END","Z_DEFAULT_COMPRESSION","Z_DEFAULT_STRATEGY","Z_DEFLATED","Deflate","options","assign","level","method","chunkSize","windowBits","memLevel","strategy","opt","raw","gzip","err","ended","chunks","strm","avail_out","status","deflateInit2","Error","header","deflateSetHeader","dictionary","dict","string2buf","call","Uint8Array","deflateSetDictionary","_dict_set","push","data","flush_mode","_flush_mode","input","next_in","avail_in","length","output","next_out","onData","subarray","deflate","deflateEnd","onEnd","chunk","result","flattenChunks","deflator","deflateRaw","module","exports","constants"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/pako/lib/deflate.js"],"sourcesContent":["'use strict';\n\n\nconst zlib_deflate = require('./zlib/deflate');\nconst utils        = require('./utils/common');\nconst strings      = require('./utils/strings');\nconst msg          = require('./zlib/messages');\nconst ZStream      = require('./zlib/zstream');\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED\n} = require('./zlib/constants');\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  let status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = zlib_deflate.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = zlib_deflate.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    this.result = utils.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  const deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nmodule.exports.Deflate = Deflate;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateRaw = deflateRaw;\nmodule.exports.gzip = gzip;\nmodule.exports.constants = require('./zlib/constants');\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}