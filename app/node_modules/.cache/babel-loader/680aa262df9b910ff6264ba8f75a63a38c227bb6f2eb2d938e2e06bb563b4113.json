{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SplTokenAccountsCoder = void 0;\nconst BufferLayout = __importStar(require(\"buffer-layout\"));\nconst buffer_layout_js_1 = require(\"./buffer-layout.js\");\nconst common_1 = require(\"../common\");\nclass SplTokenAccountsCoder {\n  constructor(idl) {\n    this.idl = idl;\n  }\n  async encode(accountName, account) {\n    switch (accountName) {\n      case \"token\":\n        {\n          const buffer = Buffer.alloc(165);\n          const len = TOKEN_ACCOUNT_LAYOUT.encode(account, buffer);\n          return buffer.slice(0, len);\n        }\n      case \"mint\":\n        {\n          const buffer = Buffer.alloc(82);\n          const len = MINT_ACCOUNT_LAYOUT.encode(account, buffer);\n          return buffer.slice(0, len);\n        }\n      default:\n        {\n          throw new Error(`Invalid account name: ${accountName}`);\n        }\n    }\n  }\n  decode(accountName, ix) {\n    return this.decodeUnchecked(accountName, ix);\n  }\n  decodeUnchecked(accountName, ix) {\n    switch (accountName) {\n      case \"token\":\n        {\n          return decodeTokenAccount(ix);\n        }\n      case \"mint\":\n        {\n          return decodeMintAccount(ix);\n        }\n      default:\n        {\n          throw new Error(`Invalid account name: ${accountName}`);\n        }\n    }\n  }\n  // TODO: this won't use the appendData.\n  memcmp(accountName, _appendData) {\n    switch (accountName) {\n      case \"token\":\n        {\n          return {\n            dataSize: 165\n          };\n        }\n      case \"mint\":\n        {\n          return {\n            dataSize: 82\n          };\n        }\n      default:\n        {\n          throw new Error(`Invalid account name: ${accountName}`);\n        }\n    }\n  }\n  size(idlAccount) {\n    var _a;\n    return (_a = (0, common_1.accountSize)(this.idl, idlAccount)) !== null && _a !== void 0 ? _a : 0;\n  }\n}\nexports.SplTokenAccountsCoder = SplTokenAccountsCoder;\nfunction decodeMintAccount(ix) {\n  return MINT_ACCOUNT_LAYOUT.decode(ix);\n}\nfunction decodeTokenAccount(ix) {\n  return TOKEN_ACCOUNT_LAYOUT.decode(ix);\n}\nconst MINT_ACCOUNT_LAYOUT = BufferLayout.struct([(0, buffer_layout_js_1.coption)((0, buffer_layout_js_1.publicKey)(), \"mintAuthority\"), (0, buffer_layout_js_1.uint64)(\"supply\"), BufferLayout.u8(\"decimals\"), (0, buffer_layout_js_1.bool)(\"isInitialized\"), (0, buffer_layout_js_1.coption)((0, buffer_layout_js_1.publicKey)(), \"freezeAuthority\")]);\nconst TOKEN_ACCOUNT_LAYOUT = BufferLayout.struct([(0, buffer_layout_js_1.publicKey)(\"mint\"), (0, buffer_layout_js_1.publicKey)(\"authority\"), (0, buffer_layout_js_1.uint64)(\"amount\"), (0, buffer_layout_js_1.coption)((0, buffer_layout_js_1.publicKey)(), \"delegate\"), BufferLayout.u8(\"state\"), (0, buffer_layout_js_1.coption)((0, buffer_layout_js_1.uint64)(), \"isNative\"), (0, buffer_layout_js_1.uint64)(\"delegatedAmount\"), (0, buffer_layout_js_1.coption)((0, buffer_layout_js_1.publicKey)(), \"closeAuthority\")]);","map":{"version":3,"names":["BufferLayout","__importStar","require","buffer_layout_js_1","common_1","SplTokenAccountsCoder","constructor","idl","encode","accountName","account","buffer","Buffer","alloc","len","TOKEN_ACCOUNT_LAYOUT","slice","MINT_ACCOUNT_LAYOUT","Error","decode","ix","decodeUnchecked","decodeTokenAccount","decodeMintAccount","memcmp","_appendData","dataSize","size","idlAccount","_a","accountSize","exports","struct","coption","publicKey","uint64","u8","bool"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/coder/spl-token/accounts.ts"],"sourcesContent":["import * as BufferLayout from \"buffer-layout\";\nimport { publicKey, uint64, coption, bool } from \"./buffer-layout.js\";\nimport { AccountsCoder } from \"../index.js\";\nimport { Idl, IdlTypeDef } from \"../../idl.js\";\nimport { accountSize } from \"../common\";\n\nexport class SplTokenAccountsCoder<A extends string = string>\n  implements AccountsCoder\n{\n  constructor(private idl: Idl) {}\n\n  public async encode<T = any>(accountName: A, account: T): Promise<Buffer> {\n    switch (accountName) {\n      case \"token\": {\n        const buffer = Buffer.alloc(165);\n        const len = TOKEN_ACCOUNT_LAYOUT.encode(account, buffer);\n        return buffer.slice(0, len);\n      }\n      case \"mint\": {\n        const buffer = Buffer.alloc(82);\n        const len = MINT_ACCOUNT_LAYOUT.encode(account, buffer);\n        return buffer.slice(0, len);\n      }\n      default: {\n        throw new Error(`Invalid account name: ${accountName}`);\n      }\n    }\n  }\n\n  public decode<T = any>(accountName: A, ix: Buffer): T {\n    return this.decodeUnchecked(accountName, ix);\n  }\n\n  public decodeUnchecked<T = any>(accountName: A, ix: Buffer): T {\n    switch (accountName) {\n      case \"token\": {\n        return decodeTokenAccount(ix);\n      }\n      case \"mint\": {\n        return decodeMintAccount(ix);\n      }\n      default: {\n        throw new Error(`Invalid account name: ${accountName}`);\n      }\n    }\n  }\n\n  // TODO: this won't use the appendData.\n  public memcmp(accountName: A, _appendData?: Buffer): any {\n    switch (accountName) {\n      case \"token\": {\n        return {\n          dataSize: 165,\n        };\n      }\n      case \"mint\": {\n        return {\n          dataSize: 82,\n        };\n      }\n      default: {\n        throw new Error(`Invalid account name: ${accountName}`);\n      }\n    }\n  }\n\n  public size(idlAccount: IdlTypeDef): number {\n    return accountSize(this.idl, idlAccount) ?? 0;\n  }\n}\n\nfunction decodeMintAccount<T = any>(ix: Buffer): T {\n  return MINT_ACCOUNT_LAYOUT.decode(ix) as T;\n}\n\nfunction decodeTokenAccount<T = any>(ix: Buffer): T {\n  return TOKEN_ACCOUNT_LAYOUT.decode(ix) as T;\n}\n\nconst MINT_ACCOUNT_LAYOUT = BufferLayout.struct([\n  coption(publicKey(), \"mintAuthority\"),\n  uint64(\"supply\"),\n  BufferLayout.u8(\"decimals\"),\n  bool(\"isInitialized\"),\n  coption(publicKey(), \"freezeAuthority\"),\n]);\n\nconst TOKEN_ACCOUNT_LAYOUT = BufferLayout.struct([\n  publicKey(\"mint\"),\n  publicKey(\"authority\"),\n  uint64(\"amount\"),\n  coption(publicKey(), \"delegate\"),\n  BufferLayout.u8(\"state\"),\n  coption(uint64(), \"isNative\"),\n  uint64(\"delegatedAmount\"),\n  coption(publicKey(), \"closeAuthority\"),\n]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}