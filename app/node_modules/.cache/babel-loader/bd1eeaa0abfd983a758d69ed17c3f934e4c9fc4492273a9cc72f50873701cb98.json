{"ast":null,"code":"'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nvar _require = require('./trees'),\n  _tr_init = _require._tr_init,\n  _tr_stored_block = _require._tr_stored_block,\n  _tr_flush_block = _require._tr_flush_block,\n  _tr_tally = _require._tr_tally,\n  _tr_align = _require._tr_align;\nvar adler32 = require('./adler32');\nvar crc32 = require('./crc32');\nvar msg = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar _require2 = require('./constants'),\n  Z_NO_FLUSH = _require2.Z_NO_FLUSH,\n  Z_PARTIAL_FLUSH = _require2.Z_PARTIAL_FLUSH,\n  Z_FULL_FLUSH = _require2.Z_FULL_FLUSH,\n  Z_FINISH = _require2.Z_FINISH,\n  Z_BLOCK = _require2.Z_BLOCK,\n  Z_OK = _require2.Z_OK,\n  Z_STREAM_END = _require2.Z_STREAM_END,\n  Z_STREAM_ERROR = _require2.Z_STREAM_ERROR,\n  Z_DATA_ERROR = _require2.Z_DATA_ERROR,\n  Z_BUF_ERROR = _require2.Z_BUF_ERROR,\n  Z_DEFAULT_COMPRESSION = _require2.Z_DEFAULT_COMPRESSION,\n  Z_FILTERED = _require2.Z_FILTERED,\n  Z_HUFFMAN_ONLY = _require2.Z_HUFFMAN_ONLY,\n  Z_RLE = _require2.Z_RLE,\n  Z_FIXED = _require2.Z_FIXED,\n  Z_DEFAULT_STRATEGY = _require2.Z_DEFAULT_STRATEGY,\n  Z_UNKNOWN = _require2.Z_UNKNOWN,\n  Z_DEFLATED = _require2.Z_DEFLATED;\n\n/*============================================================================*/\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\nvar LENGTH_CODES = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES = 30;\n/* number of distance codes */\nvar BL_CODES = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;\nvar PRESET_DICT = 0x20;\nvar INIT_STATE = 42; /* zlib header -> BUSY_STATE */\n//#ifdef GZIP\nvar GZIP_STATE = 57; /* gzip header -> BUSY_STATE | EXTRA_STATE */\n//#endif\nvar EXTRA_STATE = 69; /* gzip extra block -> NAME_STATE */\nvar NAME_STATE = 73; /* gzip file name -> COMMENT_STATE */\nvar COMMENT_STATE = 91; /* gzip comment -> HCRC_STATE */\nvar HCRC_STATE = 103; /* gzip header CRC -> BUSY_STATE */\nvar BUSY_STATE = 113; /* deflate -> FINISH_STATE */\nvar FINISH_STATE = 666; /* stream complete */\n\nvar BS_NEED_MORE = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nvar err = function err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n};\nvar rank = function rank(f) {\n  return f * 2 - (f > 4 ? 9 : 0);\n};\nvar zero = function zero(buf) {\n  var len = buf.length;\n  while (--len >= 0) {\n    buf[len] = 0;\n  }\n};\n\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */\nvar slide_hash = function slide_hash(s) {\n  var n, m;\n  var p;\n  var wsize = s.w_size;\n  n = s.hash_size;\n  p = n;\n  do {\n    m = s.head[--p];\n    s.head[p] = m >= wsize ? m - wsize : 0;\n  } while (--n);\n  n = wsize;\n  //#ifndef FASTEST\n  p = n;\n  do {\n    m = s.prev[--p];\n    s.prev[p] = m >= wsize ? m - wsize : 0;\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */\n  } while (--n);\n  //#endif\n};\n\n/* eslint-disable new-cap */\nvar HASH_ZLIB = function HASH_ZLIB(s, prev, data) {\n  return (prev << s.hash_shift ^ data) & s.hash_mask;\n};\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nvar HASH = HASH_ZLIB;\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */\nvar flush_pending = function flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) {\n    return;\n  }\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\nvar flush_block_only = function flush_block_only(s, last) {\n  _tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\nvar put_byte = function put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n};\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nvar putShortMSB = function putShortMSB(s, b) {\n  //  put_byte(s, (Byte)(b >> 8));\n  //  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = b >>> 8 & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nvar read_buf = function read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n  if (len > size) {\n    len = size;\n  }\n  if (len === 0) {\n    return 0;\n  }\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  } else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n  strm.next_in += len;\n  strm.total_in += len;\n  return len;\n};\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nvar longest_match = function longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length; /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match; /* matched string */\n  var len; /* length of current match */\n  var best_len = s.prev_length; /* best match length so far */\n  var nice_match = s.nice_match; /* stop if match long enough */\n  var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0 /*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1 = _win[scan + best_len - 1];\n  var scan_end = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) {\n    nice_match = s.lookahead;\n  }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1 = _win[scan + best_len - 1];\n      scan_end = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nvar fill_window = function fill_window(s) {\n  var _w_size = s.w_size;\n  var n, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n      if (s.insert > s.strstart) {\n        s.insert = s.strstart;\n      }\n      slide_hash(s);\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n      //#if MIN_MATCH != 3\n      //        Call update_hash() MIN_MATCH-3 more times\n      //#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n  //  if (s.high_water < s.window_size) {\n  //    const curr = s.strstart + s.lookahead;\n  //    let init = 0;\n  //\n  //    if (s.high_water < curr) {\n  //      /* Previous high water mark below current data -- zero WIN_INIT\n  //       * bytes or up to end of window, whichever is less.\n  //       */\n  //      init = s.window_size - curr;\n  //      if (init > WIN_INIT)\n  //        init = WIN_INIT;\n  //      zmemzero(s->window + curr, (unsigned)init);\n  //      s->high_water = curr + init;\n  //    }\n  //    else if (s->high_water < (ulg)curr + WIN_INIT) {\n  //      /* High water mark at or above current data, but below current data\n  //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n  //       * to end of window, whichever is less.\n  //       */\n  //      init = (ulg)curr + WIN_INIT - s->high_water;\n  //      if (init > s->window_size - s->high_water)\n  //        init = s->window_size - s->high_water;\n  //      zmemzero(s->window + s->high_water, (unsigned)init);\n  //      s->high_water += init;\n  //    }\n  //  }\n  //\n  //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n  //    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */\nvar deflate_stored = function deflate_stored(s, flush) {\n  /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */\n  var min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n\n  /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */\n  var len,\n    left,\n    have,\n    last = 0;\n  var used = s.strm.avail_in;\n  do {\n    /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */\n    len = 65535 /* MAX_STORED */; /* maximum deflate stored block length */\n    have = s.bi_valid + 42 >> 3; /* number of header bytes */\n    if (s.strm.avail_out < have) {\n      /* need room for header */\n      break;\n    }\n    /* maximum stored block length that will fit in avail_out: */\n    have = s.strm.avail_out - have;\n    left = s.strstart - s.block_start; /* bytes left in window */\n    if (len > left + s.strm.avail_in) {\n      len = left + s.strm.avail_in; /* limit len to the input */\n    }\n\n    if (len > have) {\n      len = have; /* limit len to the output */\n    }\n\n    /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */\n    if (len < min_block && (len === 0 && flush !== Z_FINISH || flush === Z_NO_FLUSH || len !== left + s.strm.avail_in)) {\n      break;\n    }\n\n    /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */\n    last = flush === Z_FINISH && len === left + s.strm.avail_in ? 1 : 0;\n    _tr_stored_block(s, 0, 0, last);\n\n    /* Replace the lengths in the dummy stored block with len. */\n    s.pending_buf[s.pending - 4] = len;\n    s.pending_buf[s.pending - 3] = len >> 8;\n    s.pending_buf[s.pending - 2] = ~len;\n    s.pending_buf[s.pending - 1] = ~len >> 8;\n\n    /* Write the stored block header bytes. */\n    flush_pending(s.strm);\n\n    //#ifdef ZLIB_DEBUG\n    //    /* Update debugging counts for the data about to be copied. */\n    //    s->compressed_len += len << 3;\n    //    s->bits_sent += len << 3;\n    //#endif\n\n    /* Copy uncompressed bytes from the window to next_out. */\n    if (left) {\n      if (left > len) {\n        left = len;\n      }\n      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n      s.strm.next_out += left;\n      s.strm.avail_out -= left;\n      s.strm.total_out += left;\n      s.block_start += left;\n      len -= left;\n    }\n\n    /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */\n    if (len) {\n      read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n      s.strm.next_out += len;\n      s.strm.avail_out -= len;\n      s.strm.total_out += len;\n    }\n  } while (last === 0);\n\n  /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */\n  used -= s.strm.avail_in; /* number of input bytes directly copied */\n  if (used) {\n    /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */\n    if (used >= s.w_size) {\n      /* supplant the previous history */\n      s.matches = 2; /* clear hash */\n      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n      s.strstart = s.w_size;\n      s.insert = s.strstart;\n    } else {\n      if (s.window_size - s.strstart <= used) {\n        /* Slide the window down. */\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) {\n          s.matches++; /* add a pending slide_hash() */\n        }\n\n        if (s.insert > s.strstart) {\n          s.insert = s.strstart;\n        }\n      }\n      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n      s.strstart += used;\n      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n    }\n    s.block_start = s.strstart;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* If the last block was written to next_out, then done. */\n  if (last) {\n    return BS_FINISH_DONE;\n  }\n\n  /* If flushing and all input has been consumed, then done. */\n  if (flush !== Z_NO_FLUSH && flush !== Z_FINISH && s.strm.avail_in === 0 && s.strstart === s.block_start) {\n    return BS_BLOCK_DONE;\n  }\n\n  /* Fill the window with any remaining input. */\n  have = s.window_size - s.strstart;\n  if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n    /* Slide the window down. */\n    s.block_start -= s.w_size;\n    s.strstart -= s.w_size;\n    //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n    if (s.matches < 2) {\n      s.matches++; /* add a pending slide_hash() */\n    }\n\n    have += s.w_size; /* more space now */\n    if (s.insert > s.strstart) {\n      s.insert = s.strstart;\n    }\n  }\n  if (have > s.strm.avail_in) {\n    have = s.strm.avail_in;\n  }\n  if (have) {\n    read_buf(s.strm, s.window, s.strstart, have);\n    s.strstart += have;\n    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */\n  have = s.bi_valid + 42 >> 3; /* number of header bytes */\n  /* maximum stored block length that will fit in pending: */\n  have = s.pending_buf_size - have > 65535 /* MAX_STORED */ ? 65535 /* MAX_STORED */ : s.pending_buf_size - have;\n  min_block = have > s.w_size ? s.w_size : have;\n  left = s.strstart - s.block_start;\n  if (left >= min_block || (left || flush === Z_FINISH) && flush !== Z_NO_FLUSH && s.strm.avail_in === 0 && left <= have) {\n    len = left > have ? have : left;\n    last = flush === Z_FINISH && s.strm.avail_in === 0 && len === left ? 1 : 0;\n    _tr_stored_block(s, s.block_start, len, last);\n    s.block_start += len;\n    flush_pending(s.strm);\n  }\n\n  /* We've done all we can with the available input and output. */\n  return last ? BS_FINISH_STARTED : BS_NEED_MORE;\n};\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nvar deflate_fast = function deflate_fast(s, flush) {\n  var hash_head; /* head of the hash chain */\n  var bflush; /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0 /*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0 /*NIL*/ && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match /*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n        //#if MIN_MATCH != 3\n        //                Call UPDATE_HASH() MIN_MATCH-3 more times\n        //#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nvar deflate_slow = function deflate_slow(s, flush) {\n  var hash_head; /* head of hash chain */\n  var bflush; /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break;\n      } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0 /*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n    if (hash_head !== 0 /*NIL*/ && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD /*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096 /*TOO_FAR*/)) {\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nvar deflate_rle = function deflate_rle(s, flush) {\n  var bflush; /* set if current block must be flushed */\n  var prev; /* byte at distance one to match */\n  var scan, strend; /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break;\n      } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nvar deflate_huff = function deflate_huff(s, flush) {\n  var bflush; /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break; /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\nvar configuration_table = [/*      good lazy nice chain */\nnew Config(0, 0, 0, 0, deflate_stored), /* 0 store only */\nnew Config(4, 4, 8, 4, deflate_fast), /* 1 max speed, no lazy matches */\nnew Config(4, 5, 16, 8, deflate_fast), /* 2 */\nnew Config(4, 6, 32, 32, deflate_fast), /* 3 */\n\nnew Config(4, 4, 16, 16, deflate_slow), /* 4 lazy matches */\nnew Config(8, 16, 32, 32, deflate_slow), /* 5 */\nnew Config(8, 16, 128, 128, deflate_slow), /* 6 */\nnew Config(8, 32, 128, 256, deflate_slow), /* 7 */\nnew Config(32, 128, 258, 1024, deflate_slow), /* 8 */\nnew Config(32, 258, 258, 4096, deflate_slow) /* 9 max compression */];\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nvar lm_init = function lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\nfunction DeflateState() {\n  this.strm = null; /* pointer back to this zlib stream */\n  this.status = 0; /* as the name implies */\n  this.pending_buf = null; /* output still pending */\n  this.pending_buf_size = 0; /* size of pending_buf */\n  this.pending_out = 0; /* next pending byte to output to the stream */\n  this.pending = 0; /* nb of bytes in the pending buffer */\n  this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null; /* gzip header information to write */\n  this.gzindex = 0; /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1; /* value of flush param for previous deflate call */\n\n  this.w_size = 0; /* LZ77 window size (32K by default) */\n  this.w_bits = 0; /* log2(w_size)  (8..16) */\n  this.w_mask = 0; /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null; /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0; /* hash index of string to be inserted */\n  this.hash_size = 0; /* number of elements in hash table */\n  this.hash_bits = 0; /* log2(hash_size) */\n  this.hash_mask = 0; /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0; /* length of best match */\n  this.prev_match = 0; /* previous match */\n  this.match_available = 0; /* set if previous match exists */\n  this.strstart = 0; /* start of string to insert */\n  this.match_start = 0; /* start of matching string */\n  this.lookahead = 0; /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0; /* compression level (1..9) */\n  this.strategy = 0; /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n  /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n  this.l_desc = null; /* desc. for literal tree */\n  this.d_desc = null; /* desc. for distance tree */\n  this.bl_desc = null; /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1); /* heap used to build the Huffman trees */\n  zero(this.heap);\n  this.heap_len = 0; /* number of elements in the heap */\n  this.heap_max = 0; /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.sym_buf = 0; /* buffer for distances and literals/lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.sym_next = 0; /* running index in sym_buf */\n  this.sym_end = 0; /* symbol table full when sym_next reaches this */\n\n  this.opt_len = 0; /* bit length of current block with optimal trees */\n  this.static_len = 0; /* bit length of current block with static trees */\n  this.matches = 0; /* number of string matches in current block */\n  this.insert = 0; /* bytes at end of window left to insert */\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */\nvar deflateStateCheck = function deflateStateCheck(strm) {\n  if (!strm) {\n    return 1;\n  }\n  var s = strm.state;\n  if (!s || s.strm !== strm || s.status !== INIT_STATE &&\n  //#ifdef GZIP\n  s.status !== GZIP_STATE &&\n  //#endif\n  s.status !== EXTRA_STATE && s.status !== NAME_STATE && s.status !== COMMENT_STATE && s.status !== HCRC_STATE && s.status !== BUSY_STATE && s.status !== FINISH_STATE) {\n    return 1;\n  }\n  return 0;\n};\nvar deflateResetKeep = function deflateResetKeep(strm) {\n  if (deflateStateCheck(strm)) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n  var s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n\n  s.status =\n  //#ifdef GZIP\n  s.wrap === 2 ? GZIP_STATE :\n  //#endif\n  s.wrap ? INIT_STATE : BUSY_STATE;\n  strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)\n  : 1; // adler32(0, Z_NULL, 0)\n  s.last_flush = -2;\n  _tr_init(s);\n  return Z_OK;\n};\nvar deflateReset = function deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\nvar deflateSetHeader = function deflateSetHeader(strm, head) {\n  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {\n    return Z_STREAM_ERROR;\n  }\n  strm.state.gzhead = head;\n  return Z_OK;\n};\nvar deflateInit2 = function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) {\n    // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n  if (windowBits < 0) {\n    /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  } else if (windowBits > 15) {\n    wrap = 2; /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED || windowBits === 8 && wrap !== 1) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n  strm.state = s;\n  s.strm = strm;\n  s.status = INIT_STATE; /* to pass state test in deflateReset() */\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << memLevel + 6; /* 16K elements by default */\n\n  /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->sym_buf = s->pending_buf + s->lit_bufsize;\n  s.sym_buf = s.lit_bufsize;\n\n  //s->sym_end = (s->lit_bufsize - 1) * 3;\n  s.sym_end = (s.lit_bufsize - 1) * 3;\n  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n  return deflateReset(strm);\n};\nvar deflateInit = function deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n};\n\n/* ========================================================================= */\nvar deflate = function deflate(strm, flush) {\n  if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n  var s = strm.state;\n  if (!strm.output || strm.avail_in !== 0 && !strm.input || s.status === FINISH_STATE && flush !== Z_FINISH) {\n    return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n  var old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Write the header */\n  if (s.status === INIT_STATE && s.wrap === 0) {\n    s.status = BUSY_STATE;\n  }\n  if (s.status === INIT_STATE) {\n    /* zlib header */\n    var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;\n    var level_flags = -1;\n    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n      level_flags = 0;\n    } else if (s.level < 6) {\n      level_flags = 1;\n    } else if (s.level === 6) {\n      level_flags = 2;\n    } else {\n      level_flags = 3;\n    }\n    header |= level_flags << 6;\n    if (s.strstart !== 0) {\n      header |= PRESET_DICT;\n    }\n    header += 31 - header % 31;\n    putShortMSB(s, header);\n\n    /* Save the adler32 of the preset dictionary: */\n    if (s.strstart !== 0) {\n      putShortMSB(s, strm.adler >>> 16);\n      putShortMSB(s, strm.adler & 0xffff);\n    }\n    strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK;\n    }\n  }\n  //#ifdef GZIP\n  if (s.status === GZIP_STATE) {\n    /* gzip header */\n    strm.adler = 0; //crc32(0L, Z_NULL, 0);\n    put_byte(s, 31);\n    put_byte(s, 139);\n    put_byte(s, 8);\n    if (!s.gzhead) {\n      // s->gzhead == Z_NULL\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);\n      put_byte(s, OS_CODE);\n      s.status = BUSY_STATE;\n\n      /* Compression must start with an empty pending buffer */\n      flush_pending(strm);\n      if (s.pending !== 0) {\n        s.last_flush = -1;\n        return Z_OK;\n      }\n    } else {\n      put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));\n      put_byte(s, s.gzhead.time & 0xff);\n      put_byte(s, s.gzhead.time >> 8 & 0xff);\n      put_byte(s, s.gzhead.time >> 16 & 0xff);\n      put_byte(s, s.gzhead.time >> 24 & 0xff);\n      put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);\n      put_byte(s, s.gzhead.os & 0xff);\n      if (s.gzhead.extra && s.gzhead.extra.length) {\n        put_byte(s, s.gzhead.extra.length & 0xff);\n        put_byte(s, s.gzhead.extra.length >> 8 & 0xff);\n      }\n      if (s.gzhead.hcrc) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n      }\n      s.gzindex = 0;\n      s.status = EXTRA_STATE;\n    }\n  }\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra /* != Z_NULL*/) {\n      var beg = s.pending; /* start of bytes to update crc */\n      var left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n      while (s.pending + left > s.pending_buf_size) {\n        var copy = s.pending_buf_size - s.pending;\n        // zmemcpy(s.pending_buf + s.pending,\n        //    s.gzhead.extra + s.gzindex, copy);\n        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n        s.pending = s.pending_buf_size;\n        //--- HCRC_UPDATE(beg) ---//\n        if (s.gzhead.hcrc && s.pending > beg) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n        }\n        //---//\n        s.gzindex += copy;\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK;\n        }\n        beg = 0;\n        left -= copy;\n      }\n      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n      var gzhead_extra = new Uint8Array(s.gzhead.extra);\n      // zmemcpy(s->pending_buf + s->pending,\n      //     s->gzhead->extra + s->gzindex, left);\n      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n      s.pending += left;\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = NAME_STATE;\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name /* != Z_NULL*/) {\n      var _beg = s.pending; /* start of bytes to update crc */\n      var val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > _beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - _beg, _beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK;\n          }\n          _beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > _beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - _beg, _beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = COMMENT_STATE;\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment /* != Z_NULL*/) {\n      var _beg2 = s.pending; /* start of bytes to update crc */\n      var _val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > _beg2) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - _beg2, _beg2);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK;\n          }\n          _beg2 = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          _val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          _val = 0;\n        }\n        put_byte(s, _val);\n      } while (_val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > _beg2) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - _beg2, _beg2);\n      }\n      //---//\n    }\n\n    s.status = HCRC_STATE;\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK;\n        }\n      }\n      put_byte(s, strm.adler & 0xff);\n      put_byte(s, strm.adler >> 8 & 0xff);\n      strm.adler = 0; //crc32(0L, Z_NULL, 0);\n    }\n\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK;\n    }\n  }\n  //#endif\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {\n    var bstate = s.level === 0 ? deflate_stored(s, flush) : s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      } else if (flush !== Z_BLOCK) {\n        /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/ /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  if (flush !== Z_FINISH) {\n    return Z_OK;\n  }\n  if (s.wrap <= 0) {\n    return Z_STREAM_END;\n  }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, strm.adler >> 8 & 0xff);\n    put_byte(s, strm.adler >> 16 & 0xff);\n    put_byte(s, strm.adler >> 24 & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, strm.total_in >> 8 & 0xff);\n    put_byte(s, strm.total_in >> 16 & 0xff);\n    put_byte(s, strm.total_in >> 24 & 0xff);\n  } else {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) {\n    s.wrap = -s.wrap;\n  }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n};\nvar deflateEnd = function deflateEnd(strm) {\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR;\n  }\n  var status = strm.state.status;\n  strm.state = null;\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n};\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nvar deflateSetDictionary = function deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR;\n  }\n  var s = strm.state;\n  var wrap = s.wrap;\n  if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n  s.wrap = 0; /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {\n      /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    var tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  var avail = strm.avail_in;\n  var next = strm.next_in;\n  var input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    var str = s.strstart;\n    var n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n};\nmodule.exports.deflateInit = deflateInit;\nmodule.exports.deflateInit2 = deflateInit2;\nmodule.exports.deflateReset = deflateReset;\nmodule.exports.deflateResetKeep = deflateResetKeep;\nmodule.exports.deflateSetHeader = deflateSetHeader;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateEnd = deflateEnd;\nmodule.exports.deflateSetDictionary = deflateSetDictionary;\nmodule.exports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/","map":{"version":3,"names":["_require","require","_tr_init","_tr_stored_block","_tr_flush_block","_tr_tally","_tr_align","adler32","crc32","msg","_require2","Z_NO_FLUSH","Z_PARTIAL_FLUSH","Z_FULL_FLUSH","Z_FINISH","Z_BLOCK","Z_OK","Z_STREAM_END","Z_STREAM_ERROR","Z_DATA_ERROR","Z_BUF_ERROR","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY","Z_UNKNOWN","Z_DEFLATED","MAX_MEM_LEVEL","MAX_WBITS","DEF_MEM_LEVEL","LENGTH_CODES","LITERALS","L_CODES","D_CODES","BL_CODES","HEAP_SIZE","MAX_BITS","MIN_MATCH","MAX_MATCH","MIN_LOOKAHEAD","PRESET_DICT","INIT_STATE","GZIP_STATE","EXTRA_STATE","NAME_STATE","COMMENT_STATE","HCRC_STATE","BUSY_STATE","FINISH_STATE","BS_NEED_MORE","BS_BLOCK_DONE","BS_FINISH_STARTED","BS_FINISH_DONE","OS_CODE","err","strm","errorCode","rank","f","zero","buf","len","length","slide_hash","s","n","m","p","wsize","w_size","hash_size","head","prev","HASH_ZLIB","data","hash_shift","hash_mask","HASH","flush_pending","state","pending","avail_out","output","set","pending_buf","subarray","pending_out","next_out","total_out","flush_block_only","last","block_start","strstart","put_byte","b","putShortMSB","read_buf","start","size","avail_in","input","next_in","wrap","adler","total_in","longest_match","cur_match","chain_length","max_chain_length","scan","match","best_len","prev_length","nice_match","limit","_win","window","wmask","w_mask","strend","scan_end1","scan_end","good_match","lookahead","match_start","fill_window","_w_size","more","str","window_size","insert","ins_h","deflate_stored","flush","min_block","pending_buf_size","left","have","used","bi_valid","matches","high_water","deflate_fast","hash_head","bflush","match_length","max_lazy_match","sym_next","deflate_slow","max_insert","prev_match","strategy","match_available","deflate_rle","deflate_huff","Config","good_length","max_lazy","nice_length","max_chain","func","configuration_table","lm_init","level","DeflateState","status","gzhead","gzindex","method","last_flush","w_bits","hash_bits","dyn_ltree","Uint16Array","dyn_dtree","bl_tree","l_desc","d_desc","bl_desc","bl_count","heap","heap_len","heap_max","depth","sym_buf","lit_bufsize","sym_end","opt_len","static_len","bi_buf","deflateStateCheck","deflateResetKeep","data_type","deflateReset","ret","deflateSetHeader","deflateInit2","windowBits","memLevel","Uint8Array","deflateInit","deflate","old_flush","header","level_flags","text","hcrc","extra","name","comment","time","os","beg","copy","gzhead_extra","val","charCodeAt","bstate","deflateEnd","deflateSetDictionary","dictionary","dictLength","tmpDict","avail","next","module","exports","deflateInfo"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/pako/lib/zlib/deflate.js"],"sourcesContent":["'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = require('./trees');\nconst adler32 = require('./adler32');\nconst crc32   = require('./crc32');\nconst msg     = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK,\n  Z_OK, Z_STREAM_END, Z_STREAM_ERROR, Z_DATA_ERROR, Z_BUF_ERROR,\n  Z_DEFAULT_COMPRESSION,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY,\n  Z_UNKNOWN,\n  Z_DEFLATED\n} = require('./constants');\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */\n//#ifdef GZIP\nconst GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */\n//#endif\nconst EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */\nconst NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */\nconst COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */\nconst HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */\nconst BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */\nconst FINISH_STATE  = 666;    /* stream complete */\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = msg[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) * 2) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */\nconst slide_hash = (s) => {\n  let n, m;\n  let p;\n  let wsize = s.w_size;\n\n  n = s.hash_size;\n  p = n;\n  do {\n    m = s.head[--p];\n    s.head[p] = (m >= wsize ? m - wsize : 0);\n  } while (--n);\n  n = wsize;\n//#ifndef FASTEST\n  p = n;\n  do {\n    m = s.prev[--p];\n    s.prev[p] = (m >= wsize ? m - wsize : 0);\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */\n  } while (--n);\n//#endif\n};\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out  += len;\n  s.pending_out  += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending      -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let n, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n      if (s.insert > s.strstart) {\n        s.insert = s.strstart;\n      }\n      slide_hash(s);\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */\n  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n\n  /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */\n  let len, left, have, last = 0;\n  let used = s.strm.avail_in;\n  do {\n    /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */\n    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */\n    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    if (s.strm.avail_out < have) {         /* need room for header */\n      break;\n    }\n      /* maximum stored block length that will fit in avail_out: */\n    have = s.strm.avail_out - have;\n    left = s.strstart - s.block_start;  /* bytes left in window */\n    if (len > left + s.strm.avail_in) {\n      len = left + s.strm.avail_in;   /* limit len to the input */\n    }\n    if (len > have) {\n      len = have;             /* limit len to the output */\n    }\n\n    /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */\n    if (len < min_block && ((len === 0 && flush !== Z_FINISH) ||\n                        flush === Z_NO_FLUSH ||\n                        len !== left + s.strm.avail_in)) {\n      break;\n    }\n\n    /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */\n    last = flush === Z_FINISH && len === left + s.strm.avail_in ? 1 : 0;\n    _tr_stored_block(s, 0, 0, last);\n\n    /* Replace the lengths in the dummy stored block with len. */\n    s.pending_buf[s.pending - 4] = len;\n    s.pending_buf[s.pending - 3] = len >> 8;\n    s.pending_buf[s.pending - 2] = ~len;\n    s.pending_buf[s.pending - 1] = ~len >> 8;\n\n    /* Write the stored block header bytes. */\n    flush_pending(s.strm);\n\n//#ifdef ZLIB_DEBUG\n//    /* Update debugging counts for the data about to be copied. */\n//    s->compressed_len += len << 3;\n//    s->bits_sent += len << 3;\n//#endif\n\n    /* Copy uncompressed bytes from the window to next_out. */\n    if (left) {\n      if (left > len) {\n        left = len;\n      }\n      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n      s.strm.next_out += left;\n      s.strm.avail_out -= left;\n      s.strm.total_out += left;\n      s.block_start += left;\n      len -= left;\n    }\n\n    /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */\n    if (len) {\n      read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n      s.strm.next_out += len;\n      s.strm.avail_out -= len;\n      s.strm.total_out += len;\n    }\n  } while (last === 0);\n\n  /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */\n  used -= s.strm.avail_in;    /* number of input bytes directly copied */\n  if (used) {\n    /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */\n    if (used >= s.w_size) {  /* supplant the previous history */\n      s.matches = 2;     /* clear hash */\n      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n      s.strstart = s.w_size;\n      s.insert = s.strstart;\n    }\n    else {\n      if (s.window_size - s.strstart <= used) {\n        /* Slide the window down. */\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) {\n          s.matches++;   /* add a pending slide_hash() */\n        }\n        if (s.insert > s.strstart) {\n          s.insert = s.strstart;\n        }\n      }\n      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n      s.strstart += used;\n      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n    }\n    s.block_start = s.strstart;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* If the last block was written to next_out, then done. */\n  if (last) {\n    return BS_FINISH_DONE;\n  }\n\n  /* If flushing and all input has been consumed, then done. */\n  if (flush !== Z_NO_FLUSH && flush !== Z_FINISH &&\n    s.strm.avail_in === 0 && s.strstart === s.block_start) {\n    return BS_BLOCK_DONE;\n  }\n\n  /* Fill the window with any remaining input. */\n  have = s.window_size - s.strstart;\n  if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n    /* Slide the window down. */\n    s.block_start -= s.w_size;\n    s.strstart -= s.w_size;\n    //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n    if (s.matches < 2) {\n      s.matches++;       /* add a pending slide_hash() */\n    }\n    have += s.w_size;      /* more space now */\n    if (s.insert > s.strstart) {\n      s.insert = s.strstart;\n    }\n  }\n  if (have > s.strm.avail_in) {\n    have = s.strm.avail_in;\n  }\n  if (have) {\n    read_buf(s.strm, s.window, s.strstart, have);\n    s.strstart += have;\n    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */\n  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    /* maximum stored block length that will fit in pending: */\n  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;\n  min_block = have > s.w_size ? s.w_size : have;\n  left = s.strstart - s.block_start;\n  if (left >= min_block ||\n     ((left || flush === Z_FINISH) && flush !== Z_NO_FLUSH &&\n     s.strm.avail_in === 0 && left <= have)) {\n    len = left > have ? have : left;\n    last = flush === Z_FINISH && s.strm.avail_in === 0 &&\n         len === left ? 1 : 0;\n    _tr_stored_block(s, s.block_start, len, last);\n    s.block_start += len;\n    flush_pending(s.strm);\n  }\n\n  /* We've done all we can with the available input and output. */\n  return last ? BS_FINISH_STARTED : BS_NEED_MORE;\n};\n\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.sym_buf = 0;        /* buffer for distances and literals/lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.sym_next = 0;      /* running index in sym_buf */\n  this.sym_end = 0;       /* symbol table full when sym_next reaches this */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */\nconst deflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const s = strm.state;\n  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&\n//#ifdef GZIP\n                                s.status !== GZIP_STATE &&\n//#endif\n                                s.status !== EXTRA_STATE &&\n                                s.status !== NAME_STATE &&\n                                s.status !== COMMENT_STATE &&\n                                s.status !== HCRC_STATE &&\n                                s.status !== BUSY_STATE &&\n                                s.status !== FINISH_STATE)) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status =\n//#ifdef GZIP\n    s.wrap === 2 ? GZIP_STATE :\n//#endif\n    s.wrap ? INIT_STATE : BUSY_STATE;\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = -2;\n  _tr_init(s);\n  return Z_OK;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {\n    return Z_STREAM_ERROR;\n  }\n  strm.state.gzhead = head;\n  return Z_OK;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n  s.status = INIT_STATE;     /* to pass state test in deflateReset() */\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->sym_buf = s->pending_buf + s->lit_bufsize;\n  s.sym_buf = s.lit_bufsize;\n\n  //s->sym_end = (s->lit_bufsize - 1) * 3;\n  s.sym_end = (s.lit_bufsize - 1) * 3;\n  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n};\n\n\n/* ========================================================================= */\nconst deflate = (strm, flush) => {\n\n  if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (strm.avail_in !== 0 && !strm.input) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Write the header */\n  if (s.status === INIT_STATE && s.wrap === 0) {\n    s.status = BUSY_STATE;\n  }\n  if (s.status === INIT_STATE) {\n    /* zlib header */\n    let header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n    let level_flags = -1;\n\n    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n      level_flags = 0;\n    } else if (s.level < 6) {\n      level_flags = 1;\n    } else if (s.level === 6) {\n      level_flags = 2;\n    } else {\n      level_flags = 3;\n    }\n    header |= (level_flags << 6);\n    if (s.strstart !== 0) { header |= PRESET_DICT; }\n    header += 31 - (header % 31);\n\n    putShortMSB(s, header);\n\n    /* Save the adler32 of the preset dictionary: */\n    if (s.strstart !== 0) {\n      putShortMSB(s, strm.adler >>> 16);\n      putShortMSB(s, strm.adler & 0xffff);\n    }\n    strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK;\n    }\n  }\n//#ifdef GZIP\n  if (s.status === GZIP_STATE) {\n    /* gzip header */\n    strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n    put_byte(s, 31);\n    put_byte(s, 139);\n    put_byte(s, 8);\n    if (!s.gzhead) { // s->gzhead == Z_NULL\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, OS_CODE);\n      s.status = BUSY_STATE;\n\n      /* Compression must start with an empty pending buffer */\n      flush_pending(strm);\n      if (s.pending !== 0) {\n        s.last_flush = -1;\n        return Z_OK;\n      }\n    }\n    else {\n      put_byte(s, (s.gzhead.text ? 1 : 0) +\n                  (s.gzhead.hcrc ? 2 : 0) +\n                  (!s.gzhead.extra ? 0 : 4) +\n                  (!s.gzhead.name ? 0 : 8) +\n                  (!s.gzhead.comment ? 0 : 16)\n      );\n      put_byte(s, s.gzhead.time & 0xff);\n      put_byte(s, (s.gzhead.time >> 8) & 0xff);\n      put_byte(s, (s.gzhead.time >> 16) & 0xff);\n      put_byte(s, (s.gzhead.time >> 24) & 0xff);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, s.gzhead.os & 0xff);\n      if (s.gzhead.extra && s.gzhead.extra.length) {\n        put_byte(s, s.gzhead.extra.length & 0xff);\n        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n      }\n      if (s.gzhead.hcrc) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n      }\n      s.gzindex = 0;\n      s.status = EXTRA_STATE;\n    }\n  }\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n      while (s.pending + left > s.pending_buf_size) {\n        let copy = s.pending_buf_size - s.pending;\n        // zmemcpy(s.pending_buf + s.pending,\n        //    s.gzhead.extra + s.gzindex, copy);\n        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n        s.pending = s.pending_buf_size;\n        //--- HCRC_UPDATE(beg) ---//\n        if (s.gzhead.hcrc && s.pending > beg) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n        }\n        //---//\n        s.gzindex += copy;\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK;\n        }\n        beg = 0;\n        left -= copy;\n      }\n      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n      let gzhead_extra = new Uint8Array(s.gzhead.extra);\n      // zmemcpy(s->pending_buf + s->pending,\n      //     s->gzhead->extra + s->gzindex, left);\n      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n      s.pending += left;\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = NAME_STATE;\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = COMMENT_STATE;\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n    }\n    s.status = HCRC_STATE;\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK;\n        }\n      }\n      put_byte(s, strm.adler & 0xff);\n      put_byte(s, (strm.adler >> 8) & 0xff);\n      strm.adler = 0; //crc32(0L, Z_NULL, 0);\n    }\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK;\n    }\n  }\n//#endif\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    let bstate = s.level === 0 ? deflate_stored(s, flush) :\n                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :\n                 s.strategy === Z_RLE ? deflate_rle(s, flush) :\n                 configuration_table[s.level].func(s, flush);\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR;\n  }\n\n  const status = strm.state.status;\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n};\n\n\nmodule.exports.deflateInit = deflateInit;\nmodule.exports.deflateInit2 = deflateInit2;\nmodule.exports.deflateReset = deflateReset;\nmodule.exports.deflateResetKeep = deflateResetKeep;\nmodule.exports.deflateSetHeader = deflateSetHeader;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateEnd = deflateEnd;\nmodule.exports.deflateSetDictionary = deflateSetDictionary;\nmodule.exports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}