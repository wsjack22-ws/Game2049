{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n__exportStar(require(\"./borsh/index.js\"), exports);\n__exportStar(require(\"./spl-token/index.js\"), exports);","map":{"version":3,"names":["__exportStar","require","exports"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/coder/index.ts"],"sourcesContent":["import { IdlEvent, IdlTypeDef } from \"../idl.js\";\nimport { Event } from \"../program/event.js\";\n\nexport * from \"./borsh/index.js\";\nexport * from \"./spl-token/index.js\";\n\n/**\n * Coder provides a facade for encoding and decoding all IDL related objects.\n */\nexport interface Coder {\n  /**\n   * Instruction coder.\n   */\n  readonly instruction: InstructionCoder;\n\n  /**\n   * Account coder.\n   */\n  readonly accounts: AccountsCoder;\n\n  /**\n   * Coder for state structs.\n   */\n  readonly state: StateCoder;\n\n  /**\n   * Coder for events.\n   */\n  readonly events: EventCoder;\n}\n\nexport interface StateCoder {\n  encode<T = any>(name: string, account: T): Promise<Buffer>;\n  decode<T = any>(ix: Buffer): T;\n}\n\nexport interface AccountsCoder<A extends string = string> {\n  encode<T = any>(accountName: A, account: T): Promise<Buffer>;\n  decode<T = any>(accountName: A, ix: Buffer): T;\n  decodeUnchecked<T = any>(accountName: A, ix: Buffer): T;\n  memcmp(accountName: A, appendData?: Buffer): any;\n  size(idlAccount: IdlTypeDef): number;\n}\n\nexport interface InstructionCoder {\n  encode(ixName: string, ix: any): Buffer;\n  encodeState(ixName: string, ix: any): Buffer;\n}\n\nexport interface EventCoder {\n  decode<E extends IdlEvent = IdlEvent, T = Record<string, string>>(\n    log: string\n  ): Event<E, T> | null;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAGAA,YAAA,CAAAC,OAAA,sBAAAC,OAAA;AACAF,YAAA,CAAAC,OAAA,0BAAAC,OAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}