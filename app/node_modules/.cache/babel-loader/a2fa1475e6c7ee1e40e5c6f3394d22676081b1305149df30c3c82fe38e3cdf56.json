{"ast":null,"code":"import * as base64 from \"base64-js\";\nimport { sha256 } from \"js-sha256\";\nimport { IdlCoder } from \"./idl\";\nexport class EventCoder {\n  constructor(idl) {\n    if (idl.events === undefined) {\n      this.layouts = new Map();\n      return;\n    }\n    const layouts = idl.events.map(event => {\n      let eventTypeDef = {\n        name: event.name,\n        type: {\n          kind: \"struct\",\n          fields: event.fields.map(f => {\n            return {\n              name: f.name,\n              type: f.type\n            };\n          })\n        }\n      };\n      return [event.name, IdlCoder.typeDefLayout(eventTypeDef, idl.types)];\n    });\n    // @ts-ignore\n    this.layouts = new Map(layouts);\n    this.discriminators = new Map(idl.events === undefined ? [] : idl.events.map(e => [base64.fromByteArray(eventDiscriminator(e.name)), e.name]));\n  }\n  decode(log) {\n    let logArr;\n    // This will throw if log length is not a multiple of 4.\n    try {\n      logArr = Buffer.from(base64.toByteArray(log));\n    } catch (e) {\n      return null;\n    }\n    const disc = base64.fromByteArray(logArr.slice(0, 8));\n    // Only deserialize if the discriminator implies a proper event.\n    const eventName = this.discriminators.get(disc);\n    if (eventName === undefined) {\n      return null;\n    }\n    const layout = this.layouts.get(eventName);\n    if (!layout) {\n      throw new Error(`Unknown event: ${eventName}`);\n    }\n    const data = layout.decode(logArr.slice(8));\n    return {\n      data,\n      name: eventName\n    };\n  }\n}\nexport function eventDiscriminator(name) {\n  return Buffer.from(sha256.digest(`event:${name}`)).slice(0, 8);\n}","map":{"version":3,"names":["base64","sha256","IdlCoder","EventCoder","constructor","idl","events","undefined","layouts","Map","map","event","eventTypeDef","name","type","kind","fields","f","typeDefLayout","types","discriminators","e","fromByteArray","eventDiscriminator","decode","log","logArr","Buffer","from","toByteArray","disc","slice","eventName","get","layout","Error","data","digest"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/coder/event.ts"],"sourcesContent":["import * as base64 from \"base64-js\";\nimport { Layout } from \"buffer-layout\";\nimport { sha256 } from \"js-sha256\";\nimport { Idl, IdlEvent, IdlTypeDef } from \"../idl\";\nimport { Event, EventData } from \"../program/event\";\nimport { IdlCoder } from \"./idl\";\n\nexport class EventCoder {\n  /**\n   * Maps account type identifier to a layout.\n   */\n  private layouts: Map<string, Layout>;\n\n  /**\n   * Maps base64 encoded event discriminator to event name.\n   */\n  private discriminators: Map<string, string>;\n\n  public constructor(idl: Idl) {\n    if (idl.events === undefined) {\n      this.layouts = new Map();\n      return;\n    }\n    const layouts = idl.events.map((event) => {\n      let eventTypeDef: IdlTypeDef = {\n        name: event.name,\n        type: {\n          kind: \"struct\",\n          fields: event.fields.map((f) => {\n            return { name: f.name, type: f.type };\n          }),\n        },\n      };\n      return [event.name, IdlCoder.typeDefLayout(eventTypeDef, idl.types)];\n    });\n    // @ts-ignore\n    this.layouts = new Map(layouts);\n\n    this.discriminators = new Map<string, string>(\n      idl.events === undefined\n        ? []\n        : idl.events.map((e) => [\n            base64.fromByteArray(eventDiscriminator(e.name)),\n            e.name,\n          ])\n    );\n  }\n\n  public decode<E extends IdlEvent = IdlEvent, T = Record<string, never>>(\n    log: string\n  ): Event<E, T> | null {\n    let logArr: Buffer;\n    // This will throw if log length is not a multiple of 4.\n    try {\n      logArr = Buffer.from(base64.toByteArray(log));\n    } catch (e) {\n      return null;\n    }\n    const disc = base64.fromByteArray(logArr.slice(0, 8));\n\n    // Only deserialize if the discriminator implies a proper event.\n    const eventName = this.discriminators.get(disc);\n    if (eventName === undefined) {\n      return null;\n    }\n\n    const layout = this.layouts.get(eventName);\n    if (!layout) {\n      throw new Error(`Unknown event: ${eventName}`);\n    }\n    const data = layout.decode(logArr.slice(8)) as EventData<\n      E[\"fields\"][number],\n      T\n    >;\n    return { data, name: eventName };\n  }\n}\n\nexport function eventDiscriminator(name: string): Buffer {\n  return Buffer.from(sha256.digest(`event:${name}`)).slice(0, 8);\n}\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,WAAW;AAEnC,SAASC,MAAM,QAAQ,WAAW;AAGlC,SAASC,QAAQ,QAAQ,OAAO;AAEhC,OAAM,MAAOC,UAAU;EAWrBC,YAAmBC,GAAQ;IACzB,IAAIA,GAAG,CAACC,MAAM,KAAKC,SAAS,EAAE;MAC5B,IAAI,CAACC,OAAO,GAAG,IAAIC,GAAG,EAAE;MACxB;;IAEF,MAAMD,OAAO,GAAGH,GAAG,CAACC,MAAM,CAACI,GAAG,CAAEC,KAAK,IAAI;MACvC,IAAIC,YAAY,GAAe;QAC7BC,IAAI,EAAEF,KAAK,CAACE,IAAI;QAChBC,IAAI,EAAE;UACJC,IAAI,EAAE,QAAQ;UACdC,MAAM,EAAEL,KAAK,CAACK,MAAM,CAACN,GAAG,CAAEO,CAAC,IAAI;YAC7B,OAAO;cAAEJ,IAAI,EAAEI,CAAC,CAACJ,IAAI;cAAEC,IAAI,EAAEG,CAAC,CAACH;YAAI,CAAE;UACvC,CAAC;;OAEJ;MACD,OAAO,CAACH,KAAK,CAACE,IAAI,EAAEX,QAAQ,CAACgB,aAAa,CAACN,YAAY,EAAEP,GAAG,CAACc,KAAK,CAAC,CAAC;IACtE,CAAC,CAAC;IACF;IACA,IAAI,CAACX,OAAO,GAAG,IAAIC,GAAG,CAACD,OAAO,CAAC;IAE/B,IAAI,CAACY,cAAc,GAAG,IAAIX,GAAG,CAC3BJ,GAAG,CAACC,MAAM,KAAKC,SAAS,GACpB,EAAE,GACFF,GAAG,CAACC,MAAM,CAACI,GAAG,CAAEW,CAAC,IAAK,CACpBrB,MAAM,CAACsB,aAAa,CAACC,kBAAkB,CAACF,CAAC,CAACR,IAAI,CAAC,CAAC,EAChDQ,CAAC,CAACR,IAAI,CACP,CAAC,CACP;EACH;EAEOW,MAAMA,CACXC,GAAW;IAEX,IAAIC,MAAc;IAClB;IACA,IAAI;MACFA,MAAM,GAAGC,MAAM,CAACC,IAAI,CAAC5B,MAAM,CAAC6B,WAAW,CAACJ,GAAG,CAAC,CAAC;KAC9C,CAAC,OAAOJ,CAAC,EAAE;MACV,OAAO,IAAI;;IAEb,MAAMS,IAAI,GAAG9B,MAAM,CAACsB,aAAa,CAACI,MAAM,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAErD;IACA,MAAMC,SAAS,GAAG,IAAI,CAACZ,cAAc,CAACa,GAAG,CAACH,IAAI,CAAC;IAC/C,IAAIE,SAAS,KAAKzB,SAAS,EAAE;MAC3B,OAAO,IAAI;;IAGb,MAAM2B,MAAM,GAAG,IAAI,CAAC1B,OAAO,CAACyB,GAAG,CAACD,SAAS,CAAC;IAC1C,IAAI,CAACE,MAAM,EAAE;MACX,MAAM,IAAIC,KAAK,CAAC,kBAAkBH,SAAS,EAAE,CAAC;;IAEhD,MAAMI,IAAI,GAAGF,MAAM,CAACV,MAAM,CAACE,MAAM,CAACK,KAAK,CAAC,CAAC,CAAC,CAGzC;IACD,OAAO;MAAEK,IAAI;MAAEvB,IAAI,EAAEmB;IAAS,CAAE;EAClC;;AAGF,OAAM,SAAUT,kBAAkBA,CAACV,IAAY;EAC7C,OAAOc,MAAM,CAACC,IAAI,CAAC3B,MAAM,CAACoC,MAAM,CAAC,SAASxB,IAAI,EAAE,CAAC,CAAC,CAACkB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;AAChE"},"metadata":{},"sourceType":"module","externalDependencies":[]}