{"ast":null,"code":"import { ed25519 } from '@noble/curves/ed25519';\nimport { bytesEqual } from './util.js';\n/**\n * TODO: docs\n */\nexport function verifyMessageSignature(_ref) {\n  var message = _ref.message,\n    signedMessage = _ref.signedMessage,\n    signature = _ref.signature,\n    publicKey = _ref.publicKey;\n  // TODO: implement https://github.com/solana-labs/solana/blob/master/docs/src/proposals/off-chain-message-signing.md\n  return bytesEqual(message, signedMessage) && ed25519.verify(signature, signedMessage, publicKey);\n}\n/**\n * TODO: docs\n */\nexport function verifySignMessage(input, output) {\n  var message = input.message,\n    publicKey = input.account.publicKey;\n  var signedMessage = output.signedMessage,\n    signature = output.signature;\n  return verifyMessageSignature({\n    message: message,\n    signedMessage: signedMessage,\n    signature: signature,\n    publicKey: publicKey\n  });\n}","map":{"version":3,"names":["ed25519","bytesEqual","verifyMessageSignature","_ref","message","signedMessage","signature","publicKey","verify","verifySignMessage","input","output","account"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@solana/wallet-standard-util/src/signMessage.ts"],"sourcesContent":["import { ed25519 } from '@noble/curves/ed25519';\nimport type { SolanaSignMessageInput, SolanaSignMessageOutput } from '@solana/wallet-standard-features';\nimport { bytesEqual } from './util.js';\n\n/**\n * TODO: docs\n */\nexport function verifyMessageSignature({\n    message,\n    signedMessage,\n    signature,\n    publicKey,\n}: {\n    message: Uint8Array;\n    signedMessage: Uint8Array;\n    signature: Uint8Array;\n    publicKey: Uint8Array;\n}): boolean {\n    // TODO: implement https://github.com/solana-labs/solana/blob/master/docs/src/proposals/off-chain-message-signing.md\n    return bytesEqual(message, signedMessage) && ed25519.verify(signature, signedMessage, publicKey);\n}\n\n/**\n * TODO: docs\n */\nexport function verifySignMessage(input: SolanaSignMessageInput, output: SolanaSignMessageOutput): boolean {\n    const {\n        message,\n        account: { publicKey },\n    } = input;\n    const { signedMessage, signature } = output;\n    return verifyMessageSignature({ message, signedMessage, signature, publicKey });\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,uBAAuB;AAE/C,SAASC,UAAU,QAAQ,WAAW;AAEtC;;;AAGA,OAAM,SAAUC,sBAAsBA,CAAAC,IAAA,EAUrC;EAAA,IATGC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IACPC,aAAa,GAAAF,IAAA,CAAbE,aAAa;IACbC,SAAS,GAAAH,IAAA,CAATG,SAAS;IACTC,SAAS,GAAAJ,IAAA,CAATI,SAAS;EAOT;EACA,OAAON,UAAU,CAACG,OAAO,EAAEC,aAAa,CAAC,IAAIL,OAAO,CAACQ,MAAM,CAACF,SAAS,EAAED,aAAa,EAAEE,SAAS,CAAC;AACpG;AAEA;;;AAGA,OAAM,SAAUE,iBAAiBA,CAACC,KAA6B,EAAEC,MAA+B;EAC5F,IACIP,OAAO,GAEPM,KAAK,CAFLN,OAAO;IACIG,SAAS,GACpBG,KAAK,CADLE,OAAO,CAAIL,SAAS;EAExB,IAAQF,aAAa,GAAgBM,MAAM,CAAnCN,aAAa;IAAEC,SAAS,GAAKK,MAAM,CAApBL,SAAS;EAChC,OAAOJ,sBAAsB,CAAC;IAAEE,OAAO,EAAPA,OAAO;IAAEC,aAAa,EAAbA,aAAa;IAAEC,SAAS,EAATA,SAAS;IAAEC,SAAS,EAATA;EAAS,CAAE,CAAC;AACnF"},"metadata":{},"sourceType":"module","externalDependencies":[]}