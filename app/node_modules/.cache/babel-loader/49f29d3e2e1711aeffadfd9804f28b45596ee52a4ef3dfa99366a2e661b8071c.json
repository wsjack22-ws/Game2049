{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createHex = exports.createBytes = exports.createBigInt = exports.createNumber = void 0;\nconst superstruct_1 = require(\"superstruct\");\nconst assert_1 = require(\"./assert\");\nconst bytes_1 = require(\"./bytes\");\nconst hex_1 = require(\"./hex\");\nconst NumberLikeStruct = (0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.bigint)(), (0, superstruct_1.string)(), hex_1.StrictHexStruct]);\nconst NumberCoercer = (0, superstruct_1.coerce)((0, superstruct_1.number)(), NumberLikeStruct, Number);\nconst BigIntCoercer = (0, superstruct_1.coerce)((0, superstruct_1.bigint)(), NumberLikeStruct, BigInt);\nconst BytesLikeStruct = (0, superstruct_1.union)([hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array)]);\nconst BytesCoercer = (0, superstruct_1.coerce)((0, superstruct_1.instance)(Uint8Array), (0, superstruct_1.union)([hex_1.StrictHexStruct]), bytes_1.hexToBytes);\nconst HexCoercer = (0, superstruct_1.coerce)(hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array), bytes_1.bytesToHex);\n/**\n * Create a number from a number-like value.\n *\n * - If the value is a number, it is returned as-is.\n * - If the value is a `bigint`, it is converted to a number.\n * - If the value is a string, it is interpreted as a decimal number.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number.\n *\n * This validates that the value is a number-like value, and that the resulting\n * number is not `NaN` or `Infinity`.\n *\n * @example\n * ```typescript\n * const value = createNumber('0x010203');\n * console.log(value); // 66051\n *\n * const otherValue = createNumber(123n);\n * console.log(otherValue); // 123\n * ```\n * @param value - The value to create the number from.\n * @returns The created number.\n * @throws If the value is not a number-like value, or if the resulting number\n * is `NaN` or `Infinity`.\n */\nfunction createNumber(value) {\n  try {\n    const result = (0, superstruct_1.create)(value, NumberCoercer);\n    (0, assert_1.assert)(Number.isFinite(result), `Expected a number-like value, got \"${value}\".`);\n    return result;\n  } catch (error) {\n    if (error instanceof superstruct_1.StructError) {\n      throw new Error(`Expected a number-like value, got \"${value}\".`);\n    }\n    /* istanbul ignore next */\n    throw error;\n  }\n}\nexports.createNumber = createNumber;\n/**\n * Create a `bigint` from a number-like value.\n *\n * - If the value is a number, it is converted to a `bigint`.\n * - If the value is a `bigint`, it is returned as-is.\n * - If the value is a string, it is interpreted as a decimal number and\n * converted to a `bigint`.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number and converted to a `bigint`.\n *\n * @example\n * ```typescript\n * const value = createBigInt('0x010203');\n * console.log(value); // 16909060n\n *\n * const otherValue = createBigInt(123);\n * console.log(otherValue); // 123n\n * ```\n * @param value - The value to create the bigint from.\n * @returns The created bigint.\n * @throws If the value is not a number-like value.\n */\nfunction createBigInt(value) {\n  try {\n    // The `BigInt` constructor throws if the value is not a number-like value.\n    // There is no need to validate the value manually.\n    return (0, superstruct_1.create)(value, BigIntCoercer);\n  } catch (error) {\n    if (error instanceof superstruct_1.StructError) {\n      throw new Error(`Expected a number-like value, got \"${String(error.value)}\".`);\n    }\n    /* istanbul ignore next */\n    throw error;\n  }\n}\nexports.createBigInt = createBigInt;\n/**\n * Create a byte array from a bytes-like value.\n *\n * - If the value is a byte array, it is returned as-is.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is interpreted\n * as a hexadecimal number and converted to a byte array.\n *\n * @example\n * ```typescript\n * const value = createBytes('0x010203');\n * console.log(value); // Uint8Array [ 1, 2, 3 ]\n *\n * const otherValue = createBytes('0x010203');\n * console.log(otherValue); // Uint8Array [ 1, 2, 3 ]\n * ```\n * @param value - The value to create the byte array from.\n * @returns The created byte array.\n * @throws If the value is not a bytes-like value.\n */\nfunction createBytes(value) {\n  if (typeof value === 'string' && value.toLowerCase() === '0x') {\n    return new Uint8Array();\n  }\n  try {\n    return (0, superstruct_1.create)(value, BytesCoercer);\n  } catch (error) {\n    if (error instanceof superstruct_1.StructError) {\n      throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n    }\n    /* istanbul ignore next */\n    throw error;\n  }\n}\nexports.createBytes = createBytes;\n/**\n * Create a hexadecimal string from a bytes-like value.\n *\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is returned\n * as-is.\n * - If the value is a `Uint8Array`, it is converted to a hex string.\n *\n * @example\n * ```typescript\n * const value = createHex(new Uint8Array([1, 2, 3]));\n * console.log(value); // '0x010203'\n *\n * const otherValue = createHex('0x010203');\n * console.log(otherValue); // '0x010203'\n * ```\n * @param value - The value to create the hex string from.\n * @returns The created hex string.\n * @throws If the value is not a bytes-like value.\n */\nfunction createHex(value) {\n  if (value instanceof Uint8Array && value.length === 0 || typeof value === 'string' && value.toLowerCase() === '0x') {\n    return '0x';\n  }\n  try {\n    return (0, superstruct_1.create)(value, HexCoercer);\n  } catch (error) {\n    if (error instanceof superstruct_1.StructError) {\n      throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n    }\n    /* istanbul ignore next */\n    throw error;\n  }\n}\nexports.createHex = createHex;","map":{"version":3,"names":["superstruct_1","require","assert_1","bytes_1","hex_1","NumberLikeStruct","union","number","bigint","string","StrictHexStruct","NumberCoercer","coerce","Number","BigIntCoercer","BigInt","BytesLikeStruct","instance","Uint8Array","BytesCoercer","hexToBytes","HexCoercer","bytesToHex","createNumber","value","result","create","assert","isFinite","error","StructError","Error","exports","createBigInt","String","createBytes","toLowerCase","createHex","length"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@metamask/utils/src/coercers.ts"],"sourcesContent":["import {\n  bigint,\n  coerce,\n  create,\n  Infer,\n  instance,\n  number,\n  string,\n  StructError,\n  union,\n} from 'superstruct';\n\nimport { assert } from './assert';\nimport { bytesToHex, hexToBytes } from './bytes';\nimport { Hex, StrictHexStruct } from './hex';\n\nconst NumberLikeStruct = union([number(), bigint(), string(), StrictHexStruct]);\nconst NumberCoercer = coerce(number(), NumberLikeStruct, Number);\nconst BigIntCoercer = coerce(bigint(), NumberLikeStruct, BigInt);\n\nconst BytesLikeStruct = union([StrictHexStruct, instance(Uint8Array)]);\nconst BytesCoercer = coerce(\n  instance(Uint8Array),\n  union([StrictHexStruct]),\n  hexToBytes,\n);\n\nconst HexCoercer = coerce(StrictHexStruct, instance(Uint8Array), bytesToHex);\n\nexport type NumberLike = Infer<typeof NumberLikeStruct>;\nexport type BytesLike = Infer<typeof BytesLikeStruct>;\n\n/**\n * Create a number from a number-like value.\n *\n * - If the value is a number, it is returned as-is.\n * - If the value is a `bigint`, it is converted to a number.\n * - If the value is a string, it is interpreted as a decimal number.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number.\n *\n * This validates that the value is a number-like value, and that the resulting\n * number is not `NaN` or `Infinity`.\n *\n * @example\n * ```typescript\n * const value = createNumber('0x010203');\n * console.log(value); // 66051\n *\n * const otherValue = createNumber(123n);\n * console.log(otherValue); // 123\n * ```\n * @param value - The value to create the number from.\n * @returns The created number.\n * @throws If the value is not a number-like value, or if the resulting number\n * is `NaN` or `Infinity`.\n */\nexport function createNumber(value: NumberLike): number {\n  try {\n    const result = create(value, NumberCoercer);\n\n    assert(\n      Number.isFinite(result),\n      `Expected a number-like value, got \"${value}\".`,\n    );\n\n    return result;\n  } catch (error) {\n    if (error instanceof StructError) {\n      throw new Error(`Expected a number-like value, got \"${value}\".`);\n    }\n\n    /* istanbul ignore next */\n    throw error;\n  }\n}\n\n/**\n * Create a `bigint` from a number-like value.\n *\n * - If the value is a number, it is converted to a `bigint`.\n * - If the value is a `bigint`, it is returned as-is.\n * - If the value is a string, it is interpreted as a decimal number and\n * converted to a `bigint`.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number and converted to a `bigint`.\n *\n * @example\n * ```typescript\n * const value = createBigInt('0x010203');\n * console.log(value); // 16909060n\n *\n * const otherValue = createBigInt(123);\n * console.log(otherValue); // 123n\n * ```\n * @param value - The value to create the bigint from.\n * @returns The created bigint.\n * @throws If the value is not a number-like value.\n */\nexport function createBigInt(value: NumberLike): bigint {\n  try {\n    // The `BigInt` constructor throws if the value is not a number-like value.\n    // There is no need to validate the value manually.\n    return create(value, BigIntCoercer);\n  } catch (error) {\n    if (error instanceof StructError) {\n      throw new Error(\n        `Expected a number-like value, got \"${String(error.value)}\".`,\n      );\n    }\n\n    /* istanbul ignore next */\n    throw error;\n  }\n}\n\n/**\n * Create a byte array from a bytes-like value.\n *\n * - If the value is a byte array, it is returned as-is.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is interpreted\n * as a hexadecimal number and converted to a byte array.\n *\n * @example\n * ```typescript\n * const value = createBytes('0x010203');\n * console.log(value); // Uint8Array [ 1, 2, 3 ]\n *\n * const otherValue = createBytes('0x010203');\n * console.log(otherValue); // Uint8Array [ 1, 2, 3 ]\n * ```\n * @param value - The value to create the byte array from.\n * @returns The created byte array.\n * @throws If the value is not a bytes-like value.\n */\nexport function createBytes(value: BytesLike): Uint8Array {\n  if (typeof value === 'string' && value.toLowerCase() === '0x') {\n    return new Uint8Array();\n  }\n\n  try {\n    return create(value, BytesCoercer);\n  } catch (error) {\n    if (error instanceof StructError) {\n      throw new Error(\n        `Expected a bytes-like value, got \"${String(error.value)}\".`,\n      );\n    }\n\n    /* istanbul ignore next */\n    throw error;\n  }\n}\n\n/**\n * Create a hexadecimal string from a bytes-like value.\n *\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is returned\n * as-is.\n * - If the value is a `Uint8Array`, it is converted to a hex string.\n *\n * @example\n * ```typescript\n * const value = createHex(new Uint8Array([1, 2, 3]));\n * console.log(value); // '0x010203'\n *\n * const otherValue = createHex('0x010203');\n * console.log(otherValue); // '0x010203'\n * ```\n * @param value - The value to create the hex string from.\n * @returns The created hex string.\n * @throws If the value is not a bytes-like value.\n */\nexport function createHex(value: BytesLike): Hex {\n  if (\n    (value instanceof Uint8Array && value.length === 0) ||\n    (typeof value === 'string' && value.toLowerCase() === '0x')\n  ) {\n    return '0x';\n  }\n\n  try {\n    return create(value, HexCoercer);\n  } catch (error) {\n    if (error instanceof StructError) {\n      throw new Error(\n        `Expected a bytes-like value, got \"${String(error.value)}\".`,\n      );\n    }\n\n    /* istanbul ignore next */\n    throw error;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}