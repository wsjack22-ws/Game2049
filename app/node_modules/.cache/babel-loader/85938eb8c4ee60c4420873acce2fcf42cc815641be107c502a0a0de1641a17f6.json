{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _toConsumableArray = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _asyncToGenerator = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/wuhuan/gif-portal-starter/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar idl_1 = require(\"../../coder/borsh/idl\");\nvar base64_1 = require(\"../../utils/bytes/base64\");\nvar ViewFactory = /*#__PURE__*/function () {\n  function ViewFactory() {\n    _classCallCheck(this, ViewFactory);\n  }\n  _createClass(ViewFactory, null, [{\n    key: \"build\",\n    value: function build(programId, idlIx, simulateFn, idl) {\n      var isMut = idlIx.accounts.find(function (a) {\n        return a.isMut;\n      });\n      var hasReturn = !!idlIx.returns;\n      if (isMut || !hasReturn) return;\n      var view = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var _a,\n            _b,\n            simulationResult,\n            returnPrefix,\n            returnLog,\n            returnData,\n            returnType,\n            coder,\n            _args = arguments;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return simulateFn.apply(void 0, _args);\n              case 2:\n                simulationResult = _context.sent;\n                returnPrefix = \"Program return: \".concat(programId, \" \");\n                returnLog = simulationResult.raw.find(function (l) {\n                  return l.startsWith(returnPrefix);\n                });\n                if (returnLog) {\n                  _context.next = 7;\n                  break;\n                }\n                throw new Error(\"View expected return log\");\n              case 7:\n                returnData = (0, base64_1.decode)(returnLog.slice(returnPrefix.length));\n                returnType = idlIx.returns;\n                if (returnType) {\n                  _context.next = 11;\n                  break;\n                }\n                throw new Error(\"View expected return type\");\n              case 11:\n                coder = idl_1.IdlCoder.fieldLayout({\n                  type: returnType\n                }, Array.from([].concat(_toConsumableArray((_a = idl.accounts) !== null && _a !== void 0 ? _a : []), _toConsumableArray((_b = idl.types) !== null && _b !== void 0 ? _b : []))));\n                return _context.abrupt(\"return\", coder.decode(returnData));\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee);\n        }));\n        return function view() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      return view;\n    }\n  }]);\n  return ViewFactory;\n}();\nexports.default = ViewFactory;","map":{"version":3,"names":["idl_1","require","base64_1","ViewFactory","_classCallCheck","_createClass","key","value","build","programId","idlIx","simulateFn","idl","isMut","accounts","find","a","hasReturn","returns","view","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_a","_b","simulationResult","returnPrefix","returnLog","returnData","returnType","coder","_args","arguments","wrap","_callee$","_context","prev","next","apply","sent","concat","raw","l","startsWith","Error","decode","slice","length","IdlCoder","fieldLayout","type","Array","from","_toConsumableArray","types","abrupt","stop","exports","default"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@project-serum/anchor/src/program/namespace/views.ts"],"sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport { Idl, IdlAccount } from \"../../idl.js\";\nimport { SimulateFn } from \"./simulate.js\";\nimport {\n  AllInstructions,\n  InstructionContextFn,\n  MakeInstructionsNamespace,\n} from \"./types\";\nimport { IdlCoder } from \"../../coder/borsh/idl\";\nimport { decode } from \"../../utils/bytes/base64\";\n\nexport default class ViewFactory {\n  public static build<IDL extends Idl, I extends AllInstructions<IDL>>(\n    programId: PublicKey,\n    idlIx: AllInstructions<IDL>,\n    simulateFn: SimulateFn<IDL>,\n    idl: IDL\n  ): ViewFn<IDL, I> | undefined {\n    const isMut = idlIx.accounts.find((a: IdlAccount) => a.isMut);\n    const hasReturn = !!idlIx.returns;\n    if (isMut || !hasReturn) return;\n\n    const view: ViewFn<IDL> = async (...args) => {\n      let simulationResult = await simulateFn(...args);\n      const returnPrefix = `Program return: ${programId} `;\n      let returnLog = simulationResult.raw.find((l) =>\n        l.startsWith(returnPrefix)\n      );\n      if (!returnLog) {\n        throw new Error(\"View expected return log\");\n      }\n      let returnData = decode(returnLog.slice(returnPrefix.length));\n      let returnType = idlIx.returns;\n      if (!returnType) {\n        throw new Error(\"View expected return type\");\n      }\n      const coder = IdlCoder.fieldLayout(\n        { type: returnType },\n        Array.from([...(idl.accounts ?? []), ...(idl.types ?? [])])\n      );\n      return coder.decode(returnData);\n    };\n    return view;\n  }\n}\n\nexport type ViewNamespace<\n  IDL extends Idl = Idl,\n  I extends AllInstructions<IDL> = AllInstructions<IDL>\n> = MakeInstructionsNamespace<IDL, I, Promise<any>>;\n\n/**\n * ViewFn is a single method generated from an IDL. It simulates a method\n * against a cluster configured by the provider, and then parses the events\n * and extracts return data from the raw logs emitted during the simulation.\n */\nexport type ViewFn<\n  IDL extends Idl = Idl,\n  I extends AllInstructions<IDL> = AllInstructions<IDL>\n> = InstructionContextFn<IDL, I, Promise<any>>;\n"],"mappings":";;;;;;;;;;AAQA,IAAAA,KAAA,GAAAC,OAAA;AACA,IAAAC,QAAA,GAAAD,OAAA;AAAkD,IAE7BE,WAAW;EAAA,SAAAA,YAAA;IAAAC,eAAA,OAAAD,WAAA;EAAA;EAAAE,YAAA,CAAAF,WAAA;IAAAG,GAAA;IAAAC,KAAA,EACvB,SAAAC,MACLC,SAAoB,EACpBC,KAA2B,EAC3BC,UAA2B,EAC3BC,GAAQ;MAER,IAAMC,KAAK,GAAGH,KAAK,CAACI,QAAQ,CAACC,IAAI,CAAC,UAACC,CAAa;QAAA,OAAKA,CAAC,CAACH,KAAK;MAAA,EAAC;MAC7D,IAAMI,SAAS,GAAG,CAAC,CAACP,KAAK,CAACQ,OAAO;MACjC,IAAIL,KAAK,IAAI,CAACI,SAAS,EAAE;MAEzB,IAAME,IAAI;QAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAgB,SAAAC,QAAA;UAAA,IAAAC,EAAA;YAAAC,EAAA;YAAAC,gBAAA;YAAAC,YAAA;YAAAC,SAAA;YAAAC,UAAA;YAAAC,UAAA;YAAAC,KAAA;YAAAC,KAAA,GAAAC,SAAA;UAAA,OAAAZ,mBAAA,GAAAa,IAAA,UAAAC,SAAAC,QAAA;YAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;cAAA;gBAAAF,QAAA,CAAAE,IAAA;gBAAA,OACK5B,UAAU,CAAA6B,KAAA,SAAAP,KAAQ,CAAC;cAAA;gBAA5CN,gBAAgB,GAAAU,QAAA,CAAAI,IAAA;gBACdb,YAAY,sBAAAc,MAAA,CAAsBjC,SAAS;gBAC7CoB,SAAS,GAAGF,gBAAgB,CAACgB,GAAG,CAAC5B,IAAI,CAAC,UAAC6B,CAAC;kBAAA,OAC1CA,CAAC,CAACC,UAAU,CAACjB,YAAY,CAAC;gBAAA,EAC3B;gBAAA,IACIC,SAAS;kBAAAQ,QAAA,CAAAE,IAAA;kBAAA;gBAAA;gBAAA,MACN,IAAIO,KAAK,CAAC,0BAA0B,CAAC;cAAA;gBAEzChB,UAAU,GAAG,IAAA5B,QAAA,CAAA6C,MAAM,EAAClB,SAAS,CAACmB,KAAK,CAACpB,YAAY,CAACqB,MAAM,CAAC,CAAC;gBACzDlB,UAAU,GAAGrB,KAAK,CAACQ,OAAO;gBAAA,IACzBa,UAAU;kBAAAM,QAAA,CAAAE,IAAA;kBAAA;gBAAA;gBAAA,MACP,IAAIO,KAAK,CAAC,2BAA2B,CAAC;cAAA;gBAExCd,KAAK,GAAGhC,KAAA,CAAAkD,QAAQ,CAACC,WAAW,CAChC;kBAAEC,IAAI,EAAErB;gBAAU,CAAE,EACpBsB,KAAK,CAACC,IAAI,IAAAZ,MAAA,CAAAa,kBAAA,CAAM,CAAA9B,EAAA,GAAAb,GAAG,CAACE,QAAQ,cAAAW,EAAA,cAAAA,EAAA,GAAI,EAAE,GAAA8B,kBAAA,CAAO,CAAA7B,EAAA,GAAAd,GAAG,CAAC4C,KAAK,cAAA9B,EAAA,cAAAA,EAAA,GAAI,EAAE,EAAE,CAAC,CAC5D;gBAAA,OAAAW,QAAA,CAAAoB,MAAA,WACMzB,KAAK,CAACe,MAAM,CAACjB,UAAU,CAAC;cAAA;cAAA;gBAAA,OAAAO,QAAA,CAAAqB,IAAA;YAAA;UAAA,GAAAlC,OAAA;QAAA,CAChC;QAAA,gBAnBKL,IAAIA,CAAA;UAAA,OAAAC,IAAA,CAAAoB,KAAA,OAAAN,SAAA;QAAA;MAAA,GAmBT;MACD,OAAOf,IAAI;IACb;EAAC;EAAA,OAAAhB,WAAA;AAAA;AAhCHwD,OAAA,CAAAC,OAAA,GAAAzD,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}