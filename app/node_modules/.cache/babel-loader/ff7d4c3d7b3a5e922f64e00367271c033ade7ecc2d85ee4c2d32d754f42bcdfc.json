{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SolanaWalletAdapterWalletAccount_adapter, _SolanaWalletAdapterWallet_instances, _SolanaWalletAdapterWallet_listeners, _SolanaWalletAdapterWallet_adapter, _SolanaWalletAdapterWallet_supportedTransactionVersions, _SolanaWalletAdapterWallet_chain, _SolanaWalletAdapterWallet_endpoint, _SolanaWalletAdapterWallet_account, _SolanaWalletAdapterWallet_connected, _SolanaWalletAdapterWallet_disconnected, _SolanaWalletAdapterWallet_connect, _SolanaWalletAdapterWallet_disconnect, _SolanaWalletAdapterWallet_on, _SolanaWalletAdapterWallet_emit, _SolanaWalletAdapterWallet_off, _SolanaWalletAdapterWallet_deserializeTransaction, _SolanaWalletAdapterWallet_signAndSendTransaction, _SolanaWalletAdapterWallet_signTransaction, _SolanaWalletAdapterWallet_signMessage, _SolanaWalletAdapterWallet_signIn;\nimport { isVersionedTransaction, WalletReadyState } from '@solana/wallet-adapter-base';\nimport { isSolanaChain } from '@solana/wallet-standard-chains';\nimport { SolanaSignAndSendTransaction, SolanaSignIn, SolanaSignMessage, SolanaSignTransaction } from '@solana/wallet-standard-features';\nimport { getEndpointForChain } from '@solana/wallet-standard-util';\nimport { Connection, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { getWallets } from '@wallet-standard/app';\nimport { StandardConnect, StandardDisconnect, StandardEvents } from '@wallet-standard/features';\nimport { arraysEqual, bytesEqual, ReadonlyWalletAccount } from '@wallet-standard/wallet';\nimport bs58 from 'bs58';\n/** TODO: docs */\nexport class SolanaWalletAdapterWalletAccount extends ReadonlyWalletAccount {\n  constructor({\n    adapter,\n    address,\n    publicKey,\n    chains\n  }) {\n    const features = [SolanaSignAndSendTransaction];\n    if ('signTransaction' in adapter) {\n      features.push(SolanaSignTransaction);\n    }\n    if ('signMessage' in adapter) {\n      features.push(SolanaSignMessage);\n    }\n    if ('signIn' in adapter) {\n      features.push(SolanaSignIn);\n    }\n    super({\n      address,\n      publicKey,\n      chains,\n      features\n    });\n    _SolanaWalletAdapterWalletAccount_adapter.set(this, void 0);\n    if (new.target === SolanaWalletAdapterWalletAccount) {\n      Object.freeze(this);\n    }\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWalletAccount_adapter, adapter, \"f\");\n  }\n}\n_SolanaWalletAdapterWalletAccount_adapter = new WeakMap();\n/** TODO: docs */\nexport class SolanaWalletAdapterWallet {\n  constructor(adapter, chain, endpoint) {\n    _SolanaWalletAdapterWallet_instances.add(this);\n    _SolanaWalletAdapterWallet_listeners.set(this, {});\n    _SolanaWalletAdapterWallet_adapter.set(this, void 0);\n    _SolanaWalletAdapterWallet_supportedTransactionVersions.set(this, void 0);\n    _SolanaWalletAdapterWallet_chain.set(this, void 0);\n    _SolanaWalletAdapterWallet_endpoint.set(this, void 0);\n    _SolanaWalletAdapterWallet_account.set(this, void 0);\n    _SolanaWalletAdapterWallet_connect.set(this, async ({\n      silent\n    } = {}) => {\n      if (!silent && !__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").connected) {\n        await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").connect();\n      }\n      __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected).call(this);\n      return {\n        accounts: this.accounts\n      };\n    });\n    _SolanaWalletAdapterWallet_disconnect.set(this, async () => {\n      await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").disconnect();\n    });\n    _SolanaWalletAdapterWallet_on.set(this, (event, listener) => {\n      __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event]?.push(listener) || (__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event] = [listener]);\n      return () => __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_off).call(this, event, listener);\n    });\n    _SolanaWalletAdapterWallet_signAndSendTransaction.set(this, async (...inputs) => {\n      const outputs = [];\n      if (inputs.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const input = inputs[0];\n        if (input.account !== __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\")) throw new Error('invalid account');\n        if (!isSolanaChain(input.chain)) throw new Error('invalid chain');\n        const transaction = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_deserializeTransaction).call(this, input.transaction);\n        const {\n          commitment,\n          preflightCommitment,\n          skipPreflight,\n          maxRetries,\n          minContextSlot\n        } = input.options || {};\n        const endpoint = getEndpointForChain(input.chain, __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_endpoint, \"f\"));\n        const connection = new Connection(endpoint, commitment || 'confirmed');\n        const latestBlockhash = commitment ? await connection.getLatestBlockhash({\n          commitment: preflightCommitment || commitment,\n          minContextSlot\n        }) : undefined;\n        const signature = await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").sendTransaction(transaction, connection, {\n          preflightCommitment,\n          skipPreflight,\n          maxRetries,\n          minContextSlot\n        });\n        if (latestBlockhash) {\n          await connection.confirmTransaction({\n            ...latestBlockhash,\n            signature\n          }, commitment || 'confirmed');\n        }\n        outputs.push({\n          signature: bs58.decode(signature)\n        });\n      } else if (inputs.length > 1) {\n        // Adapters have no `sendAllTransactions` method, so just sign and send each transaction in serial.\n        for (const input of inputs) {\n          outputs.push(...(await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signAndSendTransaction, \"f\").call(this, input)));\n        }\n      }\n      return outputs;\n    });\n    _SolanaWalletAdapterWallet_signTransaction.set(this, async (...inputs) => {\n      if (!('signTransaction' in __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\"))) throw new Error('signTransaction not implemented by adapter');\n      const outputs = [];\n      if (inputs.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const input = inputs[0];\n        if (input.account !== __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\")) throw new Error('invalid account');\n        if (input.chain && !isSolanaChain(input.chain)) throw new Error('invalid chain');\n        const transaction = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_deserializeTransaction).call(this, input.transaction);\n        const signedTransaction = await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").signTransaction(transaction);\n        const serializedTransaction = isVersionedTransaction(signedTransaction) ? signedTransaction.serialize() : new Uint8Array(signedTransaction.serialize({\n          requireAllSignatures: false,\n          verifySignatures: false\n        }));\n        outputs.push({\n          signedTransaction: serializedTransaction\n        });\n      } else if (inputs.length > 1) {\n        for (const input of inputs) {\n          if (input.account !== __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\")) throw new Error('invalid account');\n          if (input.chain && !isSolanaChain(input.chain)) throw new Error('invalid chain');\n        }\n        const transactions = inputs.map(({\n          transaction\n        }) => __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_deserializeTransaction).call(this, transaction));\n        const signedTransactions = await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").signAllTransactions(transactions);\n        outputs.push(...signedTransactions.map(signedTransaction => {\n          const serializedTransaction = isVersionedTransaction(signedTransaction) ? signedTransaction.serialize() : new Uint8Array(signedTransaction.serialize({\n            requireAllSignatures: false,\n            verifySignatures: false\n          }));\n          return {\n            signedTransaction: serializedTransaction\n          };\n        }));\n      }\n      return outputs;\n    });\n    _SolanaWalletAdapterWallet_signMessage.set(this, async (...inputs) => {\n      if (!('signMessage' in __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\"))) throw new Error('signMessage not implemented by adapter');\n      const outputs = [];\n      if (inputs.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const input = inputs[0];\n        if (input.account !== __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\")) throw new Error('invalid account');\n        const signature = await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").signMessage(input.message);\n        outputs.push({\n          signedMessage: input.message,\n          signature\n        });\n      } else if (inputs.length > 1) {\n        // Adapters have no `signAllMessages` method, so just sign each message in serial.\n        for (const input of inputs) {\n          outputs.push(...(await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signMessage, \"f\").call(this, input)));\n        }\n      }\n      return outputs;\n    });\n    _SolanaWalletAdapterWallet_signIn.set(this, async (...inputs) => {\n      if (!('signIn' in __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\"))) throw new Error('signIn not implemented by adapter');\n      if (inputs.length > 1) {\n        // Adapters don't support `signIn` with multiple inputs, so just sign in with each input in serial.\n        const outputs = [];\n        for (const input of inputs) {\n          outputs.push(await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").signIn(input));\n        }\n        return outputs;\n      } else {\n        return [await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").signIn(inputs[0])];\n      }\n    });\n    if (new.target === SolanaWalletAdapterWallet) {\n      Object.freeze(this);\n    }\n    const supportedTransactionVersions = [...(adapter.supportedTransactionVersions || ['legacy'])];\n    if (!supportedTransactionVersions.length) {\n      supportedTransactionVersions.push('legacy');\n    }\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_adapter, adapter, \"f\");\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, supportedTransactionVersions, \"f\");\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_chain, chain, \"f\");\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_endpoint, endpoint, \"f\");\n    adapter.on('connect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected), this);\n    adapter.on('disconnect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_disconnected), this);\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected).call(this);\n  }\n  get version() {\n    return '1.0.0';\n  }\n  get name() {\n    return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").name;\n  }\n  get icon() {\n    return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").icon;\n  }\n  get chains() {\n    return [__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_chain, \"f\")];\n  }\n  get features() {\n    const features = {\n      [StandardConnect]: {\n        version: '1.0.0',\n        connect: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_connect, \"f\")\n      },\n      [StandardDisconnect]: {\n        version: '1.0.0',\n        disconnect: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_disconnect, \"f\")\n      },\n      [StandardEvents]: {\n        version: '1.0.0',\n        on: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_on, \"f\")\n      },\n      [SolanaSignAndSendTransaction]: {\n        version: '1.0.0',\n        supportedTransactionVersions: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\"),\n        signAndSendTransaction: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signAndSendTransaction, \"f\")\n      }\n    };\n    let signTransactionFeature;\n    if ('signTransaction' in __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\")) {\n      signTransactionFeature = {\n        [SolanaSignTransaction]: {\n          version: '1.0.0',\n          supportedTransactionVersions: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\"),\n          signTransaction: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signTransaction, \"f\")\n        }\n      };\n    }\n    let signMessageFeature;\n    if ('signMessage' in __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\")) {\n      signMessageFeature = {\n        [SolanaSignMessage]: {\n          version: '1.0.0',\n          signMessage: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signMessage, \"f\")\n        }\n      };\n    }\n    let signInFeature;\n    if ('signIn' in __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\")) {\n      signInFeature = {\n        [SolanaSignIn]: {\n          version: '1.0.0',\n          signIn: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signIn, \"f\")\n        }\n      };\n    }\n    return {\n      ...features,\n      ...signTransactionFeature,\n      ...signMessageFeature\n    };\n  }\n  get accounts() {\n    return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\") ? [__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\")] : [];\n  }\n  get endpoint() {\n    return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_endpoint, \"f\");\n  }\n  destroy() {\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").off('connect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected), this);\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").off('disconnect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_disconnected), this);\n  }\n}\n_SolanaWalletAdapterWallet_listeners = new WeakMap(), _SolanaWalletAdapterWallet_adapter = new WeakMap(), _SolanaWalletAdapterWallet_supportedTransactionVersions = new WeakMap(), _SolanaWalletAdapterWallet_chain = new WeakMap(), _SolanaWalletAdapterWallet_endpoint = new WeakMap(), _SolanaWalletAdapterWallet_account = new WeakMap(), _SolanaWalletAdapterWallet_connect = new WeakMap(), _SolanaWalletAdapterWallet_disconnect = new WeakMap(), _SolanaWalletAdapterWallet_on = new WeakMap(), _SolanaWalletAdapterWallet_signAndSendTransaction = new WeakMap(), _SolanaWalletAdapterWallet_signTransaction = new WeakMap(), _SolanaWalletAdapterWallet_signMessage = new WeakMap(), _SolanaWalletAdapterWallet_signIn = new WeakMap(), _SolanaWalletAdapterWallet_instances = new WeakSet(), _SolanaWalletAdapterWallet_connected = function _SolanaWalletAdapterWallet_connected() {\n  const publicKey = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").publicKey?.toBytes();\n  if (publicKey) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const address = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").publicKey.toBase58();\n    const account = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\");\n    if (!account || account.address !== address || account.chains.includes(__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_chain, \"f\")) || !bytesEqual(account.publicKey, publicKey)) {\n      __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_account, new SolanaWalletAdapterWalletAccount({\n        adapter: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\"),\n        address,\n        publicKey,\n        chains: [__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_chain, \"f\")]\n      }), \"f\");\n      __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_emit).call(this, 'change', {\n        accounts: this.accounts\n      });\n    }\n  }\n}, _SolanaWalletAdapterWallet_disconnected = function _SolanaWalletAdapterWallet_disconnected() {\n  if (__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\")) {\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_account, undefined, \"f\");\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_emit).call(this, 'change', {\n      accounts: this.accounts\n    });\n  }\n}, _SolanaWalletAdapterWallet_emit = function _SolanaWalletAdapterWallet_emit(event, ...args) {\n  // eslint-disable-next-line prefer-spread\n  __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event]?.forEach(listener => listener.apply(null, args));\n}, _SolanaWalletAdapterWallet_off = function _SolanaWalletAdapterWallet_off(event, listener) {\n  __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event] = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event]?.filter(existingListener => listener !== existingListener);\n}, _SolanaWalletAdapterWallet_deserializeTransaction = function _SolanaWalletAdapterWallet_deserializeTransaction(serializedTransaction) {\n  const transaction = VersionedTransaction.deserialize(serializedTransaction);\n  if (!__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\").includes(transaction.version)) throw new Error('unsupported transaction version');\n  if (transaction.version === 'legacy' && arraysEqual(__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\"), ['legacy'])) return Transaction.from(serializedTransaction);\n  return transaction;\n};\n/** TODO: docs */\nexport function registerWalletAdapter(adapter, chain, endpoint, match = wallet => wallet.name === adapter.name) {\n  const {\n    register,\n    get,\n    on\n  } = getWallets();\n  const destructors = [];\n  function destroy() {\n    destructors.forEach(destroy => destroy());\n    destructors.length = 0;\n  }\n  function setup() {\n    // If the adapter is unsupported, or a standard wallet that matches it has already been registered, do nothing.\n    if (adapter.readyState === WalletReadyState.Unsupported || get().some(match)) return true;\n    // If the adapter isn't ready, try again later.\n    const ready = adapter.readyState === WalletReadyState.Installed || adapter.readyState === WalletReadyState.Loadable;\n    if (ready) {\n      const wallet = new SolanaWalletAdapterWallet(adapter, chain, endpoint);\n      destructors.push(() => wallet.destroy());\n      // Register the adapter wrapped as a standard wallet, and receive a function to unregister the adapter.\n      destructors.push(register(wallet));\n      // Whenever a standard wallet is registered ...\n      destructors.push(on('register', (...wallets) => {\n        // ... check if it matches the adapter.\n        if (wallets.some(match)) {\n          // If it does, remove the event listener and unregister the adapter.\n          destroy();\n        }\n      }));\n    }\n    return ready;\n  }\n  if (!setup()) {\n    function listener() {\n      if (setup()) {\n        adapter.off('readyStateChange', listener);\n      }\n    }\n    adapter.on('readyStateChange', listener);\n    destructors.push(() => adapter.off('readyStateChange', listener));\n  }\n  return destroy;\n}","map":{"version":3,"names":["isVersionedTransaction","WalletReadyState","isSolanaChain","SolanaSignAndSendTransaction","SolanaSignIn","SolanaSignMessage","SolanaSignTransaction","getEndpointForChain","Connection","Transaction","VersionedTransaction","getWallets","StandardConnect","StandardDisconnect","StandardEvents","arraysEqual","bytesEqual","ReadonlyWalletAccount","bs58","SolanaWalletAdapterWalletAccount","constructor","adapter","address","publicKey","chains","features","push","_SolanaWalletAdapterWalletAccount_adapter","set","new","target","Object","freeze","__classPrivateFieldSet","SolanaWalletAdapterWallet","chain","endpoint","_SolanaWalletAdapterWallet_listeners","_SolanaWalletAdapterWallet_adapter","_SolanaWalletAdapterWallet_supportedTransactionVersions","_SolanaWalletAdapterWallet_chain","_SolanaWalletAdapterWallet_endpoint","_SolanaWalletAdapterWallet_account","_SolanaWalletAdapterWallet_connect","silent","__classPrivateFieldGet","connected","connect","_SolanaWalletAdapterWallet_instances","_SolanaWalletAdapterWallet_connected","call","accounts","_SolanaWalletAdapterWallet_disconnect","disconnect","_SolanaWalletAdapterWallet_on","event","listener","_SolanaWalletAdapterWallet_off","_SolanaWalletAdapterWallet_signAndSendTransaction","inputs","outputs","length","input","account","Error","transaction","_SolanaWalletAdapterWallet_deserializeTransaction","commitment","preflightCommitment","skipPreflight","maxRetries","minContextSlot","options","connection","latestBlockhash","getLatestBlockhash","undefined","signature","sendTransaction","confirmTransaction","decode","_SolanaWalletAdapterWallet_signTransaction","signedTransaction","signTransaction","serializedTransaction","serialize","Uint8Array","requireAllSignatures","verifySignatures","transactions","map","signedTransactions","signAllTransactions","_SolanaWalletAdapterWallet_signMessage","signMessage","message","signedMessage","_SolanaWalletAdapterWallet_signIn","signIn","supportedTransactionVersions","on","_SolanaWalletAdapterWallet_disconnected","version","name","icon","signAndSendTransaction","signTransactionFeature","signMessageFeature","signInFeature","destroy","off","toBytes","toBase58","includes","_SolanaWalletAdapterWallet_emit","args","forEach","apply","filter","existingListener","deserialize","from","registerWalletAdapter","match","wallet","register","get","destructors","setup","readyState","Unsupported","some","ready","Installed","Loadable","wallets"],"sources":["/Users/wuhuan/gif-portal-starter/node_modules/@solana/wallet-standard-wallet-adapter-base/src/wallet.ts"],"sourcesContent":["import { type Adapter, isVersionedTransaction, WalletReadyState } from '@solana/wallet-adapter-base';\nimport { isSolanaChain, type SolanaChain } from '@solana/wallet-standard-chains';\nimport {\n    SolanaSignAndSendTransaction,\n    type SolanaSignAndSendTransactionFeature,\n    type SolanaSignAndSendTransactionMethod,\n    type SolanaSignAndSendTransactionOutput,\n    SolanaSignIn,\n    type SolanaSignInFeature,\n    type SolanaSignInMethod,\n    type SolanaSignInOutput,\n    SolanaSignMessage,\n    type SolanaSignMessageFeature,\n    type SolanaSignMessageMethod,\n    type SolanaSignMessageOutput,\n    SolanaSignTransaction,\n    type SolanaSignTransactionFeature,\n    type SolanaSignTransactionMethod,\n    type SolanaSignTransactionOutput,\n    type SolanaTransactionVersion,\n} from '@solana/wallet-standard-features';\nimport { getEndpointForChain } from '@solana/wallet-standard-util';\nimport { Connection, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { getWallets } from '@wallet-standard/app';\nimport type { Wallet, WalletIcon } from '@wallet-standard/base';\nimport {\n    StandardConnect,\n    type StandardConnectFeature,\n    type StandardConnectMethod,\n    StandardDisconnect,\n    type StandardDisconnectFeature,\n    type StandardDisconnectMethod,\n    StandardEvents,\n    type StandardEventsFeature,\n    type StandardEventsListeners,\n    type StandardEventsNames,\n    type StandardEventsOnMethod,\n} from '@wallet-standard/features';\nimport { arraysEqual, bytesEqual, ReadonlyWalletAccount } from '@wallet-standard/wallet';\nimport bs58 from 'bs58';\n\n/** TODO: docs */\nexport class SolanaWalletAdapterWalletAccount extends ReadonlyWalletAccount {\n    readonly #adapter: Adapter;\n\n    constructor({\n        adapter,\n        address,\n        publicKey,\n        chains,\n    }: {\n        adapter: Adapter;\n        address: string;\n        publicKey: Uint8Array;\n        chains: readonly SolanaChain[];\n    }) {\n        const features: (keyof (SolanaSignAndSendTransactionFeature &\n            SolanaSignTransactionFeature &\n            SolanaSignMessageFeature &\n            SolanaSignInFeature))[] = [SolanaSignAndSendTransaction];\n        if ('signTransaction' in adapter) {\n            features.push(SolanaSignTransaction);\n        }\n        if ('signMessage' in adapter) {\n            features.push(SolanaSignMessage);\n        }\n        if ('signIn' in adapter) {\n            features.push(SolanaSignIn);\n        }\n\n        super({ address, publicKey, chains, features });\n        if (new.target === SolanaWalletAdapterWalletAccount) {\n            Object.freeze(this);\n        }\n\n        this.#adapter = adapter;\n    }\n}\n\n/** TODO: docs */\nexport class SolanaWalletAdapterWallet implements Wallet {\n    readonly #listeners: {\n        [E in StandardEventsNames]?: StandardEventsListeners[E][];\n    } = {};\n    readonly #adapter: Adapter;\n    readonly #supportedTransactionVersions: readonly SolanaTransactionVersion[];\n    readonly #chain: SolanaChain;\n    readonly #endpoint: string | undefined;\n    #account: SolanaWalletAdapterWalletAccount | undefined;\n\n    get version() {\n        return '1.0.0' as const;\n    }\n\n    get name() {\n        return this.#adapter.name;\n    }\n\n    get icon() {\n        return this.#adapter.icon as WalletIcon;\n    }\n\n    get chains() {\n        return [this.#chain];\n    }\n\n    get features(): StandardConnectFeature &\n        StandardDisconnectFeature &\n        SolanaSignAndSendTransactionFeature &\n        Partial<SolanaSignTransactionFeature & SolanaSignMessageFeature & SolanaSignInFeature> {\n        const features: StandardConnectFeature &\n            StandardDisconnectFeature &\n            StandardEventsFeature &\n            SolanaSignAndSendTransactionFeature = {\n            [StandardConnect]: {\n                version: '1.0.0',\n                connect: this.#connect,\n            },\n            [StandardDisconnect]: {\n                version: '1.0.0',\n                disconnect: this.#disconnect,\n            },\n            [StandardEvents]: {\n                version: '1.0.0',\n                on: this.#on,\n            },\n            [SolanaSignAndSendTransaction]: {\n                version: '1.0.0',\n                supportedTransactionVersions: this.#supportedTransactionVersions,\n                signAndSendTransaction: this.#signAndSendTransaction,\n            },\n        };\n\n        let signTransactionFeature: SolanaSignTransactionFeature | undefined;\n        if ('signTransaction' in this.#adapter) {\n            signTransactionFeature = {\n                [SolanaSignTransaction]: {\n                    version: '1.0.0',\n                    supportedTransactionVersions: this.#supportedTransactionVersions,\n                    signTransaction: this.#signTransaction,\n                },\n            };\n        }\n\n        let signMessageFeature: SolanaSignMessageFeature | undefined;\n        if ('signMessage' in this.#adapter) {\n            signMessageFeature = {\n                [SolanaSignMessage]: {\n                    version: '1.0.0',\n                    signMessage: this.#signMessage,\n                },\n            };\n        }\n\n        let signInFeature: SolanaSignInFeature | undefined;\n        if ('signIn' in this.#adapter) {\n            signInFeature = {\n                [SolanaSignIn]: {\n                    version: '1.0.0',\n                    signIn: this.#signIn,\n                },\n            };\n        }\n\n        return { ...features, ...signTransactionFeature, ...signMessageFeature };\n    }\n\n    get accounts() {\n        return this.#account ? [this.#account] : [];\n    }\n\n    get endpoint() {\n        return this.#endpoint;\n    }\n\n    constructor(adapter: Adapter, chain: SolanaChain, endpoint?: string) {\n        if (new.target === SolanaWalletAdapterWallet) {\n            Object.freeze(this);\n        }\n\n        const supportedTransactionVersions = [...(adapter.supportedTransactionVersions || ['legacy'])];\n        if (!supportedTransactionVersions.length) {\n            supportedTransactionVersions.push('legacy');\n        }\n\n        this.#adapter = adapter;\n        this.#supportedTransactionVersions = supportedTransactionVersions;\n        this.#chain = chain;\n        this.#endpoint = endpoint;\n\n        adapter.on('connect', this.#connected, this);\n        adapter.on('disconnect', this.#disconnected, this);\n\n        this.#connected();\n    }\n\n    destroy(): void {\n        this.#adapter.off('connect', this.#connected, this);\n        this.#adapter.off('disconnect', this.#disconnected, this);\n    }\n\n    #connected(): void {\n        const publicKey = this.#adapter.publicKey?.toBytes();\n        if (publicKey) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const address = this.#adapter.publicKey!.toBase58();\n            const account = this.#account;\n            if (\n                !account ||\n                account.address !== address ||\n                account.chains.includes(this.#chain) ||\n                !bytesEqual(account.publicKey, publicKey)\n            ) {\n                this.#account = new SolanaWalletAdapterWalletAccount({\n                    adapter: this.#adapter,\n                    address,\n                    publicKey,\n                    chains: [this.#chain],\n                });\n                this.#emit('change', { accounts: this.accounts });\n            }\n        }\n    }\n\n    #disconnected(): void {\n        if (this.#account) {\n            this.#account = undefined;\n            this.#emit('change', { accounts: this.accounts });\n        }\n    }\n\n    #connect: StandardConnectMethod = async ({ silent } = {}) => {\n        if (!silent && !this.#adapter.connected) {\n            await this.#adapter.connect();\n        }\n\n        this.#connected();\n\n        return { accounts: this.accounts };\n    };\n\n    #disconnect: StandardDisconnectMethod = async () => {\n        await this.#adapter.disconnect();\n    };\n\n    #on: StandardEventsOnMethod = (event, listener) => {\n        this.#listeners[event]?.push(listener) || (this.#listeners[event] = [listener]);\n        return (): void => this.#off(event, listener);\n    };\n\n    #emit<E extends StandardEventsNames>(event: E, ...args: Parameters<StandardEventsListeners[E]>): void {\n        // eslint-disable-next-line prefer-spread\n        this.#listeners[event]?.forEach((listener) => listener.apply(null, args));\n    }\n\n    #off<E extends StandardEventsNames>(event: E, listener: StandardEventsListeners[E]): void {\n        this.#listeners[event] = this.#listeners[event]?.filter((existingListener) => listener !== existingListener);\n    }\n\n    #deserializeTransaction(serializedTransaction: Uint8Array): Transaction | VersionedTransaction {\n        const transaction = VersionedTransaction.deserialize(serializedTransaction);\n        if (!this.#supportedTransactionVersions.includes(transaction.version))\n            throw new Error('unsupported transaction version');\n        if (transaction.version === 'legacy' && arraysEqual(this.#supportedTransactionVersions, ['legacy']))\n            return Transaction.from(serializedTransaction);\n        return transaction;\n    }\n\n    #signAndSendTransaction: SolanaSignAndSendTransactionMethod = async (...inputs) => {\n        const outputs: SolanaSignAndSendTransactionOutput[] = [];\n\n        if (inputs.length === 1) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const input = inputs[0]!;\n            if (input.account !== this.#account) throw new Error('invalid account');\n            if (!isSolanaChain(input.chain)) throw new Error('invalid chain');\n            const transaction = this.#deserializeTransaction(input.transaction);\n            const { commitment, preflightCommitment, skipPreflight, maxRetries, minContextSlot } = input.options || {};\n            const endpoint = getEndpointForChain(input.chain, this.#endpoint);\n            const connection = new Connection(endpoint, commitment || 'confirmed');\n\n            const latestBlockhash = commitment\n                ? await connection.getLatestBlockhash({\n                      commitment: preflightCommitment || commitment,\n                      minContextSlot,\n                  })\n                : undefined;\n\n            const signature = await this.#adapter.sendTransaction(transaction, connection, {\n                preflightCommitment,\n                skipPreflight,\n                maxRetries,\n                minContextSlot,\n            });\n\n            if (latestBlockhash) {\n                await connection.confirmTransaction(\n                    {\n                        ...latestBlockhash,\n                        signature,\n                    },\n                    commitment || 'confirmed'\n                );\n            }\n\n            outputs.push({ signature: bs58.decode(signature) });\n        } else if (inputs.length > 1) {\n            // Adapters have no `sendAllTransactions` method, so just sign and send each transaction in serial.\n            for (const input of inputs) {\n                outputs.push(...(await this.#signAndSendTransaction(input)));\n            }\n        }\n\n        return outputs;\n    };\n\n    #signTransaction: SolanaSignTransactionMethod = async (...inputs) => {\n        if (!('signTransaction' in this.#adapter)) throw new Error('signTransaction not implemented by adapter');\n        const outputs: SolanaSignTransactionOutput[] = [];\n\n        if (inputs.length === 1) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const input = inputs[0]!;\n            if (input.account !== this.#account) throw new Error('invalid account');\n            if (input.chain && !isSolanaChain(input.chain)) throw new Error('invalid chain');\n            const transaction = this.#deserializeTransaction(input.transaction);\n\n            const signedTransaction = await this.#adapter.signTransaction(transaction);\n\n            const serializedTransaction = isVersionedTransaction(signedTransaction)\n                ? signedTransaction.serialize()\n                : new Uint8Array(\n                      signedTransaction.serialize({\n                          requireAllSignatures: false,\n                          verifySignatures: false,\n                      })\n                  );\n\n            outputs.push({ signedTransaction: serializedTransaction });\n        } else if (inputs.length > 1) {\n            for (const input of inputs) {\n                if (input.account !== this.#account) throw new Error('invalid account');\n                if (input.chain && !isSolanaChain(input.chain)) throw new Error('invalid chain');\n            }\n            const transactions = inputs.map(({ transaction }) => this.#deserializeTransaction(transaction));\n\n            const signedTransactions = await this.#adapter.signAllTransactions(transactions);\n\n            outputs.push(\n                ...signedTransactions.map((signedTransaction) => {\n                    const serializedTransaction = isVersionedTransaction(signedTransaction)\n                        ? signedTransaction.serialize()\n                        : new Uint8Array(\n                              signedTransaction.serialize({\n                                  requireAllSignatures: false,\n                                  verifySignatures: false,\n                              })\n                          );\n\n                    return { signedTransaction: serializedTransaction };\n                })\n            );\n        }\n\n        return outputs;\n    };\n\n    #signMessage: SolanaSignMessageMethod = async (...inputs) => {\n        if (!('signMessage' in this.#adapter)) throw new Error('signMessage not implemented by adapter');\n        const outputs: SolanaSignMessageOutput[] = [];\n\n        if (inputs.length === 1) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const input = inputs[0]!;\n            if (input.account !== this.#account) throw new Error('invalid account');\n\n            const signature = await this.#adapter.signMessage(input.message);\n\n            outputs.push({ signedMessage: input.message, signature });\n        } else if (inputs.length > 1) {\n            // Adapters have no `signAllMessages` method, so just sign each message in serial.\n            for (const input of inputs) {\n                outputs.push(...(await this.#signMessage(input)));\n            }\n        }\n\n        return outputs;\n    };\n\n    #signIn: SolanaSignInMethod = async (...inputs) => {\n        if (!('signIn' in this.#adapter)) throw new Error('signIn not implemented by adapter');\n\n        if (inputs.length > 1) {\n            // Adapters don't support `signIn` with multiple inputs, so just sign in with each input in serial.\n            const outputs: SolanaSignInOutput[] = [];\n            for (const input of inputs) {\n                outputs.push(await this.#adapter.signIn(input));\n            }\n            return outputs;\n        } else {\n            return [await this.#adapter.signIn(inputs[0])];\n        }\n    };\n}\n\n/** TODO: docs */\nexport function registerWalletAdapter(\n    adapter: Adapter,\n    chain: SolanaChain,\n    endpoint?: string,\n    match: (wallet: Wallet) => boolean = (wallet) => wallet.name === adapter.name\n): () => void {\n    const { register, get, on } = getWallets();\n    const destructors: (() => void)[] = [];\n\n    function destroy(): void {\n        destructors.forEach((destroy) => destroy());\n        destructors.length = 0;\n    }\n\n    function setup(): boolean {\n        // If the adapter is unsupported, or a standard wallet that matches it has already been registered, do nothing.\n        if (adapter.readyState === WalletReadyState.Unsupported || get().some(match)) return true;\n\n        // If the adapter isn't ready, try again later.\n        const ready =\n            adapter.readyState === WalletReadyState.Installed || adapter.readyState === WalletReadyState.Loadable;\n        if (ready) {\n            const wallet = new SolanaWalletAdapterWallet(adapter, chain, endpoint);\n            destructors.push(() => wallet.destroy());\n            // Register the adapter wrapped as a standard wallet, and receive a function to unregister the adapter.\n            destructors.push(register(wallet));\n            // Whenever a standard wallet is registered ...\n            destructors.push(\n                on('register', (...wallets) => {\n                    // ... check if it matches the adapter.\n                    if (wallets.some(match)) {\n                        // If it does, remove the event listener and unregister the adapter.\n                        destroy();\n                    }\n                })\n            );\n        }\n        return ready;\n    }\n\n    if (!setup()) {\n        function listener(): void {\n            if (setup()) {\n                adapter.off('readyStateChange', listener);\n            }\n        }\n\n        adapter.on('readyStateChange', listener);\n        destructors.push(() => adapter.off('readyStateChange', listener));\n    }\n\n    return destroy;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}